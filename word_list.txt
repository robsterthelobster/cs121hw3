ICS 31 • DAVID G. KAY • UC IRVINE • WINTER 2015
Lab Assignment 1 

This assignment is due at the end of lab on Friday, January 9.
Preparation (Do this part individually, before coming to lab)
(1) Do everything on the course refrence sheet (the syllabus) under the heading "What to do this week to get started in ICS 31." This includes filling out the questionnaire at eee.uci.edu/survey/ics31.w15.q and registering yourself at checkmate.ics.uci.edu and piazza.com. 
(2) Read through the Lab Work part of this assignment before you come to lab, to get an idea of what you'll be doing with your partner.
(3) If you haven't already, read the guidelines for pair programming. They describe how you will be doing all your work in the lab. Pair programming is not as simple as just working together; there are specific roles and specific things each person needs to do.
(4) We encourage you to talk with each other and help each other understand how to do the assignments. There are some limits, though; in particular, remember that knowing how to do it (when the quizzes and exams come, for example) is much more important than just putting down the answer. If you haven't already, read the guidelines for collaboration and independent work. You may also wish to read some general advice about how to approach college work; not all of the practices that served you well in secondary school will work well here.

(5) Read Chapter 1 of the Zyante e-text or Chapter 1 of the Perkovic textbook; they provide some background, including some issues we talked about in class.
These "preparation" sections of each assignment will include the reading in the texts and some exercises for you to try out as you read. This is all wrapped together in the Zyante e-text; you'll just do the activities as they show up. But you should do the same thing if you're using the Perkovic book: People learn best when they apply what they read as they go, so it's best to read the book with a computer at hand so you can type things in and try them out. There's always a big gap between thinking you understand something you read and actually being able to apply it. We expect these exercises to go quickly, but if you find yourself spending more than a couple of minutes on an exercise without making any progress, you should ask about it (on Piazza, probably) rather than continuing to spin your wheels unproductively. Note that this also means you should get started early, so that you'll have the time to get any questions answered.
[Perkovic reading notes: In Chapter 1 on page 3, the author characterizes different career paths in computing. But he mis-characterizes work in Human-Computer Interaction (HCI) when he says, "Artistic computer professionals design the interfaces that clients use to interact with an application." Designing interfaces is not primarily an artistic activity and many people who work in HCI have no particular artistic interest or ability. Instead, HCI designers are experimenters, observing how actual users perform when using a design and refining the design based on what they observe. UCI is a world leader in HCI research; ICS offers half a dozen undergrad courses in various aspects of HCI.]
(6) Read sections 2.1–2.7 of the Zyante e-text or sections 2.1 and 2.2 of the Perkovic text. You don't have to do all of this by Wednesday, but we'll be talking about some of this material in class on Thursday.
As you're reading (in Zyante or Perkovic), it's important that you apply what you're reading; it's impossible to learn this material without actually working through it. Zyante provides interactive parts (animations, "Try" sections, question sets); Perkovic provides "Practice Problem" sections. You should try to do nearly all of these in whichever text you're using. Don't get stalled for a long time on any single question, but if you have trouble, ask someone.  Especially early in the course, it may seem tedious and slow because you're just learning your way. But the effort here will pay off in a greater facility later (or, to put it negatively, failing to do this now will result in disappointing performance later).
We don't require you to turn in your answers to these practice problems; most of the solutions are shown in Zyante and appear at the end of the chapter in Perkovic. But don't just read the problem, turn to the solution, and say, "Yeah, that looks right." Write down your answer first; force yourself to work it through. That's how you learn.
(7) If you'd like to install Python on your personal machine, follow these instructions. (If you're in a "Laptop Only" section, sections 7–8, you'll need to do this. Your TA or lab tutor may be able to help in lab.)
 
Lab Work (Do this part with your partner in lab)
(a) Choose a partner for this assignment on the partner selection web page, following the link in the message you received. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only on this assignment. Your partner must be enrolled in the same lab section you're enrolled in. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. 
 All your computer-based work on this (and every) lab assignment must follow the pair programming guidelines.
(b) It's especially important that you be able to receive electronic mail sent to your UCInet ID (you@uci.edu). You may redirect this mail to another account of your choosing, but don't let that mail go unread. 
With your partner, test this out by sending each other Email at your UCI addresses. There's nothing to turn in for this part.
(c) Locate and launch the IDLE software.
  
IDLE starts up with a "Python Shell" window where we'll see the results of most of our programs. IDLE also lets you open up a program window; do this now, by choosing "New Window" from the File menu. Give that window a name right away and save it, by choosing "Save As" from the file menu and specifying the name lab1.py . (You can save it anywhere on your machine; just don't forget where you put it and remember to recycle/discard it after you're done so that the next student on your lab machine doesn't use your work by mistake.)
In your 
  lab1.py file, you can type print statements that contain expressions; when you run the  code in the file (choose "Run Module" from the Run menu or press the F5 key), the results are printed in the Python Shell window. Try it: Type print('Hello') in your lab1.py file and then run it. You should see Hello 
in the shell window.
[It is also possible to type expressions, without the print, directly into the shell window after IDLE's "prompt" of three greater-than signs (">>>"). This behaves a little differently, though, and most beginners find it confusing, so for now we're going to type all our Python code in a code window and run it when we're ready.]
Experiment with IDLE to get familiar with it, following the suggestions below. One person "drives" (types); the other "navigates" (observes, questions, suggests); if you don't know what this is about, go back and read the pair programming guidelines. The main point of this assignment is to get you familiar with the mechanics of IDLE, Python, and pair programming.
Try printing the values of some expressions, like print(123 + 456) and print(2 ** 5) (** is the operator for exponents) and print(5 * 4 * 3 * 2 * 1). 
Type in some definitions, like number_of_students = 356 and number_of_staff = 16 and then try printing expressions like number_of_students / number_of_staff.


(That is, type the Python statement print(number_of_students / number_of_staff). At this point we'll just say "print the expresion X" and you'll know to type the Python statement print(X) in your lab1.py file and then run it.)
Probably you've already done this a few times: Type some things that Python can't evaluate and see what messages Python produces. (Error messages are not bad; they're an inevitable part of programming. Don't think of them as the computer yelling at you; it's just trying to tell you why it couldn't process something.  The language of error messages can be cryICS 31 • DAVID G. KAY • UC IRVINE • WINTER 2015
Lab Assignment 2 

This assignment is due at the end of lab on Friday, January 16.
Preparation (Do this part individually, before coming to lab)
(1) If you're just getting enrolled in the class, do everything on the course refrence sheet (the syllabus) under the heading "What to do this week to get started in ICS 31." This includes registering yourself at checkmate.ics.uci.edu and piazza.com and filling out the questionnaire at eee.uci.edu/survey/ics31.w15.q.

(2 for Zyante readers)  Read sections 2.8 and 2.10–2.12  of the Zyante e-text, doing the interactive activities as you go. In section 2.11, don't worry much for now about regular (unnamed) tuples; we'll cover them later in the quarter. The same goes for dicts  in sections 2.9 and 2.11. In general, the Zyante materials tend to introduce a richer set of concepts than we cover in class (in this class—you'll run into all of these concepts if you continue your study of computing). What we do in lecture and in our lab assignments should be your guide; you don't need to worry much about concepts they present that we say nothing about. If there's a question about what's important, ask on Piazza or in class.
(2 for Perkovic readers) Read sections 2.3–2.5 of the Perkovic text, trying the practice problems (before looking at the solutions).
[Reading note: At the beginning of section 2.3,  the list of pet names is homogeneous—all the items are of the same type, strings. Next, the author shows you a heterogenous list—one with items of various types. In our class, we will use lists only for homogeneous data (so, for example, we can apply the same operation to every item on a list); for heterogeneous collections of data, we will use namedtuples (as discussed in class).]
Why have a fractions module when we could just use float numbers? The book mentions situations where you have very large or very small numbers but need to calculate precisely. A related situation occurs when you need to calculate with values like 1/3 that cannot be represented precisely as a decimal number. In a long chain of computations, the difference between 0.33333333 and 1/3 can build up into a significant value; that's called a roundoff error. If you use the fraction library for those computations and convert to a float only at the very end, you avoid the potential for roundoff errors.

(3 for Zyante readers) Read sections 3.1–3.4, 3.7, and 3.10 of the Zyante e-text. We'll get to the whole chapter eventually; these are just the sections we'll be getting to first
(3 for Perkovic readers) Read sections 3.3 and 3.5 of the Perkovic textbook. (You can skip the section in the middle of page 72; it's more confusing than helpful.) We'll get to the other sections soon and if you have some time, you can go ahead and read the chapter in order. But we're going to be talking about these two sections first. As you read, do practice problems 3.8, 3.9, 3.11 (for the average function), 3.14, and 3.15.
(4) Both texts use the term "user-defined functions." A more modern, more accurate term would be "programmer-defined functions." Decades ago, a computer user was a person who wrote software, but today a user is an "end user" who rarely if ever writes any code.
(5) Functions might be the single most important concept in first-quarter programming. They're not the only important concept—we need a lot of concepts to write useful programs—but encapsulating operations into a named function and then using that function as a component of still larger functions, that's a basis of all software development. Functions are also sometimes called procedures, methods, subroutines, or subprograms; sometimes those terms are used in subtly different ways, but sometimes not.
(6) Go back and read the assignment advice again, especially about the "three-minute rule."
(7) Read through the Lab Work part of this assignment before you come to lab on Monday, just to get an idea of what you'll be doing with your partner.
 
Lab Work (Do this part with your partner in lab)
(a) Choose a partner for this assignment, using the partner selection page whose link you received by Email. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Your partner must be enrolled in the same lab section you're enrolled in. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. 
(b) 
For this assignment, you will create a Python file called lab2.py. Type your answers to all the parts of this assignment into this file; non-Python text can be in comments or multi-line (triple-quoted) strings.
On the first line of the file type a comment with the names and IDs of both partners and some other identifying information, like this: 

#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab Asst 2.

All the Python code in your file should produce the specified results when you run the file. When you've finished the assignment, you'll submit this file via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)
(c) In class we have written Python code similar to this:
print('How many hours?')
hours = int(input())
print('This many hours:', hours)
print('How many dollars per hour?')
rate = int(input())
print('This many dollars per hour:  ', rate)
print('Weekly salary:  ', hours * rate)

(c.1) Copy this code and paste it into your lab2.py file; then run it to make sure it works as you expect.
Then modify the code as shown below to reflect an alternate form of the input() function (with the "input prompt" string as an argument to the function).  Run it, of course. Do you see the difference (i) in how it behaves and (ii) in how you write the code? Sometimes we prefer this alternative, sometimes we prefer the other, depending mostly on how we want our program to behave; neither one is the best in every case.
hours = int(input('How many hours?'))
print('This many hours:', hours)
rate = int(input('How many dollars per hour?'))
print('This many dollars per hour:  ', rate)
print('Weekly salary:  ', hours * rate)
Then modify the code to print a dollar sign before each dollar amount.  (For now, don't worry about the precise spacing or the precise number of digits after the decimal point; we'll learn how to specify those later.)

(c.2) Write a new sequence of statements that, when executed, might produce results that look like this (where the bold-faced text would by typed by the user):
Hello.  What is your name?  Alice Anteater
Hello, Alice Anteater
It's nice to meet you.  
How old are you?  19
Next year you will be 20 years old.
Good-bye!
The foregoing may be enough to get you going on this problem.  But here are a couple of
tips and bits of advice that may help give you a boost:The code you write should ask the user for a name and age.  That is, the code should work, 
without any change, no matter what name and age the user types.  This is called writing code that is 
general (in the sense of general-purpose); the same code works with any reasonable data. The opposite would be code that
includes Alice Anteater's actual name and the age 19 in the Python code itself, so that the code would always print out the same thing (Alice Anteater's information) every time.  That's called hard-coded data, and it's much less flexible and useful.  We'll see situations where hard-coding certain constants is the right approach, but this isn't one of them.  
One key approach to writing a program is to base it on a similar program that you already have.  
(Even professional programmers do this; professional development environments contain pre-written frameworks for different kinds of tasks and the internet is full of open-source code repositories that professionals can use to avoid reinventing the wheel.)
In this case, you can start with the salary code you copied and pasted earlier.
It contains nearly all the elements you need to do the name-and-age task; you just need to reassemble them and chICS 31 • DAVID G. KAY • UC IRVINE • WINTER 2014
Lab Assignment 3 

This assignment is due at the end of lab on Friday, January 23. Material from this lab may appear on the midterm (Tuesday, January 27).
Preparation (Do this part individually, before coming to lab)
(1) If you're just getting enrolled in the class, do everything on the course refrence sheet (the syllabus) under the heading "What to do this week to get started in ICS 31." This includes registering yourself at checkmate.ics.uci.edu and piazza.com, filling out the questionnaire at eee.uci.edu/survey/ics31.w15.q, and arranging with your TA to turn in the lab assignments you missed.

(2) This is a critical time in the course: If you have been a passive partner in the lab, letting your (possibly more experienced) partner take the lead, smiling and nodding and not taking your turns as "driver" at the keyboard or not taking the trouble to slow your partner down for an explanation of what's going on—if you haven't been fully engaged in the course and feel as though the material is passing you by—there's still time (barely) for you to turn it around and really learn the material. Read the book; do the practice problems; ask questions about points that aren't clear; consider LARC tutoring; check out the supplementary resoures on the resource page. Everyone is capable of doing well in ICS 31, but not without learning what you need for the labs and the quizzes and exams.
(3 for Zyante readers) Read sections 3.5, 3.6 and 3.11–3.15.
(3 for Perkovic readers) Re-read setions 3.3 and 3.5 and read sections 3.1 and 3.2 of the Perkovic text, trying the practice problems (before looking at the solutions). We have already worked with assignment statements and distinguished some data structures as immutable while others are mutable. Section 3.4 explores these issues further, but we recommend skipping that section until after the midterm.
In section 3.2, look at the flowchart diagrams. They're a good way to visualize the semantics (meaning, behavior) of the control structures.
(4) Become comfortable with the terminology of functions: function definitions, function calling, arguments (the values you call the functions with), parameters (the names of those values inside the function, defined in the function header/signature/def line), what it means when we say a function "takes a number and a string", what we mean by "this function takes two inputs" [it does not involve the input() function],what it means for a function to return a value, the difference between defining a function and calling it.
(5) (Re-)read about the design recipe. You will follow these steps for every function you write in this course. (One potential exception is functions that have side effects—that don't return a value but change something external, like keyboard input or printing or drawing on the tkinter canvas. Those functions can't easily be tested with assert statements.)
(6) This assignment may use the following Python features that we covered in class: namedtuples (how to define and construct them, how to retrieve individual fields, how to change them); if statements and boolean expressions; simple for-loops to process each item in a sequence (for i in L:); assert statements
(7) Read through the Lab Work part of this assignment before you come to lab on Monday. This will give you an idea of what you'll be doing with your partner, but it also contains a variety of explanations of important course material, things you'll need for the assignment, quizzes, and exams. We won't bother repeating this instruction in  next week's lab (or thereafter), but of course you should continue to follow it.
 
Lab Work (Do this part with your partner in lab)
Programmers hate reinventing the wheel. It is almost always better to use an already-written tool than to rewrite it from scratch. (There could be exceptions: The existing tool could be of unknown quality or could be protected by copyright law.) This applies even to assignments and exams in ICS 31. If some code you wrote earlier in the assignment or exam would help you to solve a later problem, you are expected to use that code (unless there are explicit instructions not to) and you'll receive less credit if you re-implement the same thing a second time. So keep your eyes out; code and techniques in this lab and others will help you in your later work.
(a) Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. As always, your partner must be enrolled in the same lab section you're enrolled in. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. Register your partnership in the partner app.
(b) 
For this assignment, you will create a Python file called lab3.py. Type your answers to all the parts of this assignment into this file; non-Python text can be in comments or multi-line (triple-quoted) strings.
On the first line of the file type a comment with the names and IDs of both partners and some other identifying information, like this: 

#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 3.

The Python code in your file should produce the specified results when you run the file. When you've finished the assignment, you'll submit this file via Checkmate. (It's a good idea if each partner keeps a copy of the lab work at the end of each session, just in case someone can't make it to the next lab.)
It is also helpful in the grading if you separate your code for each part of the assignment in your lab3.py file. Indicate each part of the assignment in the file with comments like this:
#
#
# Part (c)
#
#
and also include print statements so the different parts are distinguished in the output, for example:
print()  # Leaves a blank line.  print('\n') leaves two blank lines.
print()
print('---------- Part (c) ----------')
print()

We won't bother repeating these instructions in later lab assignments, but unless we specify otherwise you should still prepare your lab work this way.
(c) Python exercises:  Follow the design recipe for the functions specified here and for every function you write.  Include enough assert statements  with enough different values to demonstrate that the function works correctly.
(1)
Implement the function abbreviate that takes the name of a month as input and returns its three-letter abbreviation.  In fact, it should take any string as input and return its first three characters, as these examples illustrate:
assert abbreviate('January') == 'Jan'
assert abbreviate('abril') == 'abr'

(2)
Implement the function find_area_square that takes as input a number representing the length of one side of a square and returns the area of that square.
assert find_area_square(1) == 1
assert find_area_square(5) == 25






(3)
Implement the function find_area_circle that takes as its input the radius of a circle and returns the area of that circle. 
(If you don't remember the formula, Google it.)
assert find_area_circle(1) == 3.14159
assert find_area_circle(5) == 78.53975(Your values may vary slightly depending on what value you use for pi.)








(4)
Implement the function print_even_numbers that takes a list of integers as input and prints each even number on the list.
Calling  print_even_numbers([2, 47, 31, 99, 20, 19, 23, 105, 710, 1004]) would produce this output in the shell window:
2
20
710
1004




(5)
Implement a function called calculate_shipping that takes one argument, the weight of a package to be shipped. It returns the price for shipping the package, calculated as follows: For anything under 2 pounds, the rate is $2.00. For packages of 2 pounds but under 10 pounds, the rate is $5.00. For packages of 10 pounds or more, the rate is $5.00 plus $1.50 per pound for each pound over 10.
assert calculate_shipping(1.5) == 2.00
assert calculate_shipping(7) == 5.00
assert calculate_shipping(15) == 12.50
The tests (assert statements) in your code should be
thorough.  In particular, they should ICS 31 & CSE 41 • FALL 2014 • DONALD BREN SCHOOL OF INFORMATION AND COMPUTER SCIENCES • UC IRVINE
ICS 31: Introduction to Programming
COURSE REFERENCE

Instructor:  David G. Kay,
5056 Donald Bren Hall (DBH) (kay@uci.edu)
Quick links:
 Assignments 
 Quizzes 
   
 Piazza (Q&A) 
 
 Resources


  Course goals:  This course is the first
    of a three-quarter sequence introducing computer science through computer programming. This course will
 broaden your technical horizons, focus on systematic problem solving, and possibly change the way you look at the world. We welcome you and we hope you enjoy it.

  Prerequisite concepts:  This course
    does not expect any previous experience in computer science or computer
    programming.  If you do have some experience, you will find some topics
familiar but many others will certainly be new to you.

We do expect each student to be able to navigate
the Windows  systems in our labs, to navigate the World-Wide Web, to download
and read documents in Adobe Acrobat (pdf) format, and to read and send electronic
mail.  Some of our assignments will require these skills.  If you need to
pick these skills up or sharpen them, do it in the first week of the quarter;
speak with us if you need a hand.

Meeting place and times:  Tuesdays and Thursdays, lecture section A meets 8:00 a.m. to 9:20 a.m. in Engineering Lecture Hall 100 and lecture section B meets 11:00 a.m. to 12:20 p.m. in Social Science Lecture Hall 100. 
Lab sections, TAs, and tutors: Each student must enroll in one of these lab sections:

LabTimeRoomTA (Email  @uci.edu)Tutor(s) (subject to change)1MWF 8–9:50amICS 183Sonali Madireddi (madiredd)
      Jessica Parhusip (ex. F 9), German Krikorian
    2MWF 10–11:50ICS 183Neeraj Kumar (neerajk)Anthony De La Rosa, Derek Olson3MWF 12–1:50ICS 183Neeraj Kumar (neerajk)
      Neeraj Shah, Jessica Pham
    4MWF 2–3:50ICS 183Suyash Misra (suyashm)Kenny Pham, Nelson Lueng5MWF 4–5:50ICS 183Vignesh Raghunathan (raghunav)
      Emily Nguyen, Tim Chen (ex. W 4)
    6MWF 6–7:50ICS 183Vignesh Raghunathan (raghunav)Kaiyi Ma7MWF 8–9:50pmICS 183Sonali Madireddi  (madiredd)
      Lawrence Day, Songyou Cao (MW)
    8
      MWF 8–9:50am
    ICS 192
      Shriti Raj (shritir)
    Andy Chen9MWF 10–11:50
      ICS 192
    
      
        Shriti Raj (shritir)
        
    
      Karen Chu, Daniel Acevedo (F)
    10MWF 12–1:50
      ICS 192
    Sanket Khanwalkar  (skhanwal)Jonathan Shokoor, JJ Lin11MWF 2–3:50
      ICS 192
    Sanket Khanwalkar  (skhanwal)
      Andrew Yang, Jonathan Yuen
    12MWF 8–9:50amICS 364AAndrea D'Souza  (ardsouza)Brent Melton13MWF 10–11:50ICS 364ASuyash Misra   (suyashm)
      Emory Jiang, Fred Sun
    14MWF 12–1:50ICS 364APrateek Basavapur Swamy  (pbasavap)Tiancheng Xu, Kenneth Bobiles15MWF 2–3:50ICS 364APrateek Basavapur Swamy  (pbasavap)
      Jonathan Tran (ex. F 3), Daniel Acevedo (MW)
    16MWF 4–5:50ICS 364AAndrea D'Souza (ardsouza)Ji Yeon Kim, Wesley Lum



None of the six scheduled lab hours each week are optional. It is essential that you attend the lecture and lab you're officially enrolled in; the class is too full to accommodate "visiting." Most of your lab work will be done in pairs,
  so the scheduled lab times are the best times to
work with your partner. Because the labs are  full, if you want to change your enrollment from one lab section to another, you need to find a person who wants to make the opposite change and the two of you must go in person to the ICS Student Affairs Office as soon as possible, but definitely before the end of the second week. Note that lab sections 12 through 16 are "laptop only sections"; in accordance with the ICS Laptop Policy, students in those sections are required to bring a laptop computer to every section meeting.

Office hours:  You are welcome to drop by my office at any time.  If I'm there and not immersed in something
    else, I'll be glad to chat about the course material or other topics.
    I will definitely be in or near my office during these scheduled hours,
    during which course-related matters will have first priority:  Tuesdays from 12:30 to 1:15 and Wednesdays from 11:30 to 12:20. I may adjust these times at the end of the first week. Of course emergencies
    may come up, but I will try to give advance notice of any change. I'll
    also be happy to make arrangements for other times during the week; "making an appointment" is no big deal (but if you make one, don't skip it  without getting in touch).  The
    quickest and most effective way to reach me is by electronic mail, as described
below.

Questions and announcements:  You can
 get a response to your course-related questions most quickly by posting them at Piazza.com.  If you
need to reach one of us privately, use our individual IDs listed above. I will never intentionally ignore a message, so if you don't receive a response, write again; sometimes overactive spam filters snag a legitmate message. Using course-specific subject lines and your UCInet Email address will help your messages get noticed.

  We will also send course announcements by Email
    to the official course mailing list, so you should check your Email daily.
    Note that this mailing list goes to the Email address that the registrar
    has for you (your UCInet ID).    If you prefer to read your Email
  on another account, forwarding instructions appear below. Don't let this slide; if you miss official
announcements, your grade could suffer.

This course's web page is at http://www.ics.uci.edu/~kay/courses/31 and 
official course Email is archived at eee.uci.edu; follow the link on your MyEEE page.

Textbooks and software: There are two choices for a textbook this quarter:
An interactive electronic text, Zyante's Programming in Python 3, UCI editionA traditional textbook, Ljubomir Perkovic's Introduction to Computing Using Python: An Application Development Focus.  
The course resource page has more information about these alternatives. Neither is technically required, meaning that we won't assign specific exercises from either text, but every student should have (at least) one of them to supplement what we do in class and lab.

The Python software you need for your work (Python 3.4 and the IDLE environment) is installed on every machine in the ICS labs. Because every lab assignment is done with a partner, you'll do much of your work in the scheduled labs. You are also welcome to install Python on your personal machine; we just have to say that because everyone's computer is configured a little differently, we can't promise to fix the installation problems that may come up on your own machine. At http://www.ics.uci.edu/~kay/courses/31/refs.html
  is a list of supplementary resources on course topics, including information about installing Python.


  Labs and lab hours: Of course you will
    need to do some of your work outside of the scheduled Monday/Wednesday/Friday
    lab hours.  Students in ICS 31 may use any of the school's instructional
    computing labs except for times when another course is scheduled in the
  lab exclusively.  See http://www.ics.uci.edu/~lab
  for lab hours and other information.   Note in particular that all ICS labs
are closed on university holidays  such as the Friday after Thanksgiving
(but not the Saturday and Sunday).

Please remember that programming tasks always
take longer to complete than you think they will, no matter how much experience
you have.  You must account for this as you plan your time; we cannot accept
busy schedules or time mismanagement as an excuse for late or incomplete
assignments.

Course structure:
• Weekly  lab assignments (30% of the course grade). All the assignments
will be available at http://www.ics.uci.edu/~kay/courses/31/hw/.

• Class participation:  Based primarily on participating consistently
and effectively in the lab, including turning in a partner evaluation for each lab assignment. Responding to various electronic surveys and contributing on Piazza.com can help your score here, too. (10%)
• Weekly quizzes: Given on line through EEE, available from Sunday afternoon through 11:00 p.m. Tuesday.
(10% together) Because these are self-gradeICS 31 • DAVID G. KAY • UC IRVINE • WINTER 2015
Lab Assignment 4 

This assignment is due at the end of lab on Friday, January 30. 
Preparation (Do this part individually, but do whatever preparation you need for the midterm first; the early parts of this assignment may help you review on Monday in lab)
(1) After you get your midterm back from your TA, review what you missed, and learn the concepts you didn't know before. Then take the midterm again for yourself: Cover up your answers and re-create them from scratch. (It's okay to skip the questions you answered correctly the first time, but it wouldn't hurt to do them again, either.) The topics on the midterm are fundamental; you'll have a hard time moving forward without mastering them. 
(2 for Zyante readers) Read sections 3.7–3.9, doing all the interactive activities.
(2 for Perkovic readers) Read any sections of Chapter 3 that you haven't read yet, particularly sections 3.4 and 3.6. Try the practice problems, especially 3.12 and 3.13 (before looking at the solutions). Do at least four of the parts of Exercise 3.21. Go back and look at section 2.4 to remind yourself how the range function works. This is a key programming skill, to be able to read a description of a language feature and then use it correctly.
(3) At www.pythontutor.com you can run simple Python code and see the values change in memory; if you have a question about what's going on in some code, this site may help you see step by step what's happening. Be sure to choose Python 3 and not Python 2.7.
 
Lab Work (Do this part with your partner in lab)
(a) Choose a partner for this assignment and register your partnership using the partner app, ideally on Monday. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab. 
Note that doing these problems by yourself, at home, is not pair programming and will not receive full credit (at least for participation). It's great if you want to work outside of lab, but whatever you prepare alone you must explain to your partner so that he or she understands it as well as you do. (This is to your benefit as well as your partner's: One of the most common workplace situations (and not just in science and technology) is to bring a co-worker up to speed on some project.)
Scary warning: There's another reason to do all your work jointly with your assigned partner: You protect yourself from getting in trouble for academic dishonesty. Something like this occasionally happens in programming classes: Partner A works alone and submits some code that Partner B didn't work on and hasn't examined. But Partner A gets that code from another student in the class, or a roommate who's a CS major, or someone who took the course before. All of these are instances of academic dishonesty, and often they come to the notice of the TAs or instructor. Then both partners, A and B, get in trouble because the work is submitted jointly by both students. These are difficult and unhappy situations; you can avoid them by doing pair programming properly and, when you get stuck, asking the lab tutors, the TAs, the instructor, or Piazza for help. 
(b) 
Prepare your lab4.py file as in previous labs, including a line like this: 

#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 4.

All the Python code you write for this assignment should be executable (i.e., not commented out) in your lab4.py file and should produce the correct results when you (and the TA) run the file. We can't give you credit for code that doesn't run and produce the correct results. On lab assignments, unlike on exams,  there's rarely partial credit for partially working code because you have the ability to test it out and refine it until it does work correctly.
As you work, organize and prepare this file according to part (b) of Lab 3.
(c) Python exercises:

(1) Implement the function test_number that takes as input a number
and a string (one of 'even', 'odd', 'positive',
or 'negative').  The function returns True if the number has the
property indicated by the string, and False if it doesn't.  See the assertions 
below for examples.
assert test_number(14, 'even')
assert not test_number(100, 'odd')
assert test_number(33, 'positive')
assert not test_number(100, 'negative')




(2)
Implement the function display that takes no parameters. It prompts the user to enter any word or phrase and then prints out every character in that phrase, one per line.
User input is indicated in bold face.
>>> display()
Enter a word: Anteater
A
n
t
e
a
t
e
r

(3)
Implement a function square_list that takes a list of integers and prints out each integer squared.
>>> square_list([2, 3, 4, 10])
4
9
16
100


(4)
Implement the function match_first_letter that takes a one-character string and a list of strings and prints all the strings in the list that start with the specified character.

>>> match_first_letter('I', [‘Iron Man’, ‘Iron Man 2’, ‘The Avengers’, ‘Superman’, ‘I am Legend’])
Iron Man
Iron Man 2
I am Legend



(5)
Implement the function match_area_code that takes as a list of telephone area codes (three-digit strings) and a list of phone numbers in the form shown below.  The function will print the phone numbers whose area code is on the list of area codes.

>>> match_area_code(['949', '714'], ['(714)824-1234', '(419)312-8732', '(949)555-1234'])
(714)824-1234
(949)555-1234

(6) Copy your match_area_code function and name the copy matching_area_codes.
Now modify your new function so that instead of printing out the matching phone numbers,
it returns a list of the matching numbers. Follow the pattern of accumuating a result that we've seen in class.



(d.1) Write a function called is_vowel that takes a
  
one-character-long string and returns True if that character is a vowel and False otherwise. [A vowel, for our purposes here, is one of the letters a, e, i, o, or u (lower case or upper case).] You can do the central part of this task using the in operator and a string containing the vowels; your task here is to package this up into a function that returns a boolean value. [Please check that the function name is capitalized precisely as shown above; it helps your TA in the grading.]
Your function definition should follow the "design recipe" pattern we've described before. You should do all of this before you write the code for the body of the function.
  And we expect you to do this for every function you write from now on. If you ask a TA or tutor for help and you haven't done it, they'll just send you back to do it. (Of course, if you have questions about how to do this, they'll be glad to help.)
[Novice programmers are often tempted to code the body of this task as 
if ... :  
    return True
else:
    return False
But this is rather clumsy and redundant, because the boolean expression itself (the "..." above)
  has exactly the value you want to return; you should just say return ... and be done.
Take a minute to re-read this and understand it fully. ]
Finally, run your code (including the tests) to make sure the tests all pass.  This is the pattern you will follow for every function you design and code.
(d.2) Write a function called print_nonvowels that takes a string and prints out all the characters in the string that are not vowels. Use your is_vowel function (and one of the logical/boolean operators).  (Note that this function prints its result rather than returning it.  Whenever you define a function, the first thing to determine is whether the result should be returned or printed. When in doubt, return the value and let the program that called the function decide what to do with it. For class purposes, we'll typically just tell you which to do, as we did here.)  

Write some tests (also involving print statements), enough so that if they pass, you're convinced that your function works correctly. And run the tests, of course.
(d.3) Write a function called nonvowels that takes a string and returns a string ICS 31 • DAVID G. KAY • UC IRVINE • WINTER 2015
Lab Assignment 5 

This assignment is due at the end of lab on Friday, November 7.
Preparation (Do this part individually, before coming to lab)
(1) If you're planning to use your own computer for some of your lab work, download the complete first version of the restaurants program, save it on your computer, and run it to make sure it works in your environment. You don't want to waste lab time on this.
(2 for Zyante) Read  sections 4.1 through 4.3; some of this is material we've already seen. 
(2 for Perkovic) Read  section 4.1 in the textbook; some of this is material we've already seen.
(3) String manipulation isn't conceptually hard, but it requires meticulous attention to detail, so it's particularly important that you try the practice problems. At www.pythontutor.com you can run simple Python code and see the values change in memory; this is a helpful tool, but use it to check the work you do by hand. It's tempting just to copy in the code, watch it work, and then copy down the answer, but that totally defeats the purpose; learning happens when you do the problems, not when you see the answer.


If you run into trouble, check with your TA right away.
(4) Read the rest of the assignment so you can come to the lab on Monday prepared to start work.
 
Lab Work (Do this part with your partner in lab)
(a) Choose a partner for this assignment and make sure the TA knows who your partner is. Remember that you'll choose a different partner for each lab assignment, so you'll work with this partner only this week. Make sure you know your partner's name (first and last) and contact information (Email or cellphone or whatever) in case one of you can't make it to lab.
(b) Prepare your lab5.py file as in previous labs, including a line like this: 

#  Paula Programmer 11223344 and Andrew Anteater 44332211.  ICS 31 Lab sec 7.  Lab asst 5.

(c) Let's define a Dish (that might be served at a restaurant) with three fields: a string for the name of the dish, a number for its price, and  a number for the number of calories in the dish. 
As you write the functions in this problem (and every problem), it's essential that you follow the design recipe, especially specifying the types of the parameters and return values. You'll need to distinguish between functions that take single items and functions that take lists of items, for example; you'll run into trouble if you're not clear on that to start with. Writing examples (in the form of assert statments) is similarly essential.
(c.1) Define a namedtuple for representing dishes like this and create three actual Dish objects (just make up the values for each Dish and assign them to variables named d1, d2, and d3).
(c.2) Write a function called Dish_str that takes a Dish and returns a string in this form:
Paht Woon Sen ($9.50): 330 cal
(You don't have to format the dollar amount perfectly at this point.)
(c.3) Write a function called Dish_same that takes two dishes as arguments and returns True if the names of the two dishes and their calorie counts are equal (and False otherwise). 
Write some tests using assert statements (perhaps including d1, d2, and d3); they should include calls with two identical dishes, two dishes that are the same except for their price, and two dishes that differ in their names, calorie counts, or both. Of course your tests should be included in your lab5.py file, and of course you should have tests like this for every function you write, except maybe the ones that print instead of returning a value. Coming up with thorough tests is another programming skill. Some people enjoy trying to "break" software; they become software quality assurance (testing) experts.
(c.4) Write a function called Dish_change_price that takes a Dish and a number and returns a Dish that's the same as the parameter except that its price is changed as follows:  The number (positive or negative) represents a percentage change in price (so that 100 would double the price and –50 would cut it in half). (This  may require you to think a little about the arithmetic you need to compute this result. Figure it out before you write any code; come up with a half-dozen different examples and their results.)
(c.5) Write a function called Dish_is_cheap that takes a Dish and a number and returns True if the Dish's price is less than that number (and False otherwise).
(c.6) Now create a list called DL of at least five Dish objects. Play around with this list in the shell for a minute or two (take its length, sort it, append another Dish to the end) to make sure it works as you expect. Next create another list called DL2 that contains at least four dish objects. Then create one big list by extending DL with DL2. (Note the difference between the append() method and the extend() method; take a minute to be sure.)
Write a function called Dishlist_display that takes a list of Dishes and returns one large string consisting of the string representation of each dish followed by a newline ('\n') character. We've done something similar to this with a collection of restaurants. Write some tests, as usual. Then use a print statement to print the string representation of all the dishes in the big list you created above.
(c.7) Write a function called Dishlist_all_cheap that takes a list of Dishes (note how this is different from Dish_is_cheap) and a number and returns True if the price of every dish on the list is less than that number. Of course Dishlist_all_cheap will call Dish_is_cheap;  solutions that duplicate the code instead of using an already-defined function would receive little credit.
(c.8) Write a  function called Dishlist_change_price that takes a list of Dishes and a number representing a percentage change and returns a list of Dishes with each price  changed by the specified amount. (Since lists are mutable, ask yourself how you'd write this differently if the specification were to change the list itself  rather than returning a new list with changed prices.)
(c.9) Write a function called Dishlist_prices that takes a list of Dishes and returns a list of numbers containing just the prices of the dishes on that list.
(c.10)  Write a function called Dishlist_average that takes a list of Dishes and returns the average price of those dishes. (Again, call previously defined functions wherever possible; don't reinvent the wheel.)
(c.11) Write a function called Dishlist_keep_cheap that takes a list of Dishes and a number and returns a list of those dishes on the original list that have prices less than that number. This is much like keeping the consonants in a string.
(c.12) Create a list of at least 25 Dishes. Just make them up, but for this part it's perfectly fine to trade dishes with  classmates other than your partner. Just check that the dishes you receive are correctly formed.
Write a function called before_and_after that takes no parameters. It prompts the user for interactive input of a number representing a percentage change in prices; then it prints the result of Dishlist_display on your big list of Dishes; then it changes all the prices of the Dishes on the big list; then it prints the result of Dishlist_display again (reflecting the changed list of Dishes).
(d) Copy the complete first version of the restaurants program to your lab machine (see the link above). Call it restaurantsd.py (because this is for part (d) of the assignment); you'll turn this file in separately, along with your lab5.py file. Run the code to make sure you've installed it correctly.
Now, try the  tasks described below with this advice in mind: When you modify large, unfamiliar programs, you want to be especially careful (i) to make and test only small changes, one by one, testing each change as you go, (ii) to make your changes deliberately, with high confidence that they will work as intended, rather than just changing things haphazardly and hoping they'll work, and (iii) make each small set of changes on a new copy of the code, so if you have to "roll back" those changes you won't have far back to go because you'll have a copy of your most recent, stable version. It's easy to lose your way when navICS 31/32/33 TA Guide
[To read this most easily, make your browser window narrow.]
In a research university, TAs provide some of the closest attention students receive early in their careers. TAs have a great opportunity to shape students' experiences (positively or negatively). We hope this guide will help you and we welcome suggestions for improvement. Note that details vary from course to course and from instructor to instructor, so consult the instructor of your course for definitive information. [You may find this most readable in a narrow browser window.]
Before the quarter startsIf you don't have one already, obtain a UCInet ID and also an ICS Lab Account for access to networks and campus services.Take a look around these web services we'll be using:EEE, UCI's Electronic Educational Environment, which we'll use for recording scores, getting rosters, administering online quizzes, handling pair programming partner evaluations (eee.uci.edu)Checkmate, ICS's system for students to submit solutions to assignments (checkmate.ics.uci.edu)Piazza, where students can get their course-related questions answered quickly (piazza.com)UCI Replay, where recordings of each class meeting (audio plus screen capture) will be posted (with about 90% reliability) (replay.uci.edu)Pythontutor.com, which gives illustrated traces of Python program executioncodingbat.com, which provides online programming exercises
    You should locate these materials on the web or on paper:Course syllabus/reference sheetCourse reference sheet, including course outline, policies, and due dates. This is available on the Web through eee.uci.edu or from the instructor's home page.ICS academic honesty policy and any policies specific to the instructor of the course
      Course assignments page (typically linked from the syllabus on line)Textbooks are (or soon will be) available for TAs to check out from  Lumen Hwang in the ICS Student Affairs office.
    Read these documents thoroughly; they state policies your students (and you) are bound by.
  During the first week and first lab(s)Check your electronic mail frequently. We will announce meetings, schedule changes, new policies, and so on; your students will suffer if you don't have the up-do-date information. Get into this habit now, and keep it throughout the quarter.Mark your calendar for the afternoons and evenings following the midterm(s) and final exam. We will get together and do all the grading of all the exams and recording the scores at that single time; things go fastest and most smoothly that way. TAs and the instructor will meet again the day after the final exam to set the final grades. Every TA must do his or her part for this process to run smoothly. In particular, this means that all of your labs must be graded and recorded in the EEE GradeBook the day before the final exam. Since you know this now, please arrange your own exam studying and travel schedule to accommodate these constraints.TAs should take attendance in lab for the first week or two. If someone enrolled doesn't show up to either of the first two section meetings, we may require them to drop to make room for others; thus we must have accurate records of who was there.  You can get a roster from EEE. If students add the course late, keep a record of when they added (so we don't penalize them for not doing quizzes and partner evaluations from before they enrolled).Your students need to create accounts to get access to the ICS lab machines, but they don't have to do it immediately. For a week or two, they can log in as ics-temp with the password Anteat3r . On their own time, they should go to the third-floor lab and sign up for an ICS account.Consider setting office hours. With six scheduled lab hours a week, students can see you regularly. But sometimes students can use five or ten minutes of one-on-one explanation. The conventional way to provide this is by scheduling some office hours; a difficulty with that approach is that sometimes nobody will show up to a scheduled hour and some students will have conflicts with whatever hours you schedule. It's fine to make the gesture by scheduling an hour or two, but these days it's equally fine not to schedule hours in advance and instead to make it clear repeatedly to the class that you will be glad to consult with them one-on-one; they just need to ask you and you'll work out a mutually agreeable time. Experience shows that the latter approach consumes less of your time in total. You can devote some of the time you save to answering questions on Piazza.Look at the photo roster of your students (under WebRosters on EEE) so you can learn their names. You should learn names not only because students will learn better if they know you know them by name, but also because you'll be able to identify any non-students who try to come and take an exam in a real student's place. Check that they've completed the demographic questionnaire at EEE and nag them until they comply. (We have yet to work out a mechanism for separating your sections' students from the group.)Keep track of the partnerships on each lab assignment.  Print a roster for each section from EEE and use it to keep track of who's partnered with whom.  Students are told on the assignment to let their TA know who their partner is.  Students must choose a different partner for each lab assignment; they may not repeat partners during the quarter.  That's one reason you need to keep track.  Most students should pick their partners for the next week's lab at the end of Friday's lab.  Any stragglers can partner up on Monday.  If there's one odd student, that student can join an existing pair (but only once during the quarter) or can work alone (also only once).  But if another odd student shows up, the third person or solo worker should join the latecomer to form a pair.It's generally best for students of similar experience and ability to be partners; that makes the give and take more even.  However, it's hard to measure ability and experience levels and the pairings will never be perfect.  Here's a technique to try early in the quarter:  Have all the students stand up and form a rough line, with more experienced students on one end of the room and less experienced students on the other.  The ordering doesn't have to be perfect, but you can suggest that they choose a partner from the people who are nearby.Students will complete partner evaluations at the end of each lab, using a survey at EEE.  You can view these results, at least to scan the comments.
  
  At every lab sessionBe on time. Students depend on having you there at the scheduled time. And don't cut out early.Be prepared to answer students' questions. Presumably you already know the subject matter, but you must also know the assignments. The only way to do that effectively is to read them carefully in advance and, where possible, try to work them out. If a student asks whether something is important or required, you want to be certain that you're giving the right answer (and check with the instructor if there's a question that the assignment writeup doesn't answer clearly): If you give a wrong answer on something like this, the student may be graded down, and that's not a happy situation. Don't guess about assignment requirements; if you're not sure, check with the instructor (or post on Piazza) before giving the student a definitive answer.Make yourself available to the students: Even if the students all seem busy, don't read your own e-mail, don't IM your friends, don't make cellphone calls, don't do your own classwork, because students will hesitate to interrupt you. When you're in the lab, you should circulate around and help students, not simply wait for them to call on you. Don't get so deeply involved in conversations that you don't notice when students need help; you should cruise around the room at least once every five minutes. Whenever you're in the instructional lab, you should be prepared to answer students' questions courteously, even if you aren't officially on duty at that time. It's unfriendly to tell a student, "I'm not even supposed to be here now," even if it's technically true. If you need to do your own work on lab machines, you may be able to work with fewer interruptions in the Open Lab (ICS 364).Spread yourself around to everyone rather than concentrating on just a few. If many people want you at once, leave the current person with a task to do independently while you make the rounds. Make sure each student gets at least "first aid" help so they can get back to work; after that, feel free to spend more in-depth time with students who need it. We don't want students to be able to say, "We couldn't get anything done in lab because we had to wait an hour to talk to the TA." (Avoid even joking about things like only paying attention to the cutest students; some people won't take it as a joke.)Give students help, not answers. It's fine to tell people how to solve system-related problems, or how language features work, but you should lead them to their own solutions of programming and CS problems. They shouldn't become dependent on you; they should learn how to use the web for reference, extra print statements, and execution traces for themselves. Be pleasant but ruthless about this. Students will beg you for a quick-fix answer, and it's easier for you just to give it than to point them towards finding the solution themselves. Nonetheless, resist the temptation, because students will come to expect you to fix their problems for them. In the long run, that hurts both them and you. Your class may expect students to use a "design recipe," writing out a function signature (input types and return type), purpose statement (docstring comment), and examples (in the executable form of assert statements) before they write any code; if so, insist on seeing these steps.Encourage students to follow pair programming for assignments that require it: two people, one computer, one driver, one navigator, switch roles regularly. Make sure the partners are talking and changing roles, and that the less experienced students don't just sit quietly and watch. If they don't get into this pattern right at the start, it will be much harder to get them to do it later. If you see a pair member who seems disengaged, that's a cue that you can intervene to provide some help.Keep track of who's partnered with whom. Every week, keep a list of who's working with whom. They're required to have a different partner every week and your lists are the way we have to enforce that. It also helps when the person submitting the assignment to Checkmate forgets to include his or her partner's name.Keep an eye out for academic dishonesty. Pair programming does not mean that it's okay to get answers from anyone or anywhere. Students may freely communicate with their partner, with the lab tutors, with their TA, and with the instructor. Students may also post questions on Piazza.com, though their posting should not include significant portions of lab assignment solution code. Communication with others (non-partner classmates and outsiders) is limited to questions about language features and system setup. This quarter, we'll be a little more relaxed about cross-communication in the first three weeks (for the first three lab assignments); we won't worry much about students getting help from each other as they get up to speed. But starting with week 4, the official guidelines are in effect.Help students solve problems using what they already know. Especially in Python, there may be some advanced language feature or library function that solves the problem in a snap. But the goal is to promote their abilities with the basic features covered in class and the textbook. Covering advanced features too soon places too great a cognitive burden on the students.Find out what the students are supposed to know. To help students use what they already know (or are supposed to have learned), you have to know what that is. Most instructors have published course notes or a schedule keyed to a textbook; it's part of your job to keep up with these so you don't inadvertently tell the students something they're not ready for. A key principle of teaching introductory programming is that you can't teach everything all at once—you have to leave some things out or cover them later. It's the instructor who gets to decide what the schedule is, and the TAs and tutors need to be aware of those decisions and support them.Don't feel guilty if you can't immediately identify the student's problem or bug. While most of us can see bugs quickly for the early, trivial assignments, that may lead students to expect (unrealistically) that we'll always be able to find and fix their problems at a glance. Of course nobody can do that for significant programs, and TAs need to make this clear to students, by explaining it and by encouraging them to find their own bugs by adding unit tests, test cases, extra print statements, and tracing their code—whichever methods your instructor has taught them. (You may have to show some students how to do this step by step the first time; not everybody knows how to debug instinctively.) If a student objects to the painstaking work involved in such tracing, remind them that they can minimize the need for it by spending more time in the design phase.  Some novice students program "expressionistically," just putting down code that "feels right"; they need to learn more systematic design.Remind students to prepare for lab by reading and thinking about the assignment beforehand; they should be ready to work when they sit down with their partner.Encourage students to post course-related questions on Piazza if you can't answer the question in person. With luck, they might get an answer before the lab session is over.Maintain decorum in the lab: Don't shout across the room to someone (or let students do so); gently calm down students who get too rowdy or frustrated. Have students using sound-producing software keep the volume low or off.Last one out, lock the door. If your lab section is the last one in the evening, be sure to pull the door closed after the last student has left. This activates the alarm.This hasn't happened for years, but if problems arise with a student, try to deal with it calmly yourself, and if that doesn't work, contact the lab manager or the instructor. In extreme cases, call the campus police (this has never been necessary in the past, though). If you suspect cheating or other major infractions of University rules, contact the instructor directly with as much hard evidence as you can; you should not attempt to handle academic dishonesty issues yourself.
  Periodically during the quarterTAs will attend weekly meetings where we can compare notes on how things are going.Check your electronic mail at least once daily. Good communication is essential, with the instructor and with your students. Respond to every message in a timely way, within a day under normal circumstances. The response might be, "I'll send you a full answer later," or it might be, "This would be better to discuss in person than over e-mail." But at least send some response promptly. Official course announcements come by Email, too; they are archived at EEE.Check Piazza.com periodically. Feel free to answer questions on Piazza.com as an instructor. But keep these points in mind:
      The whole class will read your response, including students in other TAs' sections. Other TAs may have slightly different grading criteria than you do, or may have resolved certain minor requirements differently than you did. So if you suspect there may be variation, say in your posting "This is for students in my sections; check with your own TA for your section's requirements." Piazza makes it easy for other TAs to add to your response and say "This applies to my section, too" or "I want students in my section to do it this way." [Remember that the class is graded separately by TA, so your students aren't compared directly with other TAs' students.]Your response will be read by students who are less far along than the questioner (and those who are farther along).  Be careful that your specific answer doesn't create more confusion among other students; qualify your answer so that it applies to the specificICS 31 & CSE 41 • FALL 2013 • DONALD BREN SCHOOL OF INFORMATION AND COMPUTER SCIENCES • UC IRVINE
ICS 31: Introduction to Programming
COURSE REFERENCE

Instructor:  David G. Kay,
5056 Donald Bren Hall (DBH) (kay@uci.edu)
Quick links:
 Assignments 
 Quizzes 
   
 Piazza (Q&A) Textbook home page
 Resources


  Course goals:  This course is the first
    of a three-quarter sequence introducing computer science through computer programming. This course will
 broaden your technical horizons, focus on systematic problem solving, and possibly change the way you look at the world. We welcome you and we hope you enjoy it.

  Prerequisite concepts:  This course
    does not expect any previous experience in computer science or computer
    programming.  If you do have some experience, you will find some topics
familiar but many others will certainly be new to you.

We do expect each student to be able to navigate
the Windows  systems in our labs, to navigate the World-Wide Web, to download
and read documents in Adobe Acrobat (pdf) format, and to read and send electronic
mail.  Some of our assignments will require these skills.  If you need to
pick these skills up or sharpen them, do it in the first week of the quarter;
speak with us if you need a hand.

Meeting place and times:  Tuesdays and Thursdays, lecture section A meets 8:00 a.m. to 9:20 a.m., lecture section B meets 11:00 a.m. to 12:20 p.m., both in Engineering Lecture Hall 100. 
Lab sections, TAs, and tutors: Each student must enroll in one of these lab sections:

LabTimeRoomTA (Email  @uci.edu)Tutor(s) (subject to change)1MWF8–9:50amICS 183Namrata Puri (nspuri)Jeremy Stroman (MF), Ada Guan (W)2MWF8–9:50amICS 189Mehryar Rahmatian (mrahmati)Govind Rai (MW), Jessica Pham (F)3MWF10–11:50ICS 183Rohan Achar (rachar)Woo Sang Hwang, Joelin Chen (10-11), Jiamin Huang (W 11-12)4MWF10–11:50ICS 189Mehryar Rahmatian (mrahmati)Ziqiang Peng, Iris Zeng (10-11)5MWF12–1:50ICS 183Sivabalan Thirunavukkarasu (sthiruna)Jiayi Shen, Jeremy Rice6MWF12–1:50ICS 189Robert Lim (roblim1)Marwan Nazanda, Woo Sang Hwang (12-1)7MWF2–3:50ICS 183Robert Lim (roblim1)Daniel Niemeyer, Alissa Nashida8MWF2–3:50ICS 189
      Rohan Achar (rachar)
    Jessica Pham, John Torres (MW)9MWF4–5:50ICS 183Kaiser Md. Nahiduzzaman (kmdnahid)Jiamin Huang (MF, W 4-5), Ryan Santos (MF, W 4-5)10MWF4–5:50ICS 189Namrata Puri (nspuri)Iris Zeng (4-5), Van Nguyen (M), Jeremy Stroman (F 5-6)11MWF6–7:50pmICS 192Kaiser Md. Nahiduzzaman (kmdnahid)Ran Liu, Vincent Chau12MWF11–12:50ICS 192Negar Aref (naref)Tony Ear, Victor Hsiao13MWF8–9:50amICS 364Sivabalan Thirunavukkarasu (sthiruna)Van Nguyen14MWF8–9:50amICS 192Negar Aref (naref)Bradley Cruce


None of the six scheduled lab hours each week are optional. It is essential that you attend the lecture and lab you're officially enrolled in; the class is too full to accommodate "visiting." Most of your lab work will be done in pairs,
  so the scheduled lab times are the best times to
work with your partner. Because the labs are mostly full, if you want to change your enrollment from one lab section to another, you need to find a person who wants to make the opposite change and the two of you must go in person to the ICS Student Affairs Office as soon as possible, but definitely before the end of the second week.

Office hours:  You are welcome to drop by my office at any time.  If I'm there and not immersed in something
    else, I'll be glad to chat about the course material or other topics.
    I will definitely be in or near my office during these scheduled hours,
    during which course-related matters will have first priority:  Tuesdays from 12:30 to 1:15 and Wednesdays from 11:30 to 12:20. I may adjust these times at the end of the first week. Of course emergencies
    may come up, but I will try to give advance notice of any change. I'll
    also be happy to make arrangements for other times during the week; "making an appointment" is no big deal (but if you make one, don't skip it  without getting in touch).  The
    quickest and most effective way to reach me is by electronic mail, as described
below.

Questions and announcements:  You can
 get a response to your course-related questions most quickly by posting them at Piazza.com.  If you
need to reach one of us privately, use our individual IDs listed above. I will never intentionally ignore a message, so if you don't receive a response, write again; sometimes overactive spam filters snag a legitmate message. Using course-specific subject lines and your UCInet Email address will help your messages get noticed.

  We will also send course announcements by Email
    to the official course mailing list, so you should check your Email daily.
    Note that this mailing list goes to the Email address that the registrar
    has for you (your UCInet ID).    If you prefer to read your Email
  on another account, forwarding instructions appear below. Don't let this slide; if you miss official
announcements, your grade could suffer.

This course's web page is at http://www.ics.uci.edu/~kay/courses/31 and 
official course Email is archived at eee.uci.edu; follow the link on your MyEEE page.

Textbooks and software: Our textbook is Introduction to Computing Using Python: An Application Development Focus,
by Ljubomir Perkovic. We will follow the text pretty closely, though we will cover some topics in class that aren't in the book. The text has a web site that includes downloadable versions of the programs in the book. To work around delays in delivering the physical books, three chapters are available for electronic download via the Dropbox tool at eee.uci.edu.
The Python software you need for your work (Python 3.3 and the IDLE environment) is installed on every machine in the ICS labs. Because every lab assignment is done with a partner, you'll do much of your work in the scheduled labs. You are also welcome to install Python on your personal machine; we just have to say that because everyone's computer is configured a little differently, we can't promise to fix the installation problems that may come up on your own machine. At http://www.ics.uci.edu/~kay/courses/31/refs.html
  is a list of supplementary resources on course topics, including information about installing Python.


  Labs and lab hours: Of course you will
    need to do some of your work outside of the scheduled Monday/Wednesday/Friday
    lab hours.  Students in ICS 31 may use any of the school's instructional
    computing labs except for times when another course is scheduled in the
  lab exclusively.  See http://www.ics.uci.edu/~lab
  for lab hours and other information.   Note in particular that all ICS labs
are closed on university holidays, such as the Friday after Thanksgiving
(but not the Saturday and Sunday).

Please remember that programming tasks always
take longer to complete than you think they will, no matter how much experience
you have.  You must account for this as you plan your time; we cannot accept
busy schedules or time mismanagement as an excuse for late or incomplete
assignments.

Course structure:
• Weekly  lab assignments (30% of the course grade). All the assignments
will be available at http://www.ics.uci.edu/~kay/courses/31/hw/.

• Class participation:  Based primarily on participating consistently
and effectively in the lab, including turning in a partner evaluation for each lab assignment. Contributing on Piazza.com can help your score here, too. (10%)
• Weekly quizzes: Given on line through EEE, available from Sunday afternoon through 11:00 p.m. Tuesday.
(10% together) Because these are self-graded, you get credit for completing them, whatever your answers. We can't support make-ups for missed quizzes, since all you have to do is read them and submit answers each week on EEE. This is easy credit to get; just don't forget to do each quiz by Tuesday. (The foolish student will take advantage of self-grading to answer "Zot! Zot! Zot!" to every question, giving them no thought.  The wise student will take the time to work through the quizzes independently, recognizing that these are previews of exam questions and  an excellent way to prepare, review, and assess one's masUC Irvine • Information & Computer Science • David G.
Kay • Informatics 42 • Winter 2008

Review Questions for the Final Exam

These questions are representative of actual exam
questions; most of them have appeared on exams in the past.  But this isn't
actually a sample exam, since the number and distribution of questions doesn't
match an actual exam. This document includes more than one question of
the same type (so you have extra practice for some of the harder concepts). Also, of course, the actual exam may cover any topic from the course, even
if it's not represented here; some questions about the simulator program are possible, for example.  The overall form of the exam will look
more or less like last quarter's final (or the quizzes, though of course
longer).

         

1. We can find
analogies to the classic data structures in the literary world:

(a)  Some large dictionaries and encyclopedias
have thumb tabs for each letter, cut-outs in the edge of the volume so the
reader can turn directly to the first page of listings for that letter.
 Is this access to the beginning of each letter's listings more like
a stack, queue, array, tree, or linked list?

(b)  When cookbooks describe complicated recipes,
they break them into sub-recipes, much like procedures in a programming
language.  Thus, the recipe for a cake might say, "Use the chocolate
icing recipe on page 23," and that chocolate icing recipe might say
in turn, "See page 195 for instructions on melting chocolate."
 Which data structure would you use to represent the sequence of recipes
and sub-recipes being carried out at a given moment, to make it most convenient
to return to the "calling" recipe when each sub-recipe is completed:
 a stack, queue, array, tree, or linked list?

(c)  Is a book's table of contents, with
chapters, sections, and sub-sections, more like a stack, queue, array, tree,
or linked list?

(d)  Most newspapers run a new crossword puzzle
every day.  Below the puzzle it generally says, "Solution in tomorrow's
newspaper."  Is this sequence of puzzles and solutions more like a
stack, queue, array, tree, or linked list?

(e)  Some people are very rigid about reading
newspapers in chronological order; they won't read one day's newspaper
unless they've read all the previous days' papers, in order.  Even
if days or weeks go by when they don't have time to read the paper,
they'll save the papers, in order, and read them in order when time
permits.  Is this arrangement more like a stack, queue, array, tree, or
linked list?

2.  At right
is a binary tree.  In what order would its nodes be visited in a  
 

(a)  preorder traversal?      

(b)  postorder traversal?   

(c)  inorder traversal?      

(d)  breadth-first traversal?
     


3.  Draw the binary search tree that results from
inserting these items in this order:  31, 41, 59, 26, 53, 58, 62

4.  Consider
the following function:

int DoSomething (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomething(a-1,
b-1));  

}

(a)  What is returned by each of the following
statements?

   DoSomething(3, 1)

   DoSomething(6, 2)

   DoSomething(29, 5)

   DoSomething(25000, 23000)

(b)  In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.


(c)  Give the recurrence relation that corresponds
to the code shown above, counting each arithmetic operations (addition,
subtraction, multiplication, and division):

      D0 = 

   Dn = 

(d)  Now look at this function:

int DoSomethingElse (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomethingElse(a,
b-1) - 1);  

}

(d.1)  Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.

(d.2)  Which of these routines are tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate which specific
operation in its code makes it non-tail-recursive.


5.  Below is the state transition diagram for an FSA.
 This machine reads a whole word at a time (rather than a character at a
time, as we did in class).







(a)  For each of the following strings, circle ACCEPT
if the FSA above accepts the string and REJECT if it
does not:

   ACCEPT      REJECT  
Jill eats tantrums

   ACCEPT      REJECT   Joe eats loud
big bad big big apples

   ACCEPT      REJECT   Joe throws apples

   ACCEPT      REJECT   Jill eats

   ACCEPT      REJECT   Joe throws loud
loud tantrums

   ACCEPT      REJECT   Jill throws Joe

   


(b)  Draw a transition table for the FSA shown above.
 You may leave transitions to the error state blank rather than writing
in "ERROR."

    Jill   Joe   throws   eats 
 big   bad   loud   tantrums   apples   OTHER

S1_______________________________________________________________________

S2_______________________________________________________________________

S3_______________________________________________________________________

S4_______________________________________________________________________


(c)  Modify the FSA diagram above so that Jane may
also occur anywhere Joe or Jill may occur (in the language accepted by the
FSA).


(d)  Draw a new FSA that accepts the language containing
the following six sentences (and no others):

Joe likes plums      Joe likes big plums
  Joe likes very big plums

   Joe eats plums      Joe eats big plums   Joe
eats very big plums


6.   Below is the state transition diagram for an
FSA.







(a)  Give three examples of strings that the machine
described above accepts.


(b)  Give three examples of strings (using the same
alphabet) that the machine described above rejects.


(c)  In one brief English sentence, describe the language
that this machine implements.


(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.


(e)  Modify the FSA diagram above so that it accepts
the language a*(bc)a*
(that is, any string of zero or more 'a's,
followed by a b
or a c,
followed by zero or more 'a's).
 You may draw your answer on the printed diagram.


(f)  Draw a state transition table below that reflects
the new machine described above in part (e).   


7.  One way to represent transitions in a finite-state
machine is in a transition table; the entries in the table show the machine's
next state, given its current state and a particular input.  The
table at left below implements the machine shown at right below.






(a)  Give four examples of strings that the machine
described above accepts.


(b)  Give four examples of strings (using the same
alphabet) that the machine described above rejects.


(c)  In one brief English sentence, describe the language
that this machine implements.


(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.
 


(e)  Modify the FSA diagram above so that it accepts
the language (a*bc)*
(that is, any string of zero or more parts, where each part contains any
number of 'a's
followed by a 'b'
and a 'c').


(f)  Modify the transition table above to reflect
the new machine described in part (e).


8.  Below is a finite-state machine that accepts telephone
numbers ('digit' means any decimal digit, 0-9):

http://www.ics.uci.edu/~kay/courses/i42/phonenumber.jpg

(a)  Draw the state transition table for this FSA.
 You may leave blank any unspecified transitions; you may omit the error
state.  We have supplied horizontal lines; you will supply the vertical
lines and everything else.  (Hint:  Don't treat all digits the same.)

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________


(b)  Following the approach shown in class, which
of the statements shown below could be part of a program to implement an
FSA with a transition table?  Circle the one best answer.

   A.   Table[state][token]
= state;

   B.   state
= (Table[state][token])++;

   C.   Table[state][token]
= Table[state++][token]; 

   D.   (Table[state][token])++;

   E.   state
= Table[state][token];

   F.   token
= Table[state][token];

Below is a BNF grammar that also describes telephone
numbers:

   <phone number>  
::=   <local number> | <area
code> <local number>

   <area code>      ::=   1
( <digit> <digit>
<digit> ) 

   <local number>
  ::=   <exchange> <hyphen> <number>

   <exchange>      ::=   <digit> <digit>
<digit>

   <hyphen>       ::=   -

   <number>
     ::=   <digit> <digit> <digit> <digit>

   <digit>      ::=   0
| 1 | 2 | 3 | 4 | 5 | 6 | 7
| 8 | 9 

(c) Unfortunately, the BNF grammar and the FSA (reproduced
again below for convenience) do not both specify the same "language."
 For each string listed below, 

* circle VALID
IN BNF or
INVALID IN BNF to indicate
which strings can be generated from <phone number> in the grammar
given above, and

* circle
ACCEPTED BY FSA or
REJECTED BY FSA to indicate
which strings would be accepted by the FSA.

VALID IN BNF   INVALID
IN BNF   824-5072
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   123-4567
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   411
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   2-9-7689
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   (310)825-2695
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   1(000)000-0000
  ACCEPTED BY FSA   REJECTED
BY FSA

http://www.ics.uci.edu/~kay/courses/i42/phonenumber.jpg

(d)  Modify the FSA (by drawing on the diagram above)
so that it accepts exactly the same phone numbers as the BNF grammar accepts.

9.  Suppose you have a conventional stack with operations
push, pop, and top. 

(a) What is printed by the following sequence of operations?

push(5); push(4); print(top()); push(7); push(12);
pop; print(top()); print(top()); pop(); 

(b) What are the contents of the stack at the end
of the sequence of operations?  Mark clearly the top and bottom of the stack.

10.  Give the recurrence relation that describes the
execution time of the second routine shown below, the Print
member function of the Collection
 class, counting println
statements.  Just give the recurrence; you don't have to solve it.

void Print() // member function of restaurant

{

   System.out.println("Name:
 "      + name);

   System.out.println("Cuisine:
 "   + cuisine);

   System.out.println("Phone:
 "     + phone);

   System.out.println("Best
dish:  " + dish);

   System.out.println("Price:
 "     + price);

}


void Print() // method0 of a restaurant
_collection_

{

   if (IsEmpty())          //
if this collection is empty,

      System.out.println();//
   print a newline.

   else 

   {                       //
else print the first restaurant

      First().Print();  
  //    in the collection

      Rest().Print();   
  // and then print the rest of the 

   }                       //
   collection (recursively)

}


11.  For each
of the following code segments, give the average-case run-time polynomial
and the O-notation.  Count each line that contains an assignment statement
(except those controlling for-loops), a procedure call, or an input/output
statement.

Example: 

System.out.println("This line is executed
only once.");

total = 0;

for ( i = 1; i <= n; i++ ) {

    int x = readAnInteger(); 
// count this line once

   total += x;

   if ( i % 2 == 0 )

      System.out.println(x);

}

System.out.print("Total:  ");

System.out.println(total);

System.out.println("The end.");

Example answer:  Runtime polynomial:  2 +
n (2 + 1/2) + 3, which is 2.5n + 5; O(n).

(a) 

for ( i = 1; i < n; i++ )

   for ( j = n; j >= 1; j-- )

      for ( k = 1; k <= n/2; k++
)

         Data[i,j,k] = i + j + k;

System.out.println("On the whole, I'd
rather be in Philadelphia.");


(b)

System.out.print("With more powerful
tools ");

System.out.print("comes the power to
screw up ");

System.out.println("in new and more
spectacular ways.");

int a = 1;

while (a <= n)

{

   DanceAJig( a );

   for ( i = 1; i <= n; i++ )

   {   if ( i % 2 == 0)

         {

            DanceAReel( a,
i );

            DanceAPasDeDeux(
a*i );

         }

       System.out.println("Swing
your partner to and fro");

   }

   a++;  // This counts as an assignment.

}

System.out.println("People time is
more expensive than computer time.");


(c)

System.out.println("Now, the Star-Belly
Sneetches had bellies with stars.");

System.out.println("The Plain-Belly
Sneetches had none upon thars.");

int a = 1;

while (a <= n)

{

   DoSomethingGood(a);

   for ( i = n; i >= 1; i-- )

   {   DoSomethingBad(a, i);

       HandleSomethingElse( a*i );

   }

   for ( i = 1; i <= 64000; i +=
2 )

   {   DoSomethingBad(a, i);

       HandleSomethingElse( a*i );

   }

   a *= 2;

}

System.out.println("Those stars weren't
so big.  They were really so small ");

System.out.println("You might think
such a thing wouldn't matter at all.");


(d)  Suppose that all three of the above program
segments were included in one function.  What would the O-notation of that
function be?


12.  (a) 
One way to implement a priority queue is in
a binary search tree ordered by priority value, where each node of the tree
(representing a distinct priority value) stores all the items with the same
priority, in a linked list ordered by "arrival time."  Shown is
a diagram of this approach, after the following [priority, item] pairs have
been enqueued:  [5,A]   [8,B]   [5,D]   [2,E]   [7,F]  [7, G].
 On the diagram above, draw the results
of enqueueing these items:  [8,K]  [2,M]  [3,P]

(b.1)  You are designing some web server software
that will handle thousands of requests for information from your web site.
 You decide that those requests should be prioritized-- perhaps system troubleshooting
receives top priority, full-rate-paying customers receive next priority,
discount customers receive lower priority, and guests receive the lowest.

You decide to use a priority queue for these
requests, and you consider three different data structures for implementing
it:

Structure I:  An unordered array where each
element contains a priority, the time the request arrived, and the other
information about a request; you also have an additional field that contains
the number of requests currently stored.

Structure II:  A binary search tree as described
above.  (You may assume that priority nodes never get deleted--they just
may have empty item lists after all items with that priority are dequeued.)

Structure III:  A linear linked list, completely
ordered (by priority, and for equal priorities by arrival time) so that
the correct item to dequeue is always at the front.

In the table below, fill in the O-notation
for the execution time of each specified operation on each alternative data
structure in the average case.  Assume that on average there are r
requests in the whole data structure, i different items that have
each different priority value, and p different priority values; use
whichever of these variables are appropriate in your answers.  Also assume
that each operation is implemented as efficiently as possible in Java (without
adding unspecified variables or otherwise changing the structureThis paper is also available in PostScript
or PDF (Acrobat)
format.





Key Words:  Curricular trends,
first-year courses, curriculum design, academic decision-making

Abstract

The field of computer science changes rapidly,
and this change occurs as well in the introductory curriculum.  Formerly
advanced topics filter down to the first year, and even to secondary school;
some topics disappear completely.  These changes are good--they indicate
a dynamic discipline and a still-emerging picture of the field's fundamental
principles.  But we must not let our revolutionary zeal blind us to the
pedagogical need and conceptual value of time-tested material.  Many topics
and approaches that are well understood and now unfashionable should retain
their place in the introductory curriculum, where they serve as intellectual
ballast, foundation, and motivation for the more current and trendier content.
 We argue here for balance:  that radical change be tempered by an appreciation
for the place of long-standing approaches and underlying fundamentals. 
Those advocating curricular change must articulate their educational goals
fully and consider explicitly what effect on those goals they expect the
change to have; they must not throw the baby out with the bathwater.


The Introductory Computer Science Curriculum Changes

The rapid development of computer science is by
now a cliché.  This rapidity occurs even in the introductory material;
in what other discipline does the entire approach and content of the first
course change so frequently?  We decide that some topics are less important
or unimportant, and new tools and technologies let us cover other topics
in less time than in the past.  This leaves room for more advanced material
to filter down to introductory courses, though we might equally say that
the advanced material often pushes its way earlier in the curriculum, sometimes
faster than we can make room for it.  The law of "Conservation of Curriculum"
still applies:  For any new material we add to the introductory curriculum,
some old material--that once we thought important enough to cover--must
give way.

Former fundamentals do fade:  Few of us teach
machine-level programming in introductory courses.  Few spend weeks drilling
on number-base conversions or teach circuit theory to novices.  Yet once
these topics were staples of introductory courses, regarded as fundamental
prerequisites to the high-level language programming and algorithm analysis
that most of us teach in the first course today.

We also decide to start our coverage at higher
abstraction levels.  We decide that some heretofore fundamental concepts
have become underlying details.  Historical perspective and maturing of
the discipline contribute to these changes, refining our view of what is
fundamental.  We decide that binary search trees are fundamentally illustrative
of certain concepts of algorithms and data organization, so they have made
their way into the standard first-year curriculum, but B-trees and 2-3 trees
typically remain in the realm of more advanced courses.  

Better (or more accessible) textbooks allow us
to cover more advanced material earlier:  Many alternatives now exist to
KnuthEndnotes
for data structures, Jensen & WirthEndnotes
for Pascal, and even Abelson & SussmanEndnotes
for programming, abstraction, and Scheme.  These early texts are justifiably
regarded as classics, but a proliferation of other books eases the migration
of their topics ever earlier in the curriculum.  Software tools as well
promote this migration:  "Student-oriented" compilers like WATFOR
and PL/C, syntax-directed editors like parenthesis-matchers for Lisp, and
program synthesizers like the CMU Pascal Genie all handle details and rough
edges, allowing the instructor to devote more time to new substance and
approaches.

As we add new material to our introductory courses,
though, how carefully do we consider what concepts and skills we now must
de-emphasize or omit?  Changes in introductory curricula are made too often
as a hasty attempt to jump on a current bandwagon, without thoughtful consideration
of pedagogical goals and the value of the topics being supplanted.  The
risk of short-changing meaningful deliberations may be greatest at research
universities, where faculty often receive little reward or respect for time
and attention paid to issues of introductory education.

Introductory Curricula Today Are Diverse

Great diversity exists in today's introductory
courses, on many different axes:  emphasis on mathematical formality vs.
production of actual programs, experience-oriented "closed" labs
vs. design-oriented "open" labs, breadth of computer science coverage
vs. depth of analysis (or of programming experience), analysis of existing
"case studies" vs. synthesis of new programs, direct applicability
in the real world vs. conceptual simplicity in the choice of programming
language.  This is all to the good; certainly we don't know any single
best way to teach introductory computer science, and the exploration of
new approaches is much to be encouraged.

But we must take great care that our enthusiasm
for novel approaches not lead us to omit something vital.  Going too far
towards the end of any of these scales implies the omission of other topics
and experiences, which may turn out to be equally fundamental.

Curricular Debate Often Generates More Heat Than Light

An obstacle to reasoned curriculum development
is the polarization that often arises between curricular innovators and
traditionalists.

Innovators often meet resistance to change.  Faced
with this resistance, one tends at times to overstate one's case, exaggerating
the harm of the status quo and demanding its complete reversal.  The introduction
of structured programming grew from a letter of Dijkstra'sEndnotes
into a raging controversy, with one camp regarding any use of a goto as
a mortal sin and the other resentful of any attempt to rein in their creative
freedom as programmers.  Even Knuth's moderating voice six years laterEndnotes
did not mark the end of the controversy.  We computer scientists are not
immune to the human foible of regarding our own approach as the one best
way and labeling as an idiot anyone who does not see things as we do.

A position stated in stark, extreme, revolutionary
terms is more likely to generate attention and interest--necessary prerequisites
to approval and funding--than one articulated with more balance or one that
embodies an evolutionary approach.  Sex, after all, sells, especially in
a discipline where true order-of-magnitude changes do occur with frequent
regularity.  An example of this tendency towards exaggeration is Dijkstra's
assertion that those who learn Basic as a first programming language are
irreparably harmed as programmers.  In fact, knowledge is dangerous only
when it is incomplete or incorrectly applied.  Many instructors assert that
they would rather have a complete novice than one who has programmed in
Basic, but if Basic programmers were weaned onto a more powerful and conceptually
stronger language after writing their first 25-line program, they would
be ahead of complete novices in understanding interactivity, imperative
programming and control flow, variables, the need for precise syntax, and
so on.  We do students a disservice by trying to protect them from "dangerous"
knowledge, especially when they have already been exposed to it independently
of us.

The pendulum of fashion swings as wildly in computer
science education as elsewhere.  PattisEndnotes,
for example, describes how the "procedures early" approach gathered
such momentum that many courses and texts eventually came to cover procedures
much earlier than a pedagogical justification for them existed.  He also
describes the pendulum's reversal, which should provide some hope that
equilibrium can eventually be attained, although the "procedures early"
slogan still persists in textbooks' titles, prefaces, and advertising.
 As scientists and educators we owe it to our students to exert whatever
moderation we can over our tendency to jump with both feet onto the newest,
most attractive bandwagon.

AsInformatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment B: Anteater Bed and Breakfast
This assignment is due at the end of lab on
Monday, February 6. 
Assignment summary: You will write a program to keep track
  of reservations at a small "bed and breakfast" hotel.

This assignment is divided into six required stages and optional
seventh stage. Each succeeding stage is built upon what you
have already written for the previous stage. We expect you to design,
write, and test this program according to these stages—first get the
first-stage program working, then modify it to satisfy the second
stage, and so on.  As always, be sure to keep a copy of each completed
stage. That way, if you decide you've gotten off on the wrong track
for a stage, you can start again easily from the end of the previous
stage, without the painstaking task of removing each addition.
You should make sure that each stage is entirely correct and working
perfectly before you go on to the next. As you complete each stage,
you must demonstrate briefly to your TA or tutor that it works
correctly before you go on to the following stage. 

What to turn in:
On Checkmate, a single Python file containing your last-stage code.
  
Grading: Your grade depends on organized development (did you design and debug each stage in sequence), completeness (does your program do everything the specification requires), correctness (does it produce the correct results), quality and clarity of your output, good modularity, good data organization (using data structures appropriately), and good programming style (are your identifier names descriptive, is your organization clea).
  
  You will receive appropriate partial credit for each stage you
  complete correctly. You will receive no credit for work on a later
  stage if the previous stages are incomplete or incorrect. The whole
  point of incremental development (i.e., stages) is to keep a
programmer from biting off more than he or she can chew.

Statement of the problem: UCI has just started a
  program in hotel and restaurant management; its dean has established
  a small "bed and breakfast" hotel as a lab for the program's
  students. The dean has asked you to write the reservations software
  for this new inn, which will be called the Anteater BandB.

Your program will keep track of the rooms available for rent (these
  vary, since sometimes a room is closed for redecoration) and the
  reservations that guests have made for these rooms.

When the full Anteater BandB system is completed, it may have a
  graphical user interface, but for now your program will be a batch
  program; this means that you will read all of your input from an
  external data file and produce output as described below.

You could easily convert this program to an interactive one with a
  fancy user interface, where the program presents the user with a
  menu of commands, accepts the user's selection, prompts the user for
  whatever additional information the command requires, and then
  displays the results of that command. We made this assignment a
  batch program for three reasons: First, it's extra work for you to
  write the menu- printing and input-prompting commands, some of which
  you have already done in other assignments. It's easier simply to
  assume that the data appears in the correct format in the input
  files. Second, it gives you practice learning how to read data from
  external text files. Third, testing your program will be much easier
  when you can create files of test data rather than typing in each
  test interactively every time.

The input for this program comes from a single file, which
  consists of an unlimited number of input command lines. We will
  describe the various commands below; for each stage, you will
implement (or modify) a few more commands
Stage I: For this stage, your program will keep
  track of the rooms that are available. This stage implements four
  commands, as described below. On each command line, the first two non-whitespace characters are the command, command letters may be upper or lower case.
NB(for "add a new bedroom") followed by
an integer room number (in the range 1–999). Add a new bedroom with
the specified room number.LB(for "list bedrooms").  Print a list of the bedrooms currently available.
The input file may contain any number of these commands in any order;
    each LB command prints a list of available bedrooms based on what
    has been added as of that point. See the sample output below for
    the format of the printed bedroom list. For this stage, it doesn't
    matter what order the bedrooms appear in.PL(for "print line"), followed by any text. Simply print (or "echo") a line,
copying the input (not counting the PL and leading whitespace) to the output. You'll find it useful in testing, and it's also a simple way to make the program's reports clearer or fancier.**Comment, followed by any text. Like comments in a
    program, comment lines don't have any effect on the program's
    behavior; they just serve as annotations in the command
    file. 
Below is a sample input file for this stage.
** This is a sample command file for the Anteater BandB, Stage I
PL ***********************************************************
** A well-written program works gracefully with empty lists.
Lb
PL ***********************************************************
** Now let's add a bedroom:
NB 101
LB
** And some more:
NB 104
** Extra blanks around the command should be ignored
nb    102
    NB 201
    Nb      203
 LB
PL Thank you for using the Anteater BandB Reservation System!
** That's the end of the sample data for Stage I.

From this input file, your program should produce the following
output:
***********************************************************
Here is a list of available bedrooms (before adding any!)
Number of bedrooms in service:  0
------------------------------------
***********************************************************
Number of bedrooms in service:  1
------------------------------------
101
Number of bedrooms in service:  5
------------------------------------
101
104
102
201
203
Thank you for using the Anteater BandB Reservation System!
Stage II: Each stage of this assignment will
  continue to handle all the commands of the previous stages, of
  course. For this stage, your program will handle deletions from the
  list of available bedrooms.
DB(for "delete bedroom"), followed by a bedroom number.
Delete the specified room from the list.  Print an error message if
    the specified room isn't on the list.
Here is some sample input for this stage:
** This is a sample command file for the Anteater BandB, Stage II
** First, add some bedrooms:
NB 301
nb 302
nb 303
** Now list what we have:
PL First list of available bedrooms:
LB
** Next, delete one:
DB 302
** And show the list reflecting the deletion:
PL List of available bedrooms after deleting one:
LB
** Try to delete a bedroom that doesn't exist, and get an error message.
DB 405
** Now add some more:
NB 302
NB 304
NB 305
PL List of available bedrooms:
LB
** We delete a bedroom ...
db   301
** ... we add another to the list.
NB 307
PL Another list, having deleted one and added another:
LB
PL Thank you for choosing the Anteater BandB Reservation System!
** That's the end of the sample data for Stage II.

For the above input, your program should produce the following output:
First list of available bedrooms:
Number of bedrooms in service:  3
------------------------------------
301
302
303
List of available bedrooms after deleting one:
Number of bedrooms in service:  2
------------------------------------
301
303
Sorry, can't delete room 405; it is not in service now
List of available bedrooms:
Number of bedrooms in service:  5
------------------------------------
304
305
301
302
303
Another list, having deleted one and added another:
Number of bedrooms in service:  5
------------------------------------
302
303
304
305
307
Thank you for choosing the Anteater BandB Reservation System!

Stage III: For this stage, your program will keep
  track of reservations for specific rooms on specific dates. The
  first new command for Informatics 42 • Winter 2012 • David G. Kay
  • UC Irvine
 Lab Assignment C
This assignment is due at the end of lab on
Friday, February 17. This is a pair programming assignment; do it with someone you haven't worked with yet this quarter and make sure Joel knows whom you've paired with.
The problem: The assignment, originally written by Alex Thornton, involves building an interpreter for a simple programing language like Basic; Alex calls his language Facile. This may seem a little infrastructural for us, but actually, it's not: Sometimes the right way to solve a problem is to make up a special-purpose language that makes it easy to express the various aspects of the problem (and then build an interpreter to process that language). Even the restaurants program is an anemic example of this; we have a "restaurant collection manipulation language" that consists of half a dozen single-letter commands. In a couple of weeks we'll talk a little more about the way computer scientists look at languages.
You have some advantages over the ICS 22 students who are doing this problem:  You're doing it with pair programming, rather than solo;  you've spent a week (last quarter) thinking about machine-level programming, so the concepts in this assignment will be familiar; and you're coding in Python, which is higher-level than Java (meaning that it does more of the work for you).
 Alex's introduction: When I was a kid, one of my teachers introduced me to a computer for the first time — a Radio Shack TRS-80 Model I (anybody remember it?). Immediately, I was interested. I played little math games and messed around with other "state of the art" educational tools from the early 1980's; as you might imagine, the state of the art wasn't much then, but it was fun.
Then one day, my teacher asked me if I wanted to learn how to write my own programs. I thought it sounded like a great idea. So I picked up a book about a language called BASIC — some of you may have played with it before — and typed in a short program that asked a user for a number of hits and a number of at-bats and printed out a batting average. (Believe it or not, my mother still has a printout of it, including the comment at the top: "My first program, by Alex Thornton." Yes, I commented my first program.) I ran the program, tried it out, and I was mesmerized; the computer did exactly what I asked it to, exactly the way I asked it to. And my lifelong obsession with what I would later know to be computer science began.
BASIC was a good teaching tool for its day: versatile and easy-to-learn. For this project, we've designed a simpler version of BASIC called Facile, which supports only eleven kinds of statements. You'll be building a Facile interpreter, to read and execute Facile programs.
The Facile language: We'll discuss the requirements for your interpreter later in the write-up. First, let's talk about the Facile language. A Facile program is a sequence of statements, one per line. Here's an example of a Facile program:
LET A 3
PRINT A
GOSUB 7
PRINT A
PRINT B
GOTO 10
LET A 4
LET B 6
RETURN
PRINT A
END
.
Each line contains exactly one statement (i.e., there may be no blank lines). Facile assigns a line number to each of the lines, where the first line of the program is numbered 1, the second line is numbered 2, and so on. The last line of the program is a period (.) on a line by itself. Execution of a Facile program always begins at line number 1. There is no predefined limit on the number of lines in a Facile program.
Variables: A Facile program has variables, each named by a sequence of characters that does not include whitespace. Each variable is capable of storing an integer value. The value of a variable may be assigned or changed with a LET statement. A LET statement changes the value of one variable. Some examples are:
LET A 3 — changes the value of the variable A to 3LET Z –9 — changes the value of the variable Z to –9
You can print the value of a variable to the console by using a PRINT statement. A PRINT statement prints the value of one variable, followed by a newline. So, consider the following short Facile program:
LET A 3
LET Z -9
PRINT A
PRINT Z
.
Its output would be:
3
-9

Execution of a Facile program: A Facile program is executed one line at a time, beginning at line number 1. Ordinarily, execution proceeds forward, so that line 1 will execute first, followed by line 2, followed by line 3, and so on. Execution continues until either an END statement is reached, or until it reaches the "." line that appears at the end of the program.
As in any programming language, it is possible in Facile to write programs that execute out of sequence, though the mechanisms are a bit more primitive than they are in a language like Python. A GOTO statement causes execution to "jump" immediately to the given number. For example, the statement GOTO 4 jumps execution to line 4. Here's an example Facile program that uses GOTO:
LET A 1
GOTO 4
LET A 2
PRINT A
.

In this program, line 1 is executed first, setting the variable A's value to 1. Then the GOTO statement will immediately jump execution of the program to line 4, skipping the second LET. Line 4 prints the value of A, which is 1. So, the output of the program is 1.
A GOTO statement may jump either forward or backward, meaning that the following program is a legal Facile program. See if you can figure out what its output would be.
LET Z 5
LET C 0
GOTO 8
LET C 4
PRINT C
PRINT Z
END
PRINT C
PRINT Z
GOTO 4
.
GOTO statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the "." that completes the program. If such a GOTO statement is encountered while a program is executed, the interpreter terminates with an error message.
Mathematical operations: Facile provides the typical mathematical operations that can be performed on variables: addition, subtraction, multiplication, and division. Each operation is provided as a statement that changes the value of the given variable. Here are examples of their use:
LET A 4
ADD A 3
PRINT A
LET B 5
SUB B 3
PRINT B
LET C 6
MULT C 7
PRINT C
LET D 7
DIV D 2
PRINT D
.

In the example above, the ADD statement adds 3 to the value of A, storing the result in A. So, printing A will display 7 on the console. The output of the program above is:
7
2
42
3

It is important to note that, since all variables in Facile are integers, the DIV statement implements integer division, meaning that its result is the floor (or integral part) of the quotient. So, in the example above, 7 / 2 = 3. [Note: Python has an integer division operator.] The second operand may not be zero, meaning that the statement DIV A 0 is illegal. When a Facile program encounters a division by zero, it immediately terminates with an error message.
The IF statement: Facile provides an IF statement, which acts like a conditional GOTO. It compares the value of some variable to some value, and jumps execution of the program to the given line number if the comparison is true. The comparison can use one of the typical relational operators: <, <=, >, >=, = (equal to), or <> (not equal to).
LET A 3
LET B 5
IF A < 4 THEN 5
PRINT A
PRINT B
.

In the program above, the variables A and B are given the values 3 and 5, respectively. An IF statement then compares A to 4. Since A is less than 4, execution jumps to line 5. B's value is printed out. So this program's output is simply a line containing 5.
The IF statement in Facile is substantially less flexible than its Python equivalent. In an IF statement in Facile, the token IF must be followed by exactly five tokens. The first must be the name of a variable. The second must be one of the relational operators (<, <=, >, >=, =, or <>). The third must be an integer constant. The fourth must be the word THEN. The fifth must be a line number. They behave in the way you might expect. For example: IF C <> 0 THEN 4 means "jump to line 4 if C is not equal to 0".
Like GOTO statements, IF statements are not permitted to jump beyond the boundaries of the program. An attempt to do so should cause the Facile program to terminate with an error message.
Subroutines: There are no methods or functions in Facile, but there is a simplified mechanism called a subroutine. A subroutine is a chunk of Facile code that can be "called" by issuing a GOSUB statement. GOSUB is much like GOTO; it causes execution to jump to a particular line. However, GOSUB also causes the Facile program to remember where it jumped from. Subsequently, when a RETURN statement is reached, execution continues at the line following the GOSUB statement that caused the jump. Here's an example:
LET A 1
GOSUB 6
PRINT A
PRINT B
END
LET A 2
LET B 3
RETURN
.
In the program above, line 1 is executed first, setting the value of A to 1. Next, a GOSUB statement is reached. Execution jumps to line 6, but Facile also remembers that when a RETURN statement is reached, execution should jump back to the line following the GOSUB — in this case, line 3. Line 6 is executed next, setting A to 2, then line 7 sets B to 3. Now we reach a RETURN statement, causing execution to jump back to the line number that we're remembering — line 3. Line 3 prints the value of A (which is 2), then line 4 prints the value of B (which is 3). Next, we reach line 5, which is an END statement, so the program ends.
Subroutines can be used very similarly to Python functions, except they do not take parameters or return a value. Consider the following example, which contains a subroutine that prints the values of A, B, and C each time it's called:
LET A 3
LET B 0
LET C 0
GOSUB 12
LET B 4
GOSUB 12
LET C 5
GOSUB 12
LET A 1
GOSUB 12
END
PRINT A
PRINT B
PRINT C
RETURN
.
Subroutines may call other subroutines, meaning that two or more GOSUB's may be reached before a RETURN is reached. The rules for this are very similar to methods that call other methods in Python; for each GOSUB that is reached, Facile will remember the line to which it should return. When a RETURN is reached, execution will move to the line remembered from the most recent GOSUB. Here's an example:
LET A 1
GOSUB 7
PRINT A
END
LET A 3
RETURN
PRINT A
LET A 2
GOSUB 5
PRINT A
RETURN
.
In this example, execution begins at line 1 by setting the variable A to 1. Next, we jump to line 7 with a GOSUB, remembering that we should jump back to line 3 when we encounter a RETURN. Line 7 prints A (which is 1), then line 8 changes A's value to 2. Now we've reached line 9, which is another GOSUB statement. At this point, execution will jump to line 5, but we'll also need to remember to jump back to the line following this GOSUB — line 10 — when we reach a RETURN. But we also need to remember the line from the previous GOSUB — line 3.
Line 5 sets A to 3, then we encounter our first RETURN statement. We're remembering two lines — line 3 and line 10. But line 10 is the most recently remembered line, so execution jumps to line 10. Line 10 prints A (which is 3). Now we encounter another RETURN statement on line 11. We're remembering the line 3 from the first GOSUB. So execution jumps to line 3, printing A (which is still 3), then ending the program on line 4.
So, the output of this program is:
1
3
3
Like GOTO statements, GOSUB statements are not permitted to jump beyond the boundaries of the program, to lines before line 1 or lines after the "." that completes the program. If such a GOSUB statement is encountered while a program is executed, the interpreter terminates with an error message.
It is also an error for a RETURN statement to be encountered when there has been no previous GOSUB. The Facile program will immediately terminate and print an error message in this case, as well.
Whitespace: While Facile programs may not have blank lines in them, the amount and placement of blank space between the words on each line is considered irrelevant. So, the following is a legal Facile program:
    LET    Zebra  5
 GOTO   7
LET Chimpanzee   4
 PRINT Chimpanzee
PRINT         Zebra
  END
PRINT Chimpanzee
        PRINT  Zebra
    GOTO      3
.

Experimenting with Facile: An interpreter is a program that is capable of executing a program written in some programming language. To give you the ability to experiment, we've implemented a Facile interpreter for Windows already. (For those of you who don't ordinarily use Windows, remember that our machines in the ICS labs run Windows, so you'll have ample opportunity to experiment with Facile. You might even want to "pair program" while you experiment.) This Zip archive contains the interpreter (Facile.exe) and most of the Facile programs that appear in this write-up, along with a few additional ones that demonstrate fatal errors (division by zero, a RETURN statement without a corresponding GOSUB, and a GOTO to a non-existent line). Feel free to write your own, as well. Unzip the archive into one folder, then double-click the program. From there, it's fairly self-explanatory. A word of warning about this interpreter: we wrote it without making a serious attempt at handling syntax problems, so it assumes that the input file is a legal Facile program. If you attempt to run an input file that is not legal Facile, you may see the message "ERROR IN PROGRAM", but it's also possible that my interpreter may simply crash.  Moreover, this interpreter's version of Facile has a few subtle differences from the version described here:  In particular, it recognizes only the 26 variables A through Z, and it initializes all of them to 0 automatically.
We're providing this interpreter so you can experiment with the language as you have questions about it. Once you're comfortable with it, it'll be your turn to implement a Facile interpreter. (Bear in mind that this Facile interpreter implements much of the optional work described in the "Additional challenges" section below, but it will behave correctly on the samples given in this write-up.)
Your program: For this project, you'll be building your own Facile interpreter, which is a program that is capable of executing a Facile program, generating the correct output according to the specification in the previous sections. Since you're already familiar with Python, you'll write your Facile interpreter in Python. (Since Python runs on many operating systems, that means, once completed, you'll be able to use your interpreter to run Facile programs on Windows, Mac OS X, Linux, Unix, and several other platforms.)
The Facile interpreter that we've provided runs in a (very simple) graphical user interface. Your program, on the other hand, should read one Facile program from an input file, then execute it, writing any output from the Facile program to the console (i.e., using print statements).
As a starting point, we will discuss the organization of this program in class.  Of course you may use the code we develop as a basis for your complete solution.
How an interpreter works: A typical interpreter will execute a program one statement at a time, keeping track of what we might call the program state as it goes along. In the case of a Python interpreter, you might imagine that there would be quite a bit of work to be done. The interpreter would need to keep track of all of the objects — creating new ones and garbage-collecting old ones as necessary — as well as maintain the "call stack," along with various other tasks required by Python programs. Implementing an efficient, complete Python interpreter is a project that would easily take many programmer-years.
A Facile interpreter is a much simpler program, since Facile is a much simpler programming language. Your interpreter will need to execute a Facile program one statement at a time, updating the program state as necessary, until either an END statement or the "." is reached. (The "." can simply be treated as an END statement, if you'd like.) The program state consists of the following information:
what line of code is currently executing (you might call this the program counter, which you may remember from the Deus X machine)the integer value in each of the variablesthe call stack; that is, the line numbers remembered because of any GOSUB statements (Since each RETURN jumps back to the line following the most recent GOSUB, it makes sense to store these line numbers in a stack.)
Each statement has a different effect on the program state. For eMR. KAY'S
  WILD RIDE
  
  PROBLEM
DESCRIPTION
[This document provides an overview of the
simulation.  It discusses some details of behavior  and implementation,
but it is not a complete, formal specification document.] 
1. Introduction 

At amusement parks like Disneyland, there are
many attractions (usually rides, but also stores and restaurants).  In successful
amusement parks (also called theme parks), there are also many customers.
Customers visit one attraction after another; usually more customers want
to visit an attraction than the attraction can hold at one time, so often
customers spend time waiting in line.  

Amusement park operators pay a lot of attention
to the way customers flow through the park.  They want all the attractions
to be operating at full capacity, and they want people to spend as little
time as possible in line so they will have a good time and come back again.
 

Since hundreds of millions of dollars go into
the design of a new amusement park, it pays to plan ahead, and to predict
as accurately as possible how people will behave when the park is open.
 One good tool for this is computer simulation.
2. Simulation
Simulation is different from reality.  If we
want to know how well a newly-designed helicopter or racing schooner will
perform, we might build a prototype and try it out.  If we want to know
how many incoming freshmen will graduate in four years or less, we might
simply admit those students and keep track of them over their college careers.
 If we want to know which arrangement of rides works best, we could build
them and see what happens.  But those approaches cost a lot and take too
long. 

  We can call the helicopter, the schooner, the
    students, or the amusement park a system (which means no more than "a
    group of things forming a unified whole").  We can design models of
    these systems and how they behave, simplified descriptions that leave out
    unnecessary detail (like the color of the sail or the freshman's height
    or the shape of the cars in "Mr. Toad's Wild Ride").  [Of course,
    the major pitfall in designing these models is omitting a detail that is
    not unnecessary; perhaps a freshman's height does affect his or her success
    in school.]  And we can code these models as computer programs, running
    them over and over, easily changing various values, to help predict the
    systems' performance without all the bothersome cost, time, and detail of
the real thing.  That's simulation. 

One type of simulation involves the behavior
of a population (such as the students above, but not the schooner or helicopter).
One approach to population simulation involved statistical changes to the
population as a whole (e.g., "If there's a black plague epidemic, the
population decreases by 25%").  Another approach is to represent each
individual in the population separately, by an object in a program; object-oriented
programming is a natural way to implement simulations like this.  The simulator,
then, gives each object a turn, during which the object can change its status
and possibly affect its environment.  We can call it one "round"
of the simulation when each individual object has had one turn.  The simulation
will typically continue for a specified number of rounds, or until some
condition occurs (such  as all the objects finishing their work). 
3.  This Problem 

Since Orange County is a center of theme parks,
you decide to offer a simulation service for theme park designers.  Your
first step is to design and implement the software that you will use.  

Your program will simulate two different classes
of objects: attractions and customers.  

As described below, each attraction will have
certain information, such as its location in the park, the number of customers
it can handle at once, the amount of time customers have spent waiting in
line before actually starting the ride, and the amount of time it takes
a customer to complete the ride once he or she starts it.  Each attraction
will also perform  operations such as taking the next customers in line,
releasing customers after their turn is over, informing customers how long
the wait will be, and so on. 

Each customer will start with a "wishlist"—the
list of attractions he or she wants to visit during the day, each with a
priority that indicates how important the attraction is to that customer.
 Each customer will also have some way of deciding, at any moment, which
attraction to visit next.  The customer might use a simple-minded decision
algorithm, such as "Always go to the ride with the next highest priority."
 But some customers might be more clever; they might decide to start with
the rides that are furthest from the entrance, because the crowds will be
smaller, or they might decide to postpone some rides if the wait in line
looks too long, or they might choose a lower-priority ride if it happens
to be nearby. 

When you specify each customer to the system,
you will be able to choose from a few different decision strategies; others
could be implemented.  [In fact, prospective customers who want to get the
most out of their trip will also be able to use your  service (providing
you an additional stream of income); they will be able to try out different
decision strategies and see which one works best.  In fact, we think we've
seen a web site that provides just such a planning service.]  More information
about customers appears below. 

Your program, then,
will be a simulation system that manages the two kinds of objects.  After
setting things up initially—the attractions, the customers, the opening
and closing times of the park—it will cycle through the minutes of the day.
 At each minute, it will give a turn to each customer entering the park
and each customer just leaving a ride, so they can  apply their decision
strategies, coming up with the ride to visit next. Also, every ride will
get a turn to take in some customers and release some customers, depending
on the size of its line and the amount of time it takes to go through the
attraction.   Finally, each customer who is "in transit"  from
one place to the next will move closer to his or her goal. So at the end
of each cycle, some customers will be in line for rides, some will actually
be on the rides, and some will be walking from one ride to another. 

Then, at the next minute, the whole cycle repeats
again. The simulator stops shortly after it reaches the park's closing time.
 (Since  customers might actually be on a ride at the exact time the park
closes, you have to allow time for them to finish and leave the park). At
the end of the day, the simulator prints some statistics about each customer's
visit.  

A realistic simulation might operate second-by-second
instead of a minute at a time; however, that would take 60 times the computing
power so to keep things simple, especially if we have a lot of customers,
we'll leave things on a minute-by-minute basis for now. 
4. Attractions 

Each ride will store this information:

Name

Entrance location (where in the park the ride's
entrance is)

Exit location (some rides take you from one
location to another)

How many cars are in use on the ride at present

Maximum number of people per car

Maximum number of cars the ride can handle

  Parameters for loading and ride time (see below)

Queue of customers waiting in line for this
ride

Different rides load and discharge their passengers
differently; this affects the length of time it takes to complete the ride
and the number of passengers the ride can handle.

4.1.  Ride Loading Characteristics

Each ride maintains a queue of customers waiting
to ride it. At each minute, the ride may take some people from this queue
and put them on the ride, and it will take any people who have completed
the ride and send them back out into the park to decide which ride to visit
next.  This continues until closing time, after which nobody else can get
in line and the ride empties out its queue.  

At each minute, the ride has to figure out
if any cars are loaded and ready to be dispatched on the ride, if any cars
are empty and ready to load, and if any cars have completed the ride aInformatics 41 * Fall 2009 * David G. Kay *
UC Irvine

SAMPLE QUESTIONS

Below are some questions of the sort that could
appear on our final exam.  This is not a sample exam--it's not the same
length, it doesn't have the same mix of questions, it doesn't cover
all the topics.  But these questions will help you review some important
concepts and most of them have appeared on exams in the past.  Try to do
them by yourself, but then compare your answers with your classmates. Do
this long enough in advance that you'll have a chance to ask us if there
are issues you can't resolve yourself.

(a.1)  Write a definition for the function
vector->list.
 (Hints:  Remember that vectors are zero-based.  Be careful not to produce
a reverse-order list.  Use an auxiliary function.)

; vector->list: vector  ->  list

; Return a list containing the same elements
as the vector argument, in the same order.

; (vector->list (vector 1 2 3) returns
(list 1 2 3)


(a.2)  Write a definition for the function
list->vector.
 (Hint:  You can do this without an auxiliary function and without vector-set!,
but you may use them if you need to.)

; list->vector: list  ->  vector

; Return a vector containing the same elements
as the list argument, in the same order.

; (list->vector (list 1 2 3) returns
(vector 1 2 3)


(b)  Consider the following function:


(define (DoSomething a b)  ; assume b >=
0

  (cond

    ((= b 0) a)

    (else (DoSomething (sub1 a) (sub1
b)))))


(b.1) What is returned by each of the
following statements?

   (DoSomething 3 1

   (DoSomething 6 2)

   (DoSomething 29 5)

   (DoSomething 25000 23000)

(b.2) In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.


(b.3)  Now look at this function:


(define (DoSomethingElse a b)  ; assume
b >= 0

  (cond

    ((= b 0) a)

    (else (sub1 (DoSomethingElse a
(sub1 b))))))

Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.


(b.4)  Which of these routines are
tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate (by circling
it) which specific operation in its code makes it non-tail-recursive.


(c)  A set is a collection of distinct
objects (i.e., without duplicates).  Suppose you have the following operations
defined on sets:

empty-set
is a constant representing the empty set.

(empty? S)
returns true if the set S is empty and false otherwise.

(element? S E)
returns true if E is an element of the set S, and false otherwise.

(insert S E)
returns the set S if E is already in S, or returns S with E added otherwise.

(intersection S1 S2)
returns a set containing only the elements that are in both S1 and S2.

(subtract S1 S2)
returns a set containing the elements of S1 that are not in S2.

(union S1 S2)
returns a set containing every element in either S1 or S2 (without   
duplicates, of course).

(c.1)  Using any of the above routines
where appropriate, but using no list processing functions, define a Scheme
function called ski-trip
that takes the following four sets as arguments

*   friends,
the set of all your friends;

*   early-risers,
the set of people you know (perhaps including people who aren't your
friends) who will wake up early enough to get out on the slopes when the
lifts open;

*   rowdy-people,
the set of people who are likely to get too excited and wreck your cabin;

*   fun-folks,
the set of people who really know how to party

and returns the set of people you'd like
to invite on your ski trip over winter break:  all your friends who are
early risers and fun folks, but not rowdy people.


(c.2)  Assuming we implement sets as
normal Scheme lists, write a definition for the function union.


(c.3)  Using the operations map,
filter,
reduce,
and/or for-each,
and without using any explicit recursion, write a definition for the function
intersection.
 (Hint:  This can be quite short.)


(c.4)  Write a definition for subtract
and rewrite a definition for union,
using the operations map,
filter,
reduce,
and/or for-each
and no explicit recursion.


(d)  In the restaurants program
(a copy of which is provided), define the following function that could
be used at the top level of the program (i.e., without knowing whether the
collection is implemented as a list, a BST, a vector, or whatever; that
means you have to call collection-change).

;; increase-price-for-cuisine: collection
number symbol -> collection

;; The symbol is the name of a cuisine; the number is a number of dollars

;; to add to the price of each restaurant serving that cuisine.  Return
the

;; collection with those price changes.


(e)  [This one is tough towards the
end, probably tougher than would be on the test.]

Anteater Airlines stores each of its scheduled flights in a structure with
five fields:

origin (the three-letter airport code, e.g..
'LAX)

departure (the departure time)

destination (a three-letter airport code)

arrival (the arrival time)

passengers (a list of passengers, each of
whom is represented by a string, e.g., "Jane
Jones")

(e.1)  Define the structure flight
with the field names given above.


(e.2)  Complete the following definition
for the predicate function valid-flight?,
which takes an expression and checks whether it appears to be a valid flight.
 

(define valid-flight?

    (lambda (X)

      (and              
                ; and, like +, can take more than 2 arguments

         (________________
X)           ; is it a flight structure at all?

         (airport-code-valid?
(flight-origin X))

         (time-valid?
(________________ X)) ; is the departure time valid?

         (airport-code-valid?
(flight-destination X))

         (time-valid?
(________________ X)) ; is the arrival time valid?  

         (list-of-strings?
(flight-passengers X))))


(e.3)  Assume that you have already
defined the variable airport-code-list,
which is a list of all the valid three-letter airport abbreviations (e.g.,
LAX, SFO, SNA).  Write a definition for the predicate function airport-code-valid?,
which takes a symbol (an atom) and returns true if the symbol is contained
in airport-code-list.
 (Hint:  You can do this without recursion if you use a function we defined
in class and in the book.)


(e.4)  The predefined predicate string?
takes a single argument and returns true (#t)
if and only if the argument is a string.  Write a definition for the predicate
list-of-strings?,
which takes a list and returns true if and only if every element of the
list is a string (or if the list is empty).


(e.5)  Define the predicate flight-goes-to?,
which takes two arguments, a flight structure and a symbol (representing
an airport code), and returns true if the flight's destination matches
that symbol.


(e.6)  Anteater Airlines stores all
of its scheduled flights in a list of flight structures--the same flight
structure you defined in the previous problem. 

Write a definition for the function first-flight-to,
which takes a flight list and a symbol (representing an airport code) and
returns the first flight on the list whose destination matches that symbol
(or the null list if there's no match).  Use flight-goes-to?
as described above, whether or not your definition was correct.


(e.7)  Write a definition for the function
keep-flights-to,
which takes a flight list and a symbol (representing an airport code) and
returns a list of flights containing only those flights in the original
list whose destination matches that symbol.


(e.8)  To enhance security, an anonymous
air marshal will be assigned to every Anteater Airlines flight.  Write a
definition of add-marshals,
which takes a flight list and a code name and adds that code name at the
beginning of the passenger list of each flight.  (Hint:  First write a function
to take a single flight and add the name; then call that function from your
definition of add-marshals.)


(e.9)  Write a definition for complete-passengers-list,
which takes a flight list and returns a list of strings containing all the
passengers from all the flights on the list, with no duplications.  (You
may assume that all the passengers on a single flight are unique.)


(e.10)  (5 points)  Write the function
average-passengers
that takes a flight list and returns the average number of passengers on
the flights on the flight list. 


(e.11)  Rewrite average-passengers
to make it tail-recursive.  (If your answer for part (a) is already
tail-recursive, just write "I did this already," and if you did
it correctly, you'll get full credit.)


(e.12)  Anteater Airlines plans to
merge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and
incredibly), both airlines store their flights in a list of flight structures
as described above.

Write the function merge-flight-lists,
which takes two flight lists and returns a flight list containing all the
flights from both arguments, except that when a flight from the first list
matches a flight from the second list (i.e., they have the same origin,
departure time, destination, and arrival time), the merged list contains
just one flight with the two matching flights' passenger lists combined.

You may assume that you have already defined
flights-match?,
which takes two flight structures and returns true if they match as described
above, and merge-lists,
which takes two lists and returns a list that contains all the elements
of both arguments.  You may also assume that the names on any single passenger
list are unique and that within each of the original flight lists, no flights
match.  (Hint:  Be careful and consistent about what types of data come
into and go out of each function.)


(f)  Evaluate each of the following
expressions.  That is, what does the Scheme interpreter (DrScheme in our
case) display when each of these expressions is executed? 

(f.1) (*
(- 15 4) (/ 40 4))

(f.2) (>
(/ 55 5) 12)

(f.3) (+
100

       (cond

         ((>= 5 (/ 10 2)) 37)

         (else 6)))


(g.1)  True or false:  The features
and capabilities of Scheme make it the best choice for the great majority
of programming tasks. 

(g.2)  True or false:  A programmer
with a knowledge of Java can be sure that his or her knowledge will be enough
to sustain a productive and innovative 40-year career. 


(h)  Students in the course Applied
Epistemology 101 are graded on two items, a midterm and a final exam, each
of which has 100 points possible.  The midterm's weight 40% of the course
grade; the final is worth 60%.

Write the function AE101-score
that takes two arguments--a student's midterm score and final exam score--and
returns that student's overall weighted score in the class (in the range
0 to 100).  Write two constant definitions for the weights, a contract,
a brief purpose statement, the Scheme function definition, and two tests
in the form of boolean expressions that should return true if the function
works correctly.


(i)  Complete the definition of the
function between?
below.

;; between?:  number number number ->
boolean

;; Return true if the first argument's value is between the second and
the third, inclusive

;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between
1 2 3) is false

(define between?   
                 

   (lambda (value low high)

      (and



(j)  Complete the definition of item-on-list?
below.  

;; item-on-list?:  expression list ->
boolean

;; Return true if the expression occurs on the list

(define item-on-list?

   (lambda (item L)

      (cond


(k)  A date
is a structure (make-date month day year),
where month
is a symbol ('Jan,
'Feb,
and so on), day
is a number from 1 to 31, and year
is a number from 1000 to 3000.

(k.1)  Define the structure date
with the field names given above.

(k.2) Define a date
object called TODAY
with the appropriate values.

(k.3)  Complete the following definition
for the predicate function valid-date?,
which takes an expression and checks whether it appears to be a valid date.
 Use the functions you defined in the previous problems where necessary.

;; valid-date?:
 anything -> boolean

(define MONTHLIST (list 'Jan 'Feb
'Mar 'Apr 'May 'Jun 'Jul 'Aug 'Sep 'Oct
'Nov 'Dec))

(define valid-date?

   (lambda (D)

      (and    

         (________________
D)                             ; is it a date structure
at all?

         (item-on-list?
(________________ D)________________)        ; is the month valid?

         (________________
(date-day D) 1 31)
                                                    ;
is the day valid?

         (________________
(date-year D) ________  ________))))      ; is the
year valid?


(k.4)  Define the predicate function
all-valid-dates?.

;; all-valid-dates?:
 list -> boolean

;; Return true if all the items on the list are valid dates.
 If the list is empty, return true.


(l)  Suppose you wish to write a spelling
checker that takes a string of text as input and returns a list of the misspelled
words in that string.  Because the input may contain white space and punctuation,
we will need to extract the words from the string, where a word is a string
of characters that are separated from the next word by white space or punctuation.
 (The precise characters that count as white space or punctuation we won't
worry about here.)

Define the function spell-check,
which takes a string and returns a list of the words in the string that
are misspelled (more precisely, words that don't occur in the dictionary
of all correctly spelled words).  You should use each of the following in
your definition:

* first-word,
a function that takes a string and returns the first word in that string

* rest-of-words,
a function that takes a string and returns a copy of that string with the
first word removed

* string-empty?,
a function that takes a string and returns true if it's empty or if
it contains only white space and punctuation

* DICTIONARY,
a (long) list of correctly spelled words, where each word is a string.

;; spell-check: string -> list-of-strings

;; Return a list of the words in the input string that aren't in the
dictionary.


(m)  In this problem you may not use
the predefined functions member
or list-ref.
 You may use other functions defined earlier in this exam (and you may lose
points if you re-implement here something that was already described above).

(m.1)  Define the function position-on-list.

;; position-on-list: any list-of-any ->
number

;; Return the place on the list where the first input occurs, or zero if
list is empty

;; Examples:  (position-on-list 'a '(a b c)) is 1; (position-on-list
1 empty) is 0;

;;            (position-on-list 3 '(2 3 4)) is 2


(m.2)  Define the function item-at-position.

;; item-at-position: number list-of-any
-> any

;; From the input list, return the item specified by the input number, or
empty if out of range

;; Examples:  (item-at-position 3 '(a b c)) is c; (item-at-position
7 '(a b)) is empty; 

;;            (item-at-position 0 '(3 4)) is empty


(m.3)  Define next-on-list.
 You may wish to use the predefined function length,
which returns the number of items on a list.  [Hint:  Use prior definitions,
not recursion.]

;; next-on-list: any list-of-any -> any

;; Return the item on the input list that follows the first input, or empty
if none

;; Examples:  (next-on-list 'b '(a b c)) is c; (next-on-list 'c
(a b c)) is empty;

;;            (next-on-list 'x '(a b c)) is empty; (next-on-list
'a empty) is empty


(m.4)  Define next-on-circular-list.

;; next-on-circular-list: expression list
-> expression

;; Like next-on-list, but the item after the last on the list is the first
item again

;; Example:  (next-on-circular-list 'c '(a b c)) is a.


(m.5)  Define the function next-month
that uses the constant MONTHLIST
(see Problem (k)) to take in a symbol ('Jan,
'Feb,
...) representing a month and return the symbol for the following month.

;; next-month:  symbol -> symbol

;; Take a month name ('Jan, 'Feb, ...) and return the name of the
following month.


(m.6)  Define the function advance-a-month
that takes a date
(see Problem (k)) and returns that date moved one month into the
future.

;; advance-a-month: date -> date

;; Advance the input date by one month (on the same day)


(m.7)  Suppose you have a list of dates
representing events on your calendar, but you decide to takInformatics 41 * Fall 2009 * David G. Kay *
UC Irvine

ANSWERS TO SAMPLE
QUESTIONS

Below are some questions of the sort that could
appear on our final exam.  This is not a sample exam--it's not the same
length, it doesn't have the same mix of questions, it doesn't cover
all the topics.  But these questions will help you review some important
concepts and most of them have appeared on exams in the past.  Try to do
them by yourself, but then compare your answers with your classmates. Do
this long enough in advance that you'll have a chance to ask us if there
are issues you can't resolve yourself.

(a.1)  Write a definition for the function
vector->list.
 (Hints:  Remember that vectors are zero-based.  Be careful not to produce
a reverse-order list.  Use an auxiliary function.)

; vector->list: vector  ->  list

; Return a list containing the same elements
as the vector argument, in the same order.

; (vector->list (vector 1 2 3) returns
(list 1 2 3)

(define (vector->list
V)

  (vtl-help V (vector-length V) empty))

(define (vtl-help V i list-so-far)

  (cond

    ((= i 0) list-so-far)

    (else (vtl-help V 

                    (sub1 i) 

                    (cons (vector-ref V (sub1 i)) list-so-far)))))

; Scoring:  Deduct
a point if they don't deal with the vector being zero-based (though they
don't have to subtract 1 in the same place the solution above does).

; Deduct a point if
they count upwards and thereby produce a reverse-order list.

(a.2)  Write a definition for the function
list->vector.
 (Hint:  You can do this without an auxiliary function and without vector-set!,
but you may use them if you need to.)

; list->vector: list  ->  vector

; Return a vector containing the same elements
as the list argument, in the same order.

; (list->vector (list 1 2 3) returns
(vector 1 2 3)

(define (list->vector
L)

  (build-vector (length L) (lambda (n) (list-ref L n))))

; --------------------------------------------------------------- That's
the nice way, but here's the other way:

(define (list-to-vector L)

  (ltv-help L (build-vector (length L) (lambda (n) 1)) 0))

(define (ltv-help L V i)

  (cond

    ((empty? L) V)

    (else (begin

            (vector-set! V i (first L))

            (ltv-help (rest L) V (add1 i))))))


(b)  Consider the following function:


(define (DoSomething a b)  ; assume b >=
0

  (cond

    ((= b 0) a)

    (else (DoSomething (sub1 a) (sub1
b)))))


(b.1) What is returned by each of the
following statements?

   (DoSomething 3 1)2

   (DoSomething 6 2)4

   (DoSomething 29 5)24

   (DoSomething 25000 23000)2000

(b.2) In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.

Subtraction:   a -
b

(b.3)  Now look at this function:


(define (DoSomethingElse a b)  ; assume
b >= 0

  (cond

    ((= b 0) a)

    (else (sub1 (DoSomethingElse a
(sub1 b))))))

Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.

Yes, they produce
the same results.

(b.4)  Which of these routines are
tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate (by circling
it) which specific operation in its code makes it non-tail-recursive.

DoSomethingElse is
not tail-recursive because of the last subtraction (which is done after
returning from the recursive call). 

(c)  A set is a collection of distinct
objects (i.e., without duplicates).  Suppose you have the following operations
defined on sets:

empty-set
is a constant representing the empty set.

(empty? S)
returns true if the set S is empty and false otherwise.

(element? S E)
returns true if E is an element of the set S, and false otherwise.

(insert S E)
returns the set S if E is already in S, or returns S with E added otherwise.

(intersection S1 S2)
returns a set containing only the elements that are in both S1 and S2.

(subtract S1 S2)
returns a set containing the elements of S1 that are not in S2.

(union S1 S2)
returns a set containing every element in either S1 or S2 (without   
duplicates, of course).

(c.1)  Using any of the above routines
where appropriate, but using no list processing functions, define a Scheme
function called ski-trip
that takes the following four sets as arguments

*   friends,
the set of all your friends;

*   early-risers,
the set of people you know (perhaps including people who aren't your
friends) who will wake up early enough to get out on the slopes when the
lifts open;

*   rowdy-people,
the set of people who are likely to get too excited and wreck your cabin;

*   fun-folks,
the set of people who really know how to party

and returns the set of people you'd like
to invite on your ski trip over winter break:  all your friends who are
early risers and fun folks, but not rowdy people.

(define (ski-trip
friends early-risers rowdy-people fun-folks)

   (subtract
(intersection (intersection friends early-risers) fun-folks) rowdy-people))


(c.2)  Assuming we implement sets as
normal Scheme lists, write a definition for the function union.

(define union

   (lambda (s1 s2)

      (cond

      ((empty? s1) s2)

      ((element? s2 (first s1)) (union (rest s1) s2))

      (else (cons (first s1) (union (rest s1) s2))))))


(c.3)  Using the operations map,
filter,
foldr,
and/or for-each,
and without using any explicit recursion, write a definition for the function
intersection.
 (Hint:  This can be quite short.)

(define intersection

   (lambda (s1 s2)

      (filter (lambda (E) (element? s1 E)) s2)))


(c.4)  Write a definition for subtract
and rewrite a definition for union,
using the operations map,
filter,
foldr,
and/or for-each
and no explicit recursion.

(define subtract

   (lambda (s1 s2)

      (filter (lambda (E) (not (element? s2 E))) s1)))

(define union

   (lambda (s1 s2)

      (foldr insert s1 (subtract (s2 s1)))))


(d)  In the restaurants program
(a copy of which is provided), define the following function that could
be used at the top level of the program (i.e., without knowing whether the
collection is implemented as a list, a BST, a vector, or whatever; that
means you have to call collection-change).

;; increase-price-for-cuisine: collection
number symbol -> collection

;; The symbol is the name of a cuisine; the number is a number of dollars

;; to add to the price of each restaurant serving that cuisine.  Return
the

;; collection with those price changes.

(define increase-price-for-cuisine

  (lambda (RC amount c)

    (collection-change RC 

                    (lambda (r) (eq? (rrant-cuisine r) c))

                    (lambda (r) (make-rrant (rrant-name r) (rrant-cuisine
r) (rrant-phone r)

                             (rrant-dish r) (+ amount (rrant-price
r))))))


(e)  [This one is tough towards the
end, probably tougher than would be on the test.]

Anteater Airlines stores each of its scheduled flights in a structure with
five fields:

origin (the three-letter airport code, e.g..
'LAX)

departure (the departure time)

destination (a three-letter airport code)

arrival (the arrival time)

passengers (a list of passengers, each of
whom is represented by a string, e.g., "Jane
Jones")

(e.1)  Define the structure flight
with the field names given above.

(define-struct flight
(origin departure destination arrival passengers))

The parentheses here
have to be correct.  In general, all the parentheses have to be correct,
except for counting the parentheses at the end of a definition.

(e.2)  Complete the following definition
for the predicate function valid-flight?,
which takes an expression and checks whether it appears to be a valid flight.
 

(define valid-flight?

    (lambda (X)

      (and              
                ; and, like +, can take more than 2 arguments

         (________________
X)           ; is it a flight structure at all?  flight?

         (airport-code-valid?
(flight-origin X))

         (time-valid?
(________________ X)) ; is the departure time valid?flight-departure

         (airport-code-valid?
(flight-destination X))

         (time-valid?
(________________ X)) ; is the arrival time valid?    
flight-arrival

         (list-of-strings?
(flight-passengers X))))


(e.3)  Assume that you have already
defined the variable airport-code-list,
which is a list of all the valid three-letter airport abbreviations (e.g.,
LAX, SFO, SNA).  Write a definition for the predicate function airport-code-valid?,
which takes a symbol (an atom) and returns true if the symbol is contained
in airport-code-list.
 (Hint:  You can do this without recursion if you use a function we defined
in class and in the book.)

(define airport-code-valid?

   (lambda (c)

      (member? c airport-code-list)))

; Okay if the order of arguments to member? is switched.  Don't deduct
but make a note if they use a cond to explicitly return #t or #f.  It's
also okay if they write it out recursively and don't use member?


(e.4)  The predefined predicate string?
takes a single argument and returns true (#t)
if and only if the argument is a string.  Write a definition for the predicate
list-of-strings?,
which takes a list and returns true if and only if every element of the
list is a string (or if the list is empty).

(define list-of-strings?

   (lambda (L)

      (cond

         ((null? L) #t)

         ((string? (first L)) (list-of-strings? (rest L)))

         (else #f))))

This can also be done in just two cond clauses, with the second using AND.


(e.5)  Define the predicate flight-goes-to?,
which takes two arguments, a flight structure and a symbol (representing
an airport code), and returns true if the flight's destination matches
that symbol.

(define flight-goes-to?

   (lambda (F d)

      (equal? (flight-destination F) d)))

; Okay to use eq? or symbol=? instead of equal?


(e.6)  Anteater Airlines stores all
of its scheduled flights in a list of flight structures--the same flight
structure you defined in the previous problem. 

Write a definition for the function first-flight-to,
which takes a flight list and a symbol (representing an airport code) and
returns the first flight on the list whose destination matches that symbol
(or the null list if there's no match).  Use flight-goes-to?
as described above, whether or not your definition was correct.

(define first-flight-to

  (lambda (L d)

   (cond

      ((null? L) '())

      ((flight-goes-to? (first L) d) (first L))

      (else (first-flight-to (rest L) d))))


(e.7)  Write a definition for the function
keep-flights-to,
which takes a flight list and a symbol (representing an airport code) and
returns a list of flights containing only those flights in the original
list whose destination matches that symbol.

(define keep-flights-to

  (lambda (L d)

   (cond

      ((null? L) '())

      ((flight-goes-to? (first L) d) (cons (first L) (keep-flights-to
(rest L) d)))

      (else (keep-flights-to (rest L) d))))


(e.8)  To enhance security, an anonymous
air marshal will be assigned to every Anteater Airlines flight.  Write a
definition of add-marshals,
which takes a flight list and a code name and adds that code name at the
beginning of the passenger list of each flight.  (Hint:  First write a function
to take a single flight and add the name; then call that function from your
definition of add-marshals.)

(define add-marshals

  (lambda (L name)

   (cond

      ((null? L) '())

      (else (cons (enhance (first L) name) (add-marshals
(rest L) name)))))

(define enhance 

  (lambda (F codename)

   (make-flight (flight-origin F) (flight-departure F) (flight-destination
F) (flight-arrival F)

      (cons codename (flight-passengers F)))))


(e.9)  Write a definition for complete-passengers-list,
which takes a flight list and returns a list of strings containing all the
passengers from all the flights on the list, with no duplications.  (You
may assume that all the passengers on a single flight are unique.)

(define complete-passengers-list

  (lambda (L)

   (cond 

      ((null? L) '())

      (else (add-unique (flight-passengers (first L)) (complete-passengers-list
(rest L))))))

(define add-unique 

  (lambda (one-flights-list master-passengers-list)

   (cond

      ((null? one-flights-list) master-passengers-list)

      ((member? (first one-flights-list) master-passengers-list)

         (add-unique (rest one-flights-list) master-passengers-list))

      (else (cons (first one-flights-list) (add-unique (rest
one-flights-list) master-passengers-list)))))


(e.10)  (5 points)  Write the function
average-passengers
that takes a flight list and returns the average number of passengers on
the flights on the flight list. 

(define average-passengers

  (lambda (L)

   (/ (total-passengers L) (length L))))

(define total-passengers

  (lambda (L)

   (cond

      ((null? L) 0)

      (else (+ (length (flight-passengers (first L))) (total-passengers
(rest L)))))))


(e.11)  Rewrite average-passengers
to make it tail-recursive.  (If your answer for part (a) is already
tail-recursive, just write "I did this already," and if you did
it correctly, you'll get full credit.)

(define average-passengers

  (lambda (L)

   (/ (total-passengers L 0) (length L))))

(define total-passengers

  (lambda (L acc)

   (cond

      ((null? L) acc)

      (else (total-passengers

                   (rest L)

                   (+ acc (length (flight-passengers (first
L)))))))))


(e.12)  Anteater Airlines plans to
merge with Aardvark Airlines to form a new airline, AAAir.  Luckily (and
incredibly), both airlines store their flights in a list of flight structures
as described above.

Write the function merge-flight-lists,
which takes two flight lists and returns a flight list containing all the
flights from both arguments, except that when a flight from the first list
matches a flight from the second list (i.e., they have the same origin,
departure time, destination, and arrival time), the merged list contains
just one flight with the two matching flights' passenger lists combined.

You may assume that you have already defined
flights-match?,
which takes two flight structures and returns true if they match as described
above, and merge-lists,
which takes two lists and returns a list that contains all the elements
of both arguments.  You may also assume that the names on any single passenger
list are unique and that within each of the original flight lists, no flights
match.  (Hint:  Be careful and consistent about what types of data come
into and go out of each function.)

(define merge-flight-lists

  (lambda (F G)

   (cond

      ((null? F) G)

      (else (merge-flight-lists (rest F) (merge-a-flight
(first F) G))))))

(define merge-a-flight

  (lambda (f L)

   (cond

      ((null? L) (list f))

      ((flights-match? f (first L)) (cons (merge-flights
f (first L)) (rest L))

      (else (cons (first L) (merge-a-flight (f (rest L)))))))

(define merge-flights

  (lambda (f g)

   (make-flight (flight-origin f) (flight-departure f) (flight-destination
f) (flight-arrival f)

       (merge-lists (flight-passengers f) (flight-passengers
g)))))


(f)  Evaluate each of the following
expressions.  That is, what does the Scheme interpreter (DrScheme in our
case) display when each of these expressions is executed? 

(f.1) (*
(- 15 4) (/ 40 4))

110 (1 point)

(f.2) (>
(/ 55 5) 12)

#f or false (1 point)

(f.3) (+
100

       (cond

         ((>= 5 (/ 10 2)) 37)

         (else 6)))

137 (2 points)


(g.1)  True or false:  The features
and capabilities of Scheme make it the best choice for the great majority
of programming tasks.  False

(g.2)  True or false:  A programmer
with a knowledge of Java can be sure that his or her knowledge will be enough
to sustain a productive and innovative 40-year career.  False


(h)  Students in the course Applied
Epistemology 101 are graded on two items, a midterm and a final exam, each
of which has 100 points possible.  The midterm's weight 40% of the course
grade; the final is worth 60%.

Write the function AE101-score
that takes two arguments--a student's midterm score and final exam score--and
returns that student's overall weighted score in the class (in the range
0 to 100).  Write two constant definitions for the weights, a contract,
a brief purpose statement, the Scheme function definition, and two tests
in the form of boolean expressions that should return true if the function
works correctly.

(define MT-WEIGHT
0.40) ; Could also be 40, if the arithmetic later is right

(define FINAL-WEIGHT 0.60) ; Could be 60.  [ 1 point for defining both correctly]

;; AE101-score: number number -> number [1 point; part credit if "midterm",
e.g., for "number"]

;; Compute weighted score given midterm and final scores (all 0-100) [-1/2
if missing or blatantly untrue]

(define AE101-score

  (lambda (midterm final)

   (+ (* midterm MT-WEIGHT) (* final FINAL-WEIGHT))))

;; Tests

(= 0 (AE101-score 0 0))

(= 100 (AE101-score 100 100))  [1 point for both correct tests, returning
a boolean]

SCORING THE CODE:

  1 point for correct form of define:  (define AE101-score (lambda
(ANYTHING..., or (def (A-s ANYTHING) ...)

  1 point for correct parameter list---two names in parentheses (with
AE101-score if using Indiana style)

  1 point for any attempt to add something involving both arguments

  1 point for completely correct arithmetic

  1 point for everything else correct.  Parentheses must be right except
for counting all the trailing ones.


(i)  Complete the definition of the
function between?
below.

;; between?:  number number number ->
boolean

;; Return true if the first argument's value is between the second and
the third, inclusive

;; Examples:  (between? 7 0 10) is true; (between 3 3 4) is true; (between
1 2 3) is false

(define between?   
                   ;; 1 point for right form:  compare value to low and
compare value to high

   (lambda (value low high) ;;
1 pt for correctness:  going right way on =, not switching low and high

      (and
(>= value low) (<= value high))))
 ;;
Parens around comparisons must be right (or -1/2);         
                           ;; trailing parens don't matter here.


(j)  Complete the definition of item-on-list?
below.  

;; item-on-list?:  expression list ->
boolean

;; Return true if the expression occurs on the list

(define item-on-list?

   (lambda (item L)

      (cond

     
   ((empty? L) false)

     
   ((equal? item (first L)) true)

     
   (else (item-on-list? item (rest L))))))

Scoring:  2 points
for empty case---1 for test, 1 for returning false

         2 points for matching case---1 for test, 1 for returning
true

         2 points for recursive case---1 for attempt at recursive
call, 1 for getting it all correct.

It's okay if they
use some other comparison besides equal?, but note it.  It's okay if
they split this into nested conds as they do in the book.  Minus 3 if they
cross out the cond and just call member? (correctly). [If anybody uses member?
without deleting the cond--e.g. (cond (true (member? item L))(else 'whatever))--I
want to hear about it.  They should get credit.] ** You may deduct points
for nontrivial syntax problems, but beware of "double jeopardy."
** Some answers may be right but not follow the pattern of the rubric. 
Score as appropriate and consult with me as necessary.


(k)  A date
is a structure (make-date month day year),
where month
is a symbol ('Jan,
'Feb,
and so on), day
is a number from 1 to 31, and year
is a number from 1000 to 3000.

(k.1)  Define the structure date
with the field names given above.

(define-struct date
(month day year))

The parentheses here
have to be correct.  In general, all the parentheses have to be correct,
except for counting the parentheses at the end of a definition.  If they
get any field names wrong, deduct 1/2 point.

(k.2) Define a date
object called TODAY
with the appropriate values.

(define TODAY (make-date
'Oct 19 2004))

If the day is off
by 1 or 2, I don't think I care.

(k.3)  Complete the following definition
for the predicate function valid-date?,
which takes an expression and checks whether it appears to be a valid date.
 Use the functions you defined in the previous problems where necessary.

;; valid-date?:
 anything -> boolean

(define MONTHLIST (list 'Jan 'Feb
'Mar 'Apr 'May 'Jun 'Jul 'Aug 'Sep 'Oct
'Nov 'Dec))

(define valid-date?

   (lambda (D) (line
1) 1 point for date?; (line 2) 1 point for date-month, 1 point for MONTHLIST;

      (and     (line
3/4) 1 point for both between?s; (line 4) 1 point for 1000 & 3000

         (________________
D)                             ; is it a date structure
at all?

         (item-on-list?
(________________ D)________________)        ; is the month valid?

         (________________
(date-day D) 1 31)
                                                    ;
is the day valid?

         (________________
(date-year D) ________  ________))))      ; is the
year valid?


(k.4)  Define the predicate function
all-valid-dates?.

;; all-valid-dates?:
 list -> boolean

;; Return true if all the items on the list are valid dates.
 If the list is empty, return true.

(define
all-valid-dates?

  (lambda (L)

   (cond

      ((empty? L) true)

      ((valid-date? (first L)) (all-valid-dates? (rest L)))

      (else false))))

1 point for correct
define/lambda/cond

5 points for the rest.
Any logically equivalent version (e.g., one with and) is okay.  You might
give a point each for the empty and non-matching cases and three points
for the recursive case.


(l)  Suppose you wish to write a spelling
checker that takes a string of text as input and returns a list of the misspelled
words in that string.  Because the input may contain white space and punctuation,
we will need to extract the words from the string, where a word is a string
of characters that are separated from the next word by white space or punctuation.
 (The precise characters that count as white space or punctuation we won't
worry about here.)

Define the function spell-check,
which takes a string and returns a list of the words in the string that
are misspelled (more precisely, words that don't occur in the dictionary
of all correctly spelled words).  You should use each of the following in
your definition:

* first-word,
a function that takes a string and returns the first word in that string

* rest-of-words,
a function that takes a string and returns a copy of that string with the
first word removed

* string-empty?,
a function that takes a string and returns true if it's empty or if
it contains only white space and punctuation

* DICTIONARY,
a (long) list of correctly spelled words, where each word is a string.

;; spell-check: string -> list-of-strings

;; Return a list of the words in the input string that aren't in the
dictionary.

(define
spell-check   1 point -- Correct define, lambda, and argument list

   (lambda (s)   1 point -- Dividing the problem into 3 cases
that relate somehow to the arg

      (cond   1 point -- Correctly identifying the empty/base
case [continued below]

        ((string-empty? s) empty)

        ((item-on-list? (first-word s) DICTIONARY) (spell-check
(rest-of-words s)))

        (else 

(cons (first-word s) (spell-check (rest-of-words s)))))))

1 point -- Correctly returning empty in the empty/base case

1 point -- Attempt to use both first-word and rest-of-words to traverse
list

1 point -- Correct use of first-word and rest-of-words in at least one case
to traverse list

1 point -- Traversal of list using first-word and rest-of-words completely
correct in both cases

1 point -- Attempt to find first-word in DICTIONARY

1 point -- Correct location of first-word in DICTIONARY (item-on-list? or
member?; -1/2 for rewriting it)

1 point -- Correct case where first-word is in the dictionary (no word added
to return list)

1 point -- Correct case where first-word isn't in dictionary (consing
first-word onto return list)

1 point -- Everything else correct

(m)  In this problem you may not use
the predefined functions member
or list-ref.
 You may use other functions defined earlier in this exam (and you may lose
points if you re-implement here something that was already described above).

(m.1)  Define the function position-on-list.

;; position-on-list: any list-of-any ->
number

;; Return the place on the list where the first input occurs, or zero if
list is empty

;; Examples:  (position-on-list 'a '(a b c)) is 1; (position-on-list
1 empty) is 0;

;;            (position-on-list 3 '(2 3 4)) is 2

(define
position-on-list

  (lambda (item L)

    (cond

      ((empty? L) 0)

      ((equal? item (first L)) 1)

      (else (+ 1 (position-on-list item (rest L)))))))

SCORING:  1 for empty
case,  2 for matching case, 3 for increment/recursive case.


(m.2)  Define the function item-at-position.

;; item-at-position: number list-of-any
-> any

;; From the input list, return the item specified by the input number, or
empty if out of range

;; Examples:  (item-at-position 3 '(a b c)) is c; (item-at-position
7 '(a b)) is empty; 

;;            (item-at-position 0 '(3 4)) is empty

(define
item-at-position

  (lambda (n L)

    (cond

      ((empty? L) empty)

      ((<= n 0) empty)

      ((= n 1) (first L))

      (else (item-at-position (- n 1) (rest L))))))

SCORING: 1 for handling
empty input list; 1 for handling index <= 0 (not checking negative is
okay);  3 for recognizing the item at the right position and returning it;
3 for the correct recursive case.  Partial credit as warranted.


(m.3)  Define next-on-list.
 You may wish to use the predefined function length,
which returns the number of items on a list.  [Hint:  Use prior definitions,
not recursion.]

;; next-on-list: any list-of-any -> any

;; Return the item on the input list that follows the first input, or empty
if none

;; Examples:  (next-on-list 'b '(a b c)) is c; (next-on-list 'c
(a b c)) is empty;

;;            (next-on-list 'x '(a b c)) is empty; (next-on-list
'a empty) is empty

(define
next-on-list

  (lambda (item L)

    (cond

      ((= 0 (position-on-list item L)) empty)

      ((= (length L) (position-on-list item L)) empty)

      (else (item-at-position (+ 1 (position-on-list item L)) L)))))

SCORING:  2 points
for correctly recognizing input not on list and returning empty; 2 points
for correctly recognizing last item on list and returning empty; 3 points
for returning correct next item otherwise.


(m.4)  Define next-on-circular-list.

;; next-on-circular-list: expression list
-> expression

;; Like next-on-list, but the item after the last on the list is the first
item again

;; Example:  (next-on-circular-list 'c '(a b c)) is a.

(define
next-on-circular-list

  (lambda (item L)

    (cond

      ((= 0 (position-on-list item L)) empty)

      ((= (length L) (position-on-list item L)) (first L))

      (else (item-at-position (+ 1 (position-on-list item L)) L)))))

SCORING:  3 points
for correctly handling the circular case; 2 points for everything else right.
 Don't deduct for the same mistakes as in the previous part, but do
deduct if they messed something new up.


(m.5)  Define the function next-month
that uses the constant MONTHLIST
(see Problem (k)) to take in a symbol ('Jan,
'Feb,
...) representing a month and return the symbol for the following month.

;; next-month:  symbol -> symbol

;; Take a month name ('Jan, 'Feb, ...) and return the name of the
following month.

(define next-month

  (lambda (this-month)

    (next-on-circular-list this-month MONTHLIST)))

(m.6)  Define the function advance-a-month
that takes a date
(see Problem (k)) and returns that date moved one month into the
future.

;; advance-a-month: date -> date

;; Advance the input date by one month (on the same day)

(define
advance-one-month

  (lambda (d)

    (make-date (next-month (date-month d)) (date-day d)

         (cond ((eq? (date-month d) 'Dec) (+ 1 (date-year
d)))

                   (else (date-year d))))))

SCORING:  2 points
for returning a date (call to make-date with three arguments);  2 points
for correct call to next-month; 3 points for handling December correctly;
1 point for everything else correct.


(m.7)  Suppose you have a list of dates
representing events on your calendar, but you decide to take a month's
skiing vacation in February.  You'll need to postpone all the events
scheduled in February, perhaps moving them one month later.  Generalize
this to the function clear-the-month.

;; clear-the-month: symbol list-of-dates
-> list-of-dates

;; Return the input list after advancing by one month 

;; every date whose month matches the input symbol.

(define
clear-the-month

  (lambda (m L)

    (cond

      ((empty? L) empty)

      ((eq? (date-month (first L)) m) (cons (advance-one-month (first
L)) (clear-the-month m (rest L))))

      (else (cons (first L) (clear-the-month m (rest L)))))))

SCORING:  1 point for empty case; 4 points for matching-month case; 1 point
for non-matching case.


(m.8)   Define this function:

;; days-to-start-of-month: symbol
-> number

;; Return the number of days from January 1 to the start of the named month
in non-leap years

;; Examples:  (days-to-start-of-month 'Jan) is 0; (days-to-start-of-month
'Feb) is 31

(define DAYSINMONTH  '(31 28 31 30 31 30 31 31 30 31 30 31)) ; this
will be useful

No key
currently available.

(m.9)
 Define this function:

;; days-from-jan1: date -> number

;; Return number of days from January 1 of the same year to the specified
date, inclusive

;; Examples: (days-from-jan1 (make-date 'Jan 3 2005)) = 3; (days-from-jan1
(make-date 'Feb 1 2005)) = 32

No key currently available.


(n)
  For each of the two sets of data
shown below, draw the binary search tree that results from inserting the
items in the order shown.  Distinguish left branches clearly from right
branches.

(n.1a) 
(13 19 22 7 17 10 2)   (n.1b)
 (Scheme Python Java Fortran C Basic)

            
 Balanced (2 points)                                       Linear to
the left (2 points)


(n.2)  For each of the trees above,
if you traverse the tree in order, printing each node, what is the result?

(n.2a) [result of (n.1a)]  2
7 10 13 17 19 22   (n.2b)
[result of (n.1b)]
Basic C Fortran Java Python Scheme


(o)  Evaluate each of the following
Scheme expressions:

(o.1)

(local    ((define make-checker 

            (lambda
(threshold)

              
   (lambda (n) (< n threshold))))

          (define a1
(filter (make-checker 6) '(3 1 4 1 5 9 2 6)))

          (define a2
(filter (make-checker 4) '(3 1 4 1 5 9 2 6))))

   (list a1 a2))

((3 1 4 1 5 2) (3
1 1 2)) -- Correct numbers and order, but list structure wrong: -1. 

Branching the wrong
way on equality: another -1

(o.2) 

(local    ((define make-checker

            (lambda
(comparison-op threshold)

              
   (lambda (n) (comparison-op n threshold))))

          (define b1
(filter (make-checker = 1) '(3 1 4 1 5 9 2 6)))

          (define b2
(filter (make-checker >= 3) '(3 1 4 1 5 9 2 6))))

   (list b1 b2))

((1 1) (3 4 5 9 6))
-- Don't deduct again for problems mentioned above.


(p)  This problem involves the restaurant collection program.
 For each part below, indicate your answer by making any additions, changes,
or deletions to the table of data shown in that part.

(p.1) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95<--
remove

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese Pizza   12.00

Mitsuki   Japanese   232-5353   Edamame   4.50

Tommy Tang's   Thai   454-4545   Paht Woon Sen  
8.75<--
remove

Thai Touch   Thai   242-2424
  Larb Guy   9.95<--
remove

Kitayama   Japanese   335-3535
  Okonomiyaki   8.50

What is the result returned by the following
code?  (Show your results by making changes to the table above--change values,
cross lines out, add new lines, as appropriate.)

(define Thai?        
      

   (lambda (R)

      (equal? (rrant-cuisine R)
'Thai)))

(collection-remove C Thai?) 


(p.2) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95

Jacopo's Pizzeria   Pizza   343-3434   Goat Cheese Pizza
  12.00

Mitsuki   Japanese   232-5353   Edamame   4.50<--
remove

Tommy Tang's   Thai  
454-4545   Paht Woon Sen   8.75

Thai Touch   Thai   242-2424   Larb Guy   9.95

Kitayama   Japanese   335-3535   Okonomiyaki   8.50<--
remove

What is the result of the following expression?


(collection-remove C (lambda (R) (equal?
(rrant-cuisine R) 'Japanese)))


(p.3) Suppose the collection C contains
the information shown below.

Thai Dishes   Thai   434-3434   Mee Krob   10.95<--
remove

Jacopo's Pizzeria   Pizza
  343-3434   Goat Cheese PUC Irvine • Information & Computer Science • David G.
  Kay • Informatics 42 • Winter 2012
 Review Questions for the Final Exam
 These questions are representative of actual exam
  questions; most of them have appeared on exams in the past.  But this isn't
  actually a sample exam, since the number and distribution of questions doesn't
  match an actual exam. This document includes more than one question of
  the same type (so you have extra practice for some of the harder concepts). Also, of course, the actual exam may cover any topic from the course, even
  if it's not represented here; some questions about the simulator program are possible, for example.  The overall form of the exam will look
  more or less like last quarter's final (or the quizzes, though of course
  longer). 

  1. We can find
analogies to the classic data structures in the literary world:

(a)  Some large dictionaries and encyclopedias
have thumb tabs for each letter, cut-outs in the edge of the volume so the
reader can turn directly to the first page of listings for that letter.
 Is this access to the beginning of each letter's listings more like
a stack, queue, array, tree, or linked list?

  (b)  When cookbooks describe complicated recipes,
    they break them into sub-recipes, much like procedures in a programming
    language.  Thus, the recipe for a cake might say, "Use the chocolate
    icing recipe on page 23," and that chocolate icing recipe might say
    in turn, "See page 195 for instructions on melting chocolate."
  Which data structure would you use to represent the sequence of recipes
  and sub-recipes being carried out at a given moment, to make it most convenient
  to return to the "calling" recipe when each sub-recipe is completed:
 a stack, queue, array, tree, or linked list?

  (c)  Is a book's table of contents, with
    chapters, sections, and sub-sections, more like a stack, queue, array, tree,
or linked list?

  (d)  Most newspapers run a new crossword puzzle
    every day.  Below the puzzle it generally says, "Solution in tomorrow's
    newspaper."  Is this sequence of puzzles and solutions more like a
stack, queue, array, tree, or linked list?

  (e)  Some people are very rigid about reading
    newspapers in chronological order; they won't read one day's newspaper
    unless they've read all the previous days' papers, in order.  Even
    if days or weeks go by when they don't have time to read the paper,
    they'll save the papers, in order, and read them in order when time
    permits.  Is this arrangement more like a stack, queue, array, tree, or
linked list?

  2.  At right
    is a binary tree.  In what order would its nodes be visited in a  
 

(a)  preorder traversal?     

(b)  postorder traversal?  

(c)  inorder traversal?     

(d)  breadth-first traversal?
 


3.  Draw the binary search tree that results from
inserting these items in this order:  31, 41, 59, 26, 53, 58, 62

4.  Consider
the following function:

int DoSomething (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomething(a-1,
b-1));  

}

(a)  What is returned by each of the following
statements?

   DoSomething(3, 1)

   DoSomething(6, 2)

   DoSomething(29, 5)

   DoSomething(25000, 23000)

(b)  In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.

(c) What are recurrence relations and why do they matter?

(d)  Now look at this function:

int DoSomethingElse (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomethingElse(a,
b-1) - 1);  

}

(d.1)  Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.

  (d.2)  Which of these routines are tail recursive--DoSomething,
  DoSomethingElse,
    neither, or both?  For any non-tail-recursive routine, indicate which specific
operation in its code makes it non-tail-recursive.


  5.  Below is the state transition diagram for an FSA.
    This machine reads a whole word at a time (rather than a character at a
time, as we did in class).







(a)  For each of the following strings, circle ACCEPT
if the FSA above accepts the string and REJECT if it
does not:

   ACCEPT      REJECT  
Jill eats tantrums

   ACCEPT      REJECT   Joe eats loud
big bad big big apples

   ACCEPT      REJECT   Joe throws apples

   ACCEPT      REJECT   Jill eats

   ACCEPT      REJECT   Joe throws loud
loud tantrums

   ACCEPT      REJECT   Jill throws Joe

   


(b)  Draw a transition table for the FSA shown above.
 You may leave transitions to the error state blank rather than writing
in "ERROR."

    Jill   Joe   throws   eats 
 big   bad   loud   tantrums   apples   OTHER

S1_______________________________________________________________________

S2_______________________________________________________________________

S3_______________________________________________________________________

S4_______________________________________________________________________


(c)  Modify the FSA diagram above so that Jane may
also occur anywhere Joe or Jill may occur (in the language accepted by the
FSA).


(d)  Draw a new FSA that accepts the language containing
the following six sentences (and no others):

Joe likes plums      Joe likes big plums
  Joe likes very big plums

   Joe eats plums      Joe eats big plums   Joe
eats very big plums


6.   Below is the state transition diagram for an
FSA.







(a)  Give three examples of strings that the machine
described above accepts.
 

(b)  Give three examples of strings (using the same
alphabet) that the machine described above rejects.
(c)  In one brief English sentence, describe the language
that this machine implements.


(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.


(e)  Modify the FSA diagram above so that it accepts
the language a*(bc)a*
(that is, any string of zero or more 'a's,
followed by a b
or a c,
followed by zero or more 'a's).
 You may draw your answer on the printed diagram.


(f)  Draw a state transition table below that reflects
the new machine described above in part (e).   


7.  One way to represent transitions in a finite-state
machine is in a transition table; the entries in the table show the machine's
next state, given its current state and a particular input.  The
table at left below implements the machine shown at right below.








(a)  Give four examples of strings that the machine
described above accepts.
 

(b)  Give four examples of strings (using the same
alphabet) that the machine described above rejects.
 

(c)  In one brief English sentence, describe the language
that this machine implements.
 

(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.
 
 

(e)  Modify the FSA diagram above so that it accepts
the language (a*bc)*
(that is, any string of zero or more parts, where each part contains any
number of 'a's
followed by a 'b'
and a 'c').1

(f)  Modify the transition table above to reflect
the new machine described in part (e).
 



8.  Below is a finite-state machine that accepts telephone
numbers ('digit' means any decimal digit, 0-9):




(a)  Draw the state transition table for this FSA.
 You may leave blank any unspecified transitions; you may omit the error
state.  We have supplied horizontal lines; you will supply the vertical
lines and everything else.  (Hint:  Don't treat all digits the same.)

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________


(b)  Following the approach shown in class, which
of the statements shown below could be part of a program to implement an
FSA with a transition table?  Circle the one best answer.

   A.   Table[state][token]
= state;

   B.   state
= (Table[state][token])++;

   C.   Table[state][token]
= Table[state++][token]; 

   D.   (Table[state][token])++;

   E.   state
= Table[state][token];
   F.
  token = Table[state][token];

Below is a BNF grammar that also describes telephone
numbers:

   <phone number>  
::=   <local number> | <area
code> <local number>

   <area code>      ::=   1
( <digit> <digit>
<digit> ) 

   <local number>
  ::=   <exchange> <hyphen> <number>

   <exchange>      ::=   <digit> <digit>
<digit>

   <hyphen>       ::=   -

   <number>
     ::=   <digit> <digit> <digit> <digit>

   <digit>      ::=   0
| 1 | 2 | 3 | 4 | 5 | 6 | 7
| 8 | 9 

(c) Unfortunately, the BNF grammar and the FSA (reproduced
again below for convenience) do not both specify the same "language."
 For each string listed below, 

* circle VALID
IN BNF or
INVALID IN BNF to indicate
which strings can be generated from <phone number> in the grammar
given above, and

* circle
ACCEPTED BY FSA or
REJECTED BY FSA to indicate
which strings would be accepted by the FSA.

VALID IN BNF   INVALID
IN BNF   824-5072
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   123-4567
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   411
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   2-9-7689
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   (310)825-2695
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   1(000)000-0000
  ACCEPTED BY FSA   REJECTED
BY FSA




(d)  Modify the FSA (by drawing on the diagram above)
so that it accepts exactly the same phone numbers as the BNF grammar accepts.

9.  Suppose you have a conventional stack with operations
push, pop, and top. 

(a) What is printed by the following sequence of operations?

push(5); push(4); print(top()); push(7); push(12);
pop; print(top()); print(top()); pop(); 

(b) What are the contents of the stack at the end
of the sequence of operations?  Mark clearly the top and bottom of the stack.

10.  Give the recurrence relation that describes the
execution time of the second routine shown below, the Print
member function of the Collection
 class, counting println
statements.  Just give the recurrence; you don't have to solve it.

def print():  # member function of restaurant

Â Â  print("Name: " + name)

Â Â  print("Cuisine: " + cuisine)

Â Â  print("Phone: " + phone)

Â Â  print("Best dish: " + dish)

Â Â  print("Price: " + price)



def Print():  # method of a restaurant _collection_

Â Â  if self.IsEmpty():  # if this collection is empty,

Â Â  Â  print()           # print a newline.

Â Â  else:	   Â Â    # else print the first restaurant

Â Â  Â  First().Print()    # in the collection

Â Â  Â  Rest().Print()     # and then print the rest of 				 		# collection (recursively)




  11.  For each
    of the following code segments, give the average-case run-time polynomial
    and the O-notation.  Count each line that contains an assignment statement
    (except those controlling for-loops), a procedure call, or an input/output
statement.

Example:

print("This line is executed only once.")

total = 0

for i in range(n):

Â  Â    x = readAnInteger()    # count this line once

Â Â  total += x

Â Â  if i % 2 == 0: 

   Â Â  print(x)

print("Total: ")

print(total)

print("The end.")


  Example answer:  Runtime polynomial:  2 +
n (2 + 1/2) + 3, which is 2.5n + 5; O(n).

(a) 

for i in range(n):

Â  for j in range(n, 1, -1):

  Â  for k in range(n//2):

    Â  Data[i][j][k] = i + j + k;

print("On the whole, I'd rather be in Philadelphia.");
 


(b)
print("With more powerful tools ")

print("comes the power to screw up ")

print("in new and more spectacular ways.")

a = 1

while a 
 

(c)
print("Now, the Star-Belly Sneetches had bellies with stars.")

print("The Plain-Belly Sneetches had none upon thars.")

a = 1

while a 
 


(d)  Suppose that all three of the above program
segments were included in one function.  What would the O-notation of that
function be?
 

  12.  (a) 
  One way to implement a priority queue is in
    a binary search tree ordered by priority value, where each node of the tree
    (representing a distinct priority value) stores all the items with the same
    priority, in a linked list ordered by "arrival time."  Shown is
    a diagram of this approach, after the following [priority, item] pairs have
  been enqueued:  [5,A]   [8,B]   [5,D]   [2,E]   [7,F]  [7, G].
      On the diagram above, draw the results
of enqueueing these items:  [8,K]  [2,M]  [3,P]

(b.1)  You are designing some web server software
that will handle thousands of requests for information from your web site.
 You decide that those requests should be prioritized-- perhaps system troubleshooting
receives top priority, full-rate-paying customers receive next priority,
discount customers receive lower priority, and guests receive the lowest.

You decide to use a priority queue for these
requests, and you consider three different data structures for implementing
it:

Structure I:  An unordered array where each
element contains a priority, the time the request arrived, and the other
information about a request; you also have an additional field that contains
the number of requests currently stored.

Structure II:  A binary search tree as described
above.  (You may assume that priority nodes never get deleted--they just
may have empty item lists after all items with that priority are dequeued.)

Structure III:  A linear linked list, completely
ordered (by priority, and for equal priorities by arrival time) so that
the correct item to dequeue is always at the front.

In the table below, fill in the O-notation
for the execution time of each specified operation on each alternative data
structure in the average case.  Assume that on average there are r
requests in the whole data structure, i different items that have
each different priority value, and p different priority values; use
whichever of these variables are appropriate in your answers.  Also assume
that each operation is implemented as efficiently as possible in Java (without
adding unspecified variables or otherwise changing the structure described).

Operations:
Structure I
Structure II
Structure III
Front (number of comparisons)
O( )
O( )
O( )
Enqueue (number of comparisons)
O( )
O( )
O( )
Enqueue (number of data movements)
O( )
O( )
O( )
Dequeue (number of comparisons)
O( )
O( )
O( )
Dequeue (number of data movements)
O( )
O( )
O( )
SizeOf (number of comparisons)
O( )
O( )
O( )

(b.2)  In terms of r, i, and p
as appropriate, what is the O-notation for the storage required by each
structure?  Assume also that the array has a maximum size of a.

Storage required
O( ) 
O( )
O( )

(c.1)  If your priority queue gets very large,
which structure provides the fastest enqueueing?

 

(c.2)  If your priority queue gets very large,
which structure provides the fastest dequeueing?

 

(c.3)  If your priority queue gets very large,
which structure provides the best overall performance on enqueueing and
dequeueing?

 

(d)  Give the most convincing real-world example
you can (not necessarily web server software) for implementing a priority
queue that ...

(d.1) enqueues as quickly as possible (with
other operations' performance less important), as in (c.1)

 (d.2) dequeues as quickly as possible (with
other operations' performance less important), asUC Irvine • Information & Computer Science • David G.
  Kay • Informatics 42 • Winter 2012
 Review Questions for the Final Exam (with Answers)
 These questions are representative of actual exam
  questions; most of them have appeared on exams in the past.  But this isn't
  actually a sample exam, since the number and distribution of questions doesn't
  match an actual exam. This document includes more than one question of
  the same type (so you have extra practice for some of the harder concepts). Also, of course, the actual exam may cover any topic from the course, even
  if it's not represented here; some questions about the simulator program are possible, for example.  The overall form of the exam will look
  more or less like last quarter's final (or the quizzes, though of course
  longer). 

  1. We can find
analogies to the classic data structures in the literary world:

(a)  Some large dictionaries and encyclopedias
have thumb tabs for each letter, cut-outs in the edge of the volume so the
reader can turn directly to the first page of listings for that letter.
 Is this access to the beginning of each letter's listings more like
a stack, queue, array, tree, or linked list?

Array:  Direct access

(b)  When cookbooks describe complicated recipes,
they break them into sub-recipes, much like procedures in a programming
language.  Thus, the recipe for a cake might say, "Use the chocolate
icing recipe on page 23," and that chocolate icing recipe might say
in turn, "See page 195 for instructions on melting chocolate."
 Which data structure would you use to represent the sequence of recipes
and sub-recipes being carried out at a given moment, to make it most convenient
to return to the "calling" recipe when each sub-recipe is completed:
 a stack, queue, array, tree, or linked list?

Stack:  saving the
context

(c)  Is a book's table of contents, with
chapters, sections, and sub-sections, more like a stack, queue, array, tree,
or linked list?

Tree:  it's hierarchical

(d)  Most newspapers run a new crossword puzzle
every day.  Below the puzzle it generally says, "Solution in tomorrow's
newspaper."  Is this sequence of puzzles and solutions more like a
stack, queue, array, tree, or linked list?

Linked list:  It points
to the next item

(e)  Some people are very rigid about reading
newspapers in chronological order; they won't read one day's newspaper
unless they've read all the previous days' papers, in order.  Even
if days or weeks go by when they don't have time to read the paper,
they'll save the papers, in order, and read them in order when time
permits.  Is this arrangement more like a stack, queue, array, tree, or
linked list?

Queue:  First in,
first out.

2.  At right
is a binary tree.  In what order would its nodes be visited in a  
 

(a)  preorder traversal?      KIEFJGCDABH

(b)  postorder traversal?   EFICABDGHJK

(c)  inorder traversal?      EIFKCGADBJH

(d)  breadth-first traversal?
     KIJEFGHCDAB


3.  Draw the binary search tree that results from
inserting these items in this order:  31, 41, 59, 26, 53, 58, 62

4.  Consider
the following function:

int DoSomething (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomething(a-1,
b-1));  

}

(a)  What is returned by each of the following
statements?

   DoSomething(3, 1)

   DoSomething(6, 2)

   DoSomething(29, 5)

   DoSomething(25000, 23000)

(b)  In one English word (or in mathematical
notation), describe the value this function returns in terms of its arguments.

Subtraction:   a -
b

(c) What are recurrence relations and why do they matter?
A recurrence relation is a representation of the operations required by some recursive code, typically stated in terms of the base case and in terms of the recursive case. It is relatively easy to determine the recurrence relation from the code itself. It takes a little effort to "solve" the recurrence relation, converting it into "closed form" (a polynomial), but once you have the polynomial you can easily determine the O-notation.

(d)  Now look at this function:

int DoSomethingElse (int a, int b)

// precondition:  assume b >= 0

{  if ( b == 0 )

      return (a);  


   else 

      return (DoSomethingElse(a,
b-1) - 1);  

}

(d.1)  Does DoSomethingElse
produce the same results as DoSomething?
 If not, explain how the results differ.

Yes, they produce
the same results.

(d.2)  Which of these routines are tail recursive--DoSomething,
DoSomethingElse,
neither, or both?  For any non-tail-recursive routine, indicate which specific
operation in its code makes it non-tail-recursive.

DoSomethingElse is
not tail-recursive because of the last subtraction (which is done after
returning from the recursive call).


5.  Below is the state transition diagram for an FSA.
 This machine reads a whole word at a time (rather than a character at a
time, as we did in class).







(a)  For each of the following strings, circle ACCEPT
if the FSA above accepts the string and REJECT if it
does not:

   ACCEPT      REJECT  
Jill eats tantrums

   ACCEPT      REJECT   Joe eats loud
big bad big big apples

   ACCEPT      REJECT   Joe throws apples

   ACCEPT      REJECT   Jill eats

   ACCEPT      REJECT   Joe throws loud
loud tantrums

   ACCEPT      REJECT   Jill throws Joe

   


(b)  Draw a transition table for the FSA shown above.
 You may leave transitions to the error state blank rather than writing
in "ERROR."

    Jill   Joe   throws   eats 
 big   bad   loud   tantrums   apples   OTHER

S1_______________________________________________________________________

S2_______________________________________________________________________

S3_______________________________________________________________________

S4_______________________________________________________________________


(c)  Modify the FSA diagram above so that Jane may
also occur anywhere Joe or Jill may occur (in the language accepted by the
FSA).


(d)  Draw a new FSA that accepts the language containing
the following six sentences (and no others):

Joe likes plums      Joe likes big plums
  Joe likes very big plums

   Joe eats plums      Joe eats big plums   Joe
eats very big plums


6.   Below is the state transition diagram for an
FSA.







(a)  Give three examples of strings that the machine
described above accepts.

aba, aaaaaba, abaaaaa,
aaabaaa

(b)  Give three examples of strings (using the same
alphabet) that the machine described above rejects.

a, ab, ba, aaaab,
hello

(c)  In one brief English sentence, describe the language
that this machine implements.
A b surrounded with one or more a's on each end. 


(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.
 aa*baa*


(e)  Modify the FSA diagram above so that it accepts
the language a*(bc)a*
(that is, any string of zero or more 'a's,
followed by a b
or a c,
followed by zero or more 'a's).
 You may draw your answer on the printed diagram.


(f)  Draw a state transition table below that reflects
the new machine described above in part (e).   


7.  One way to represent transitions in a finite-state
machine is in a transition table; the entries in the table show the machine's
next state, given its current state and a particular input.  The
table at left below implements the machine shown at right below.








(a)  Give four examples of strings that the machine
described above accepts.

ab, abab, abab, empty

(b)  Give four examples of strings (using the same
alphabet) that the machine described above rejects.

a, aba, abb, baa

(c)  In one brief English sentence, describe the language
that this machine implements.

Any sequence (zero
or more) of ab strings.

(d)  Describe this language using a regular expression--that
is, using just the input symbols, parentheses, the union symbol, and asterisks.
 

(ab)*

(e)  Modify the FSA diagram above so that it accepts
the language (a*bc)*
(that is, any string of zero or more parts, where each part contains any
number of 'a's
followed by a 'b'
and a 'c').
 Init:  S1.    Accept:  S1.      S1:  a --> S1, b --> S2     S2: c-->
S1

(f)  Modify the transition table above to reflect
the new machine described in part (e).

   a  
b   c

S1   S1  
S2   xx

S2   xx  
xx   S1


8.  Below is a finite-state machine that accepts telephone
numbers ('digit' means any decimal digit, 0-9):




(a)  Draw the state transition table for this FSA.
 You may leave blank any unspecified transitions; you may omit the error
state.  We have supplied horizontal lines; you will supply the vertical
lines and everything else.  (Hint:  Don't treat all digits the same.)

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________

_______________________________________________________________


(b)  Following the approach shown in class, which
of the statements shown below could be part of a program to implement an
FSA with a transition table?  Circle the one best answer.

   A.   Table[state][token]
= state;

   B.   state
= (Table[state][token])++;

   C.   Table[state][token]
= Table[state++][token]; 

   D.   (Table[state][token])++;

   E.   state
= Table[state][token];
   <-- This one

   F.
  token = Table[state][token];

Below is a BNF grammar that also describes telephone
numbers:

   <phone number>  
::=   <local number> | <area
code> <local number>

   <area code>      ::=   1
( <digit> <digit>
<digit> ) 

   <local number>
  ::=   <exchange> <hyphen> <number>

   <exchange>      ::=   <digit> <digit>
<digit>

   <hyphen>       ::=   -

   <number>
     ::=   <digit> <digit> <digit> <digit>

   <digit>      ::=   0
| 1 | 2 | 3 | 4 | 5 | 6 | 7
| 8 | 9 

(c) Unfortunately, the BNF grammar and the FSA (reproduced
again below for convenience) do not both specify the same "language."
 For each string listed below, 

* circle VALID
IN BNF or
INVALID IN BNF to indicate
which strings can be generated from <phone number> in the grammar
given above, and

* circle
ACCEPTED BY FSA or
REJECTED BY FSA to indicate
which strings would be accepted by the FSA.

VALID IN BNF   INVALID
IN BNF   824-5072
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   123-4567
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   411
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   2-9-7689
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   (310)825-2695
  ACCEPTED BY FSA   REJECTED
BY FSA

VALID IN BNF   INVALID
IN BNF   1(000)000-0000
  ACCEPTED BY FSA   REJECTED
BY FSA




(d)  Modify the FSA (by drawing on the diagram above)
so that it accepts exactly the same phone numbers as the BNF grammar accepts.

9.  Suppose you have a conventional stack with operations
push, pop, and top. 

(a) What is printed by the following sequence of operations?

push(5); push(4); print(top()); push(7); push(12);
pop; print(top()); print(top()); pop(); 

(b) What are the contents of the stack at the end
of the sequence of operations?  Mark clearly the top and bottom of the stack.

10.  Give the recurrence relation that describes the
execution time of the second routine shown below, the Print
member function of the Collection
 class, counting println
statements.  Just give the recurrence; you don't have to solve it.

def print():  # member function of restaurant

Â Â  print("Name: " + name)

Â Â  print("Cuisine: " + cuisine)

Â Â  print("Phone: " + phone)

Â Â  print("Best dish: " + dish)

Â Â  print("Price: " + price)



def Print():  # method0 of a restaurant _collection_

Â Â  if self.IsEmpty():  # if this collection is empty,

Â Â  Â  print()           # print a newline.

Â Â  else:	   Â Â    # else print the first restaurant

Â Â  Â  First().Print()    # in the collection

Â Â  Â  Rest().Print()     # and then print the rest of 				 		# collection (recursively)



  R(0) = 1; R(n) = 5
+ R(n-1)

11.  For each
of the following code segments, give the average-case run-time polynomial
and the O-notation.  Count each line that contains an assignment statement
(except those controlling for-loops), a procedure call, or an input/output
statement.

Example:

print("This line is executed only once.")

total = 0

for i in range(n):

Â  Â    x = readAnInteger()    # count this line once

Â Â  total += x

Â Â  if i % 2 == 0: 

   Â Â  print(x)

print("Total: ")

print(total)

print("The end.")


  Example answer:  Runtime polynomial:  2 +
n (2 + 1/2) + 3, which is 2.5n + 5; O(n).

(a) 

for i in range(n):

Â  for j in range(n, 1, -1):

  Â  for k in range(n//2):

    Â  Data[i][j][k] = i + j + k;

print("On the whole, I'd rather be in Philadelphia.");

n * n * n/2 + 1
= n^3/2 + 1 = O(n^3)


(b)
print("With more powerful tools ")

print("comes the power to screw up ")

print("in new and more spectacular ways.")

a = 1

while a 

4 + n*(1 + n *
(1/2(1 + 1))+1+1) + 1 = n^2 + 3n + 5 = O(n^2)

(c)
print("Now, the Star-Belly Sneetches had bellies with stars.")

print("The Plain-Belly Sneetches had none upon thars.")

a = 1

while a 

  3 + log n*(1 + n*(1
+ 1) + 64000/2*(1 + 1)+ 1) + 2 = 2n log n + 64002 log n + 5 = O(n log n).

Don't deduct more
than 1/2 point for simply wrong arithmetic.


(d)  Suppose that all three of the above program
segments were included in one function.  What would the O-notation of that
function be?

O(n^3)--whatever
the highest-order term is in any of the parts.

12.  (a) 
One way to implement a priority queue is in
a binary search tree ordered by priority value, where each node of the tree
(representing a distinct priority value) stores all the items with the same
priority, in a linked list ordered by "arrival time."  Shown is
a diagram of this approach, after the following [priority, item] pairs have
been enqueued:  [5,A]   [8,B]   [5,D]   [2,E]   [7,F]  [7, G].
 On the diagram above, draw the results
of enqueueing these items:  [8,K]  [2,M]  [3,P]

(b.1)  You are designing some web server software
that will handle thousands of requests for information from your web site.
 You decide that those requests should be prioritized-- perhaps system troubleshooting
receives top priority, full-rate-paying customers receive next priority,
discount customers receive lower priority, and guests receive the lowest.

You decide to use a priority queue for these
requests, and you consider three different data structures for implementing
it:

Structure I:  An unordered array where each
element contains a priority, the time the request arrived, and the other
information about a request; you also have an additional field that contains
the number of requests currently stored.

Structure II:  A binary search tree as described
above.  (You may assume that priority nodes never get deleted--they just
may have empty item lists after all items with that priority are dequeued.)

Structure III:  A linear linked list, completely
ordered (by priority, and for equal priorities by arrival time) so that
the correct item to dequeue is always at the front.

In the table below, fill in the O-notation
for the execution time of each specified operation on each alternative data
structure in the average case.  Assume that on average there are r
requests in the whole data structure, i different items that have
each different priority value, and p different priority values; use
whichever of these variables are approprINFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 8 

This assignment is due at the end of lab on
Wednesday, November 23, which is the day before Thanksgiving. 

Choose a partner for this twelve-day assignment, someone
you haven't worked with already. Choose someone whose Thanksgiving schedule is compatible with yours; if you won't be here for lab on the day before Thanksgiving (when the lab is due), pick someone who's able to work with you for a few extra out-of-lab hours before then.
(a) We have posted some code to implement parts of a music-playing application like iTunes.  This is similar to the code we developed in class. You should download, install, and run this code now. And then you should read it. Reading code is an important skill,  one that beginning programmers ignore all too often. Sure, code isn't as easy to read as a novel; you need to go over it carefully and ask yourself what it does and how it works. Don't let this intimidate you! Just take it one function at a time.
We used  the following data definitions to define a music collection in the form of "albums of songs":

   A music collection is a list of albums.
    An album is a number (a unique ID number), a string (the artist's name), a string (the title), a number (the year), and a list of songs.
    A song is a  number (the track number), a string (the title), a number (the length in seconds), and a number (the play count, indicating how many times the song has been played).
  These data definitions led us to write these structure definitions:
  (define-struct album (id artist title year songs))
    (define-struct song (track-num title length play-count))

(a.1) We wrote a function called top-10-songs, which finds the songs in a music collection that have the ten highest play counts.  Generalize this function as top-n-songs, which takes a number n and a list of albums and returns a list of the n songs with the highest play count.  This is simple given the existing code.
(a.2) Write a function unplayed-songs, which takes a list of albums and returns a list of the songs that have never been played.
(a.3) Write a function favorite-album, which takes a list of albums and returns the album that is the "favorite."  We'll define the "favorite" album to be the one that the user has spent the most time listening to.  (Hint: The total time the user has spent listening to an album is a function of the play counts and song lengths.)
Try to work out this function out together; that's how you learn. Use the following hints only if you're totally stuck (and then take them just one at a time): (i) Write a function song-listening-time, which takes a single song and returns the total number of seconds the user has spent listening to it (see the hint above). (ii) Write a function album-listening-time, which returns the total listening time for all the songs in an album together. (iii) Write a function album-listening-time>?, which takes two albums and returns true if the total listening time of the first album is greater than the total listening time of the second. (iv) Use quicksort and first-n and the functions you defined to implement favorite-album.
(a.4) Time spent listening to an album isn't the only metric for defining a "favorite" album.  Generalize your favorite-album function so that it takes another argument, a "favorite measurement function"; that way, favorite-album can be called with any metric for determining the favorite.  (Before you get too far, consider what the appropriate contract for the favorite function might be, if the goal is to find the one and only favorite, rather than a list of many albums that the user likes.)  Add a comment after your generalized function that suggests, in English, at least two other ways to define a favorite album; show, for each of your suggestions, how you would call your generalized function to find the favorite album according to your suggestion.
(a.5) One useful option that iTunes provides is a "Search" box, into which you can type a keyword, and iTunes will automatically search your collection for songs containing that keyword in their title, their artist, or their album's title.  Implement a function music-search that does the same, returning a list of matching songs given a string containing the search keyword.  (You'll likely find the string processing code from Lab 6 helpful; in fact, this entire task is quite similar to a task you did for Lab 6.)
 Submit your definitions via Checkmate.
 (b) Three of the five functions you wrote in part (a) return a list of songs.  Unfortunately, our "album of songs" model for a music collection has a drawback: An individual song by itself doesn't contain enough information to display it usefully (on an iPod screen or on a web page, for example) because the album information is not included.  In the code, we solved this problem by introducing a new structure definition that combines information about a song and the album that contains it.  That definition looks like this:

    (define-struct song-display (artist a-title year track-num s-title length play-count))

Rewrite top-n-songs, unplayed-songs, and music-search so that they each return a list of song-displays, rather than a list of songs.  (Note that if you solved top-n-songs and unplayed-songs using a similar technique to the one we used for top-10-songs, you'll find that you don't have to change very much of your existing code to make this work.  On the other hand, it's likely that music-search can be significantly simplified.)
 Submit your definitions via Checkmate.
 (c) We have talked often in class about how the model (the data structure) that you choose to represent your data can  have a profound impact on how hard it is to operate on that data—how difficult it will be to write the code and also how much time it will take for the computer to execute it.  Sometimes, the data model you choose may even make some tasks impossible or too inefficient (e.g., you can't search an unordered list in logarithmic time).
Let's consider three ways that we might model a music collection.  (This is hardly an exhaustive list, but it includes three alternatives that are available to us based on what we've learned so far this quarter.)
The "album of songs" model we used in parts (a) and (b), where a music collection is a list of albums, each of which contains a list of songs.The "list of songs" model, where a music collection is represented as a list of song-displays, using the definition of song-display from part (b).The "BST of albums of songs" model, where a music collection is a binary search tree of albums, each of which contains a list of songs, implemented using the following structure definitions: 
      
    (define-struct node (value left right))
    (define-struct album-info (id artist title year songs))
    (define-struct song-info (track-num title length play-count))
      Each node in the binary search tree contains one album as its value.  The albums are sorted in order by the albums' names.  An empty binary search tree is represented by empty.
 (c.1) Using the "albums of songs" model, write the function album-names, which takes a music collection and returns a list of the names of all albums in the collection.
 (c.2) Write the album-names function again, this time so it takes a music collection in the "list of songs" model.  A particular album name should only appear once in the output list.
 (c.3) Write the album-names function one more time, this time so it takes a "BST of albums of songs."
 (c.4) All three of these functions have the same basic contract—take a music collection as input and return a list of the names of all the albums in the collection—but they differ in terms of how they expect the collection to be organized.  Will all three functions give the same output if given the same input collection?  If not, what will be different about the output of one as opposed to the others?  What does your answer to these questions suggest about which of the models are appropriate to use in an actual music application like iTunes?
 (c.5) Which of the models would you expect to enable the best implementation of a fiICS H21 • UC IRVINE • DAVID G. KAY • FALL 2009
Lab Assignment 9
This assignment is due at the end of lab on
  Friday, December 4.  

  Choose a partner for this assignment, someone
you haven't worked with already.
(a) Do exercises 35.2.2, 35.2.3, and
35.4.1. Then do exercises 37.5.1, 37.5.2, and 37.5.3.
 Submit your definitions via Checkmate.
(b) Professor Andrea Anteater wants you to design
  a grade management system for her students in Applied Epistemology 101.
  This system will read and write students' scores from a file and allow
  the user to produce statistics and histograms (frequency graphs) of the
scores.
 Your task this week is to create this program
  from scratch.  It's not really from scratch, though:  We provide a set
  of specifications for you to implement and you can use all of the example
  programs we've seen all quarter.  Hardly any programming today is totally
  from scratch; we have application frameworks (skeleton programs with all
  the infrastructure supplied), we have function libraries that provide commonly
  useful tasks, we have object libraries and class hierarchies that we can
  adopt and adapt to our own purposes.
 To help you along, here are five pieces of
  development advice:
 Read the specifications carefully, more
    than once.  Technical documents must be milked for all the detailed information
    they contain; you can't just read them one time quickly, like a mystery
    novel. Follow the model-view-controller organization;
    have a separate top-level "front end" part of your program (the view and controller part) that handles interaction
    with the user and a "back end" part (the model) that implements the operations
    on the different classes of data. As you build the "model" part
    of the program, follow the design recipes, especially for creating examples
    and tests in advance.How do you know if you have enough tests, or the right tests? One simple measure of test effectiveness is called "code coverage"—your tests should, at the very least, evaluate each expression in the code. DrScheme helps you with this: After running your program, if you haven't tested every expression, some of the code appears highlighted in black. The highlighted code hasn't been evaluated, so you should add  tests to exercises those parts of the program. Implement one small feature at a time, test
    it thoroughly, and then save a copy of your program so far.  That way, if
    your next phase of development runs into trouble, you can "roll back"
    to the previous version and start over.
 You'll be using Advanced Student Scheme
  for this program, with the advanced-file-io.ss teachpack. (Download the file; don't just copy and paste the code.)
(b.1) Your program will handle these
  classes of data: 
 Assignments, each represented by a name, a
    weight in computing the course grade [the weights of all assignments should
    sum to 100, though we're not requiring you to check this], and a number
    of points possible [which is independent of the weight; a three-point assignment
    could be worth 50% of the course grade].  ("Graded item" would
    be a better term, since it includes things like exams and projects.  But
    we'll use "assignment" just because it's shorter.)
   A collection of assignment descriptions that
    together describe the graded items in the course
    
   Students, each represented by a name, an ID
    number, and a vector of scores (which should be the same size as the collection
    of assignments, one score for this student on each assignment)
   A collection of students
 To start out, make sure you understand these
  data structures:  Make up some examples; draw a picture; get comfortable
  with how they're organized.  Then you'll want to define functions
  that create objects in each of these classes (these can be quite simple)
  and that display those objects. [Note on terminology]
 (b.2) When your program starts, it will
  read the collection of assignments from a plain text file called Assignments.txt.
    (If you place your program file and these data files in the same directory/folder,
    DrScheme will find them without your having to do anything fancy.)  Then
    it will read the collection of students from a text file called Students.txt.
      Since the user can create these files without knowing any Scheme, your
      program won't have to handle changes to the data (although that's
      an enhancement we discuss below).
 The user can create these files using a plain
  ASCII text editor like NotePad (or from Word by using Save As and the Text
  Only format, which saves plain ASCII without the additional Word formatting
  information that your program can't read). 
 For a course with a 75-point midterm worth
  40% of the grade and a 100-point final worth 60%, the assignments file would
  look like this:
2 
  Midterm Exam
  40 75
  Final Exam
  60 100
 The first line contains the number of assignments.
  Then each assignment has two lines, the first containing the assignment's
  name and the second containing two numbers, the weight followed by the possible
  points.
 A file of students for this course would look
  like this:
2
  Aardvark, Aaron
  11223344
  68 85
  Tapir, Tamara
  44332211
  74 92
 The first line contains the number of students.
  Then each student has three lines, the first containing the student's
  name, the second containing the student's ID, and the third containing
  the student's scores on each assignment, in order.
 As you read these files, remember that the read-line function reads an entire line of input and returns a string (this is useful
  for reading strings that may contain blanks, without requiring the user
  to enclose the strings in quotation marks).  The read function reads the next Scheme expression (e.g., a single number) from the
    input.  You'll also want to call read-line (ignoring its return value) after reading numbers from a line; this will
      put you at the start of the next line so you're ready to read what's
      there.   Some sample code using read-line is available. 
[This organization of the input files should make it easy for you to use read and read-line to create the internal representation of the data in your program; your task is to fit these components together, and you should spend some time trying to do that. But if you decide you need some additional guidance, start here: (a) As always when designing programs with more than one "layer" of data structures, you should treat one layer at a time. For the file of students, for example, you should have a function to read and create the collection of n students (where n is the number specified on the first line of the file); that function will call a function to read and create the strucure for one student; that function, in turn, will call a function to read m numbers from one line (where m is the number of assignments, from the first line of the assignments file) and create a vector of those scores. (b) Make sure you understand how to use read and read-line: Choose the right function for the right kind of data, as described above.]
 Define functions that will fill the assignment
  and student collections by reading these files. It will also be helpful to write functions that print out these collections legibly; they'll help you in testing.
 (b.3) Since assignments don't necessarily
  all have the same number of points possible, it will be useful to compute
  and store a scaled score on each assignment (i.e., a number from 0 to 100,
  calculated from the student's raw score and the number of points possible
  on the assignment).  It might be easiest to implement this by storing for
  each student a second, parallel vector of scaled scores.
 You should also compute and store for each
  student the weighted overall score in the course, a number from 0 to 100
  calculated from the scaled scores and the weights of each assignment.
 To make the output look reasonable, use the
  function format-decimal. It takes two numbers (the first is the value to display, the second is
    the number of digits after the decimal point) and returns a string, suitable
    for usAll the articles for the quarter are now
listed here.

Overview of the readings:  The course
textbook, Sara Baase's A Gift of Fire, gives a complete, balanced
overview of many of the issues we're covering.  We recommend reading
the designated sections before reading the articles listed below, although
you are not required to include in your course notebook any summaries or
reactions to your readings in the Baase book.

Aside from the Baase textbook, all the required
readings are listed below. (We may add to the list as the quarter progresses;
look for the "New" icons.)  We expect you to read each listed
article by the date specified and to include for each article an entry in
your course notebook.  See the Course Notebook
page for the detailed requirements.

As you read these articles, consider not only
the content but also the source.  Who's the author?  Can you determine
his or her qualifications, background, or job?  What's the date of the
article?  What kind of publication does it come from:

Newspapers (like the Los Angeles Times
or the New York Times); these articles will generally be easy to
read but not especially deep.  Some will be straight news reporting; others
will be opinion pieces.

Other publications for the general public
(like The New Yorker magazine)

Professional society journals (like the Communications
of the ACM or IEEE Software), where articles are typically written
for readers with a technical background by the people who have done the
work described. Journal articles are typically reviewed by technical experts
before publication.

Reports from NGOs (non-governmental organizations)
like the Electronic Frontier Foundation; these organizations often advocate
a particular point of view.

Textbooks, where the author generally intends
to provide a complete, balanced treatment of a topic

This collection includes a mix of these sources;
occasionally you'll even see the same topics covered from different
sources' perspectives; as you write your notebook, you can indicate
these differences in treatment.

Access to the readings:  Most of these
readings are available on the web via the links given below.  The others
are available in the bookstore or in the ICS 131 Reading Packet available
from the Engineering Copy Center, as noted.

Most of the web-based readings are available
through the UCI Library's article databases, which means they're
not freely available to the public.  You can get access to those links with
no trouble from computers on campus, but for access from home or anywhere
else, you'll need to set up a Virtual Private Network (VPN) using free
software available from UCI's NACS (for Windows, Linux, or MacOS X).
 NACS has a page describing how to download and install the VPN software:
http://www.nacs.uci.edu/security/vpn.html
.  We have found this process to work smoothly, but you should set it up
and test it immediately so that you don't run into problems too close
to the deadline.  We won't accept last-minute technical problems as
an excuse for late notebooks.  Note, too, that web sites are sometimes unavailable,
so it would be wise not to wait until the very last minute to read or download
the articles.

Exam questions about the readings:
 The questions on the exams that we ask about the readings will focus on
each item's main ideas and arguments, not on small details.  If the
annotations below point out some particular aspect of an article, be sure
to pay attention to that aspect.


Introduction:  Baase chapter 1.


Electronic voting  (Read these by the
start of the second week, to prepare for the first writing assignment) 
(Include all of the following readings in Notebook Installment #1, April
20)

National Commission on Federal Election Reform,
"Summary of Principal Recommendations,"  http://www.reformelections.org/data/reports/98_summary.pdf

David L. Dill, Bruce Schneier, and Barbara
Simons, "Voting and Technology: Who Gets to Count Your Vote?",
Communications of the ACM, August 2003, http://portal.acm.org/ft_gateway.cfm?id=859692&type=pdf&coll=portal&dl=ACM&CFID=21052778&CFTOKEN=71245790

Kevin Shelley, "Secretary of State's
Ad Hoc Touch Screen Task Force Report," http://www.ss.ca.gov/elections/taskforce_report_entire.pdf

Lance J. Hoffman and Lorrie Cranor, "Internet Voting for Public Officials,"
Communications of the ACM, January 2001, http://portal.acm.org/ft_gateway.cfm?id=357510&type=pdf&coll=ACM&dl=ACM&CFID=20014976&CFTOKEN=98919689

Joe Mohen and Julia Glidden, "The Case for Internet Voting,"
Communications of the ACM, January 2001.  Note that this article and the
next one run in parallel through the pages of the magazine.  http://portal.acm.org/citation.cfm?id=357511&coll=ACM&dl=ACM&CFID=20014976&CFTOKEN=98919689

Deborah M. Phillips and Hans A. von Spakovsky,
"Gauging the Risks of Internet Elections,"
Communications of the ACM, January 2001.  Pay close attention to the affiliations
of the authors of these two articles. http://portal.acm.org/citation.cfm?id=357512&coll=ACM&dl=ACM&CFID=20014976&CFTOKEN=98919689

Dana Canedy, "Vote System Chaos Triumphs Again in Florida Election,"
New York Times, 11 September 2002. What does this article tell us about
how easy it is to implement new technologies?  http://proquest.umi.com/pqdweb?index=0&did=000000167996631&SrchMode=1&sid=8&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081363211&clientId=1568

Rebecca Mercuri, "Florida 2002: Sluggish Systems, Vanishing Votes,"
Communications of the ACM, November 2002, http://portal.acm.org/ft_gateway.cfm?id=581610&type=pdf&coll=ACM&dl=ACM&CFID=20014976&CFTOKEN=98919689

Aviel D. Rubin, "Security Considerations for Remote Electronic Voting,"
Communications of the ACM, December 2002, http://portal.acm.org/ft_gateway.cfm?id=585599&type=pdf&coll=ACM&dl=ACM&CFID=20014976&CFTOKEN=98919689

Farhad Manjoo, "Bad grades for a voting-machine exam,"
salon.com, 15 October 2003, http://archive.salon.com/tech/feature/2003/10/15/riverside_voting_machines/

Jeremiah Akin, "Preliminary Report to
the Central Committee on the Riverside County Logic and Accuracy Testing
Board," http://www.exit.com/RiversideVoteTest/RiversideCountyTestObservationBoard.pdf

Election Center, "DREs and the Election
Process," http://www.oc.ca.gov/election/eslate/security_paper.pdf

John Schwartz, "Report Finds Security
Risks in Allowing Americans Overseas to Cast Votes on the Internet,"
(Link)
New York Times, 21 January 2004, A23, http://proquest.umi.com/pqdweb?index=1&did=000000527173851&SrchMode=1&sid=5&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081362211&clientId=1568

David Jefferson, Aviel D. Rubin, Barbara Simons,
David Wagner, "A Security Analysis of the Secure Electronic Registration
and Voting Experiment (SERVE)," http://servesecurityreport.org/paper.pdf

Paul Krugman, "Democracy at Risk,"
New York Times, 23 January 2004, A23, http://proquest.umi.com/pqdweb?index=5&did=000000528206791&SrchMode=1&sid=7&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081362362&clientId=1568

John Schwartz, "Online Ballots Canceled for Americans Overseas,"
New York Times, 6 February 2004, A18,  http://proquest.umi.com/pqdweb?index=0&did=000000538344351&SrchMode=1&sid=1&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081361768&clientId=1568

Ray F. Herndon and Stuart Pfeifer, "7000 Orange County Voters Were Given Bad Ballots,"
Los Angeles Times, 9 March 2004, A1, http://proquest.umi.com/pqdweb?index=0&did=000000574196711&SrchMode=1&sid=10&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081364290&clientId=1568

Stuart Pfeifer, "O.C .Supervisor Wants Audit of Flawed Electronic Voting,"
Los Angeles Times, 10 March 2004, B5, http://proquest.umi.com/pqdweb?index=0&did=000000574999701&SrchMode=1&sid=11&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081364363&clientId=1568

Stuart Pfeifer, "New Voting Hitch Had Old Cause,"
Los Angeles Times, 6 March 2004, B8, http://proquest.umi.com/pqdweb?index=0&did=000000572449231&SrchMode=1&sid=12&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081364419&clientId=1568

Stuart Pfeifer and Ray F. Herndon, "A New Voting Hang-Up for O.C.,"
Los Angeles Times, 12 March 2004, B5, http://proquest.umi.com/pqdweb?index=0&did=000000577115931&SrchMode=1&sid=13&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081364532&clientId=1568

Eric Bailey and Stuart Pfeifer, "Delay in State E-Voting is Suggested,"
Los Angeles Times, 12 March 2004, B5, http://proquest.umi.com/pqdweb?index=0&did=000000577115711&SrchMode=1&sid=14&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1081364588&clientId=1568

Privacy:  Baase chapter 2. (Read
these by the start of the second week)  (Include
all of the following readings in Notebook Installment #1, April 20)

Kim Zetter, "Mining the Vein of Voter
Rolls," Wired News, 11 December 2003, http://www.wired.com/news/business/0,1367,61507,00.html

Tony Perry, "Capturing Red-Light Runners Creates Red-Faced Officials,"
Los Angeles Times, 3 June 2001, B8, http://proquest.umi.com/pqdweb?index=0&did=000000073535938&SrchMode=1&sid=1&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082295953&clientId=1568
[Alternate link]

Eugene Volokh, "The Cameras Are Watching--And
It's a Good Thing" (alternate title: "Big Brother is Watching--Be
Grateful!"), Wall Street Journal., 26 March 2002, p. A22, http://www.law.ucla.edu/faculty/volokh/cameras.htm
or http://proquest.umi.com/pqdweb?index=4&did=000000111479923&SrchMode=1&sid=1&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1078069852&clientId=1568

Jane Engle, "When you rent a car, does the company secretly track you?,"
Los Angeles Times, 4 April 2004, L3, http://proquest.umi.com/pqdweb?index=1&did=000000607525181&SrchMode=1&sid=2&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296087&clientId=1568
[Alternate link]

Chris Hibbert, "History and Significance
of the Social Security Number," Computer Professionals for Social Responsibility,
9 January 2004, http://www.cpsr.org/cpsr/privacy/ssn/SSN-History.html

Dave Wilson, "Marketers Want to Keep Your Secrets,"
Los Angeles Times, 4 January 2001, T1, http://proquest.umi.com/pqdweb?index=0&did=000000066037383&SrchMode=1&sid=3&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296291&clientId=1568
 [Alternate link]

Jamie Court, "Everything Has a Price, Including Your Private Information,"
Los Angeles Times, 2 June 2003, B11, http://proquest.umi.com/pqdweb?index=1&did=000000342886531&SrchMode=1&sid=4&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296419&clientId=1568

Bettijane Levine, "FYI: yr e-mail can haunt u 4ever,"
Los Angeles Times, 6 June 2003, E1, http://proquest.umi.com/pqdweb?index=0&did=000000345900371&SrchMode=1&sid=5&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296540&clientId=1568
[Alternate link]

Barbara Simons and Eugene M. Spafford, "Risks of Total Surveillance,"
Communications of the ACM, March 2003, http://portal.acm.org/ft_gateway.cfm?id=636804&type=pdf&coll=portal&dl=ACM&CFID=20288216&CFTOKEN=15281408

Jeffrey Zaslow, "If TiVo Thinks You Are Gay, Here's How to Set It Straight,"
Wall Street Journal, 26 November 2002, http://proquest.umi.com/pqdweb?index=0&did=000000245700541&SrchMode=1&sid=3&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082033345&clientId=1568

Patt Morrison, "The Big Squeeze on Americans' Privacy,"
Los Angeles Times, 15 July 2003, B3, http://proquest.umi.com/pqdweb?index=0&did=000000362810461&SrchMode=1&sid=6&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296653&clientId=1568
[Alternate link]

Carl Ingram, "Senate OKs Privacy Bill,"
Los Angeles Times, 20 August 2003, B1, http://proquest.umi.com/pqdweb?index=2&did=000000386675121&SrchMode=1&sid=7&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082296746&clientId=1568
[Alternate link]

Meg McGinity, "RFID: Is This Game of Tag Fair Play?,"
Communications of the ACM, January 2004, http://portal.acm.org/ft_gateway.cfm?id=962097&type=pdf&coll=portal&dl=ACM&CFID=20288216&CFTOKEN=15281408

Gregory J. Pottie, "Privacy in the Global E-Village,"
Communications of the ACM, February 2004, http://portal.acm.org/ft_gateway.cfm?id=966407&type=pdf&coll=portal&dl=ACM&CFID=20288216&CFTOKEN=15281408

Katie Hafner, "In Google We Trust? When the Subject Is E-Mail, Maybe Not,"
New York Times, 8 April 2004, http://proquest.umi.com/pqdweb?index=1&did=000000611900291&SrchMode=1&sid=5&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082033489&clientId=1568

Electronic Frontier Foundation, "Gmail:
What's the Deal?," 5 April 2004, http://blogs.eff.org/deeplinks/archives/001375.php#001375

Safety and reliability:  Baase chapter
4.  (Include all of
the following readings in Notebook Installment #2, May 4)

Sharon Bernstein, "At Times, Automated System May Ticket the Wrong Driver,"
Los Angeles Times, 2 September 2003, B2, http://proquest.umi.com/pqdweb?index=0&did=000000392425651&SrchMode=1&sid=1&Fmt=3&VInst=PROD&VType=PQD&RQT=309&VName=PQD&TS=1082648657&clientId=1568

Michael Specter, "The Doomsday Click,"
The New Yorker, May 28, 2001, http://www.michaelspecter.com/ny/2001/2001_05_28_doomsday.html

David Lorge Parnas, "Software Aspects of Strategic Defense Systems,"
Communications of the ACM, December 1985, http://portal.acm.org/ft_gateway.cfm?id=214961&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Peter G. Neumann, "Missile Defense,"
Communications of the ACM, September 2000. This question--whether to undertake
a large project to develop a missile defense system and whether such a system
would or could ever work--has recently come up again for consideration.
 The issues are about the same as those raised in the previous article by
Parnas, from 1985. http://portal.acm.org/ft_gateway.cfm?id=349030&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Nancy Leveson, "Medical Devices: The Therac-25,"
Appendix A of Safeware: System Safety and Computers, Addison-Wesley,
1995.  The Therac-25 is a classic example of a computer-based system whose
poor design killed people.  You do not have to read this entire, long report,
but you should read sections 1 and 4 and skim the others.  We won't
ask you details about the Therac's operation, but you should know the
basic causes of the problems and what Leveson concludes about them.  Nancy
Leveson is now at MIT, but she did the original investigation of the Therac
accidents when she was a professor here in ICS.  She was also David Kay's
teaching assistant when he took the equivalent of ICS 22.  http://sunnyday.mit.edu/papers/therac.pdf

 Lauren Weinstein and Peter G. Neumann,
"Risks of Panic,"
Communications of the ACM, November 2001, http://portal.acm.org/ft_gateway.cfm?id=384158&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Peter G. Neumann and Lauren Weinstein, "Risks of National Identity Cards,"
Communications of the ACM, December 2001, http://portal.acm.org/ft_gateway.cfm?id=501357&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Andrew Wright, "On Sapphire and Type-Safe Languages,"
Communications of the ACM, April 2003.  This article provides another perspective
on the choice of programming languages. http://portal.acm.org/ft_gateway.cfm?id=641237&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Intellectual property:  Baase chapter
6. (Include all of
the following readings in Notebook Installment #2, May 4)

League for Programming Freedom, "Against Software Patents",
Communications of the ACM, January 1992, http://portal.acm.org/ft_gateway.cfm?id=384273&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Paul Heckel, "Debunking the software patent myths,"
Communications of the ACM, June 1992, http://portal.acm.org/ft_gateway.cfm?id=129897&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Tim O'Reilly, "The Internet Patent Land Grab,"
Communications of the ACM, June 2000, http://portal.acm.org/ft_gateway.cfm?id=336471&type=pdf&coll=portal&dl=ACM&CFID=20591076&CFTOKEN=40134676

Michael S. Guntersdorfer and David G. Kay,
"How Software Patents Can Support COTS Component Business,"
IEEE Software, May/June 2002, http://www.computer.org/software/homepage/2002/03COTS/index.htm?SMSESSION=NO

Electronic Frontier Foundation, "Unintended Consequences: Five Years under the DMCA,"
http://www.eff.org/IP/DMCA/unintended_consequences.php

David Streitfeld, "The Cultural Anarchist vs. the Hollywood Police State,"
Los Angeles Times Magazine, 22 September 2002, pg. 10, http://proquest.umiINFORMATICS 41 • DAVID G. KAY • UC IRVINE • FALL 2011
Lab Assignment 9 

This assignment is due at the end of lab on
Friday, December 2.  

Choose a partner for this assignment, someone
you haven't worked with already. It will work best if you choose someone whose level of commitment to developing programming ability is close to your own (whether that's high or low).
Professor Andrea Anteater wants you to design
  a grade management system for her students in Applied Epistemology 101.
  This system will read and write students' scores from a file and allow
  the user to produce statistics and histograms (frequency graphs) of the
  scores.
 Your task this week is to create this program
  from scratch.  It's not really from scratch, though, so don't panic:  We provide a set
  of specifications for you to implement and you can use all of the example
  programs we've seen all quarter.  Hardly any programming today is totally
  from scratch; we have application frameworks (skeleton programs with all
  the infrastructure supplied), we have function libraries that provide commonly
  useful tasks, we have object libraries and class hierarchies that we can
  adopt and adapt to our own purposes.
 To help you along, here are six pieces of
  development advice:
 Read the specifications carefully, more
    than once.  Technical documents must be milked for all the detailed information
    they contain; you can't just read them one time quickly, like a mystery
    novel. Follow the model-view-controller organization;
    have a separate top-level "front end" part of your program (the view and controller part) that handles interaction
    with the user and a "back end" part (the model) that implements the operations
    on the different classes of data. This is how the restaurants program is organized. As you build the "model" part
    of the program, follow the design recipes, especially for creating examples
    and tests in advance.How do you know if you have enough tests, or the right tests? One simple measure of test effectiveness is called "code coverage"—your tests should, at the very least, evaluate each expression in the code. DrScheme helps you with this: After running your program, if you haven't tested every expression, some of the code appears highlighted in black. The highlighted code hasn't been evaluated, so you should add  tests to exercise those parts of the program. Implement one small feature at a time, test
    it thoroughly, and then save a copy of your program so far.  That way, if
    your next phase of development runs into trouble, you can "roll back"
    to the previous version and start over.Nearly every technique needed for this lab is something you've seen or done earlier this quarter. If you find yourself working on something that seems much more complex or convoluted than we've done before, reconsider your approach.
 You'll be using Advanced Student Scheme
  for this program, with the advanced-file-io.ss teachpack. (Download the file; don't just copy and paste the code.)
One more thing before you get started: This assignment has two different starting points; you and your partner can choose either, and we'll make sure that either way, successful work is rewarded. If you're interested in software development, software engineering, or building your programming skills, start with part (a) below; that's the fully "from-scratch" approach, including building the input and output ("view") part. If you're less committed to software development, though, you can start with part (c), skipping parts (a) and (b) and using our "starter version" of the program; this will let you focus on the more substantial parts of the assignment and skip the input and output, which is important as a practical matter but kind of tedious to code up. If you choose the second approach, you'll still need to read through parts (a) and (b) below to understand what's involved, and read through the starter version of the program to understand how it works and how to modify it.
(a) Your program will handle these
  classes of data: 
 Assignments, each represented by a name, a
    weight in computing the course grade [the weights of all assignments should
    sum to 100, though we're not requiring you to check this], and a number
    of points possible [which is independent of the weight; a three-point assignment
    could be worth 50% of the course grade].  ("Graded item" would
    be a better term, since it includes things like exams and projects.  But
    we'll use "assignment" just because it's shorter.)
   A collection of assignment descriptions that
    together describe the graded items in the course
    
   Students, each represented by a name, an ID
    number, and a vector of scores (which should be the same size as the collection
    of assignments, one score for this student on each assignment)
   A collection of students
 To start out, make sure you understand these
  data structures:  Make up some examples; draw a picture; get comfortable
with how they're organized.  Then you'll want to define  functions to display the information in an assignment and a student clearly; base these on rrant-print.
Then, test out those functions with objects you construct using make-assignment and 
make-student. [Note on terminology]
 (b) When your program starts, it will
  read the collection of assignments from a plain text file called Assignments.txt.
    (If you place your program file and these data files in the same directory/folder,
    DrScheme will find them without your having to do anything fancy.)  Then
    it will read the collection of students from a text file called Students.txt.
      Since the user can create these files without knowing any Scheme, your
      program won't have to handle changes to the data (although that's
      an enhancement we discuss below).
 The user can create these files using a plain
  ASCII text editor like NotePad (or from Word by using Save As and the Text
  Only format, which saves plain ASCII without the additional Word formatting
  information that your Scheme program can't read). 
 For a course with a 75-point midterm worth
  40% of the grade and a 100-point final worth 60%, the assignments file would
  look like this:
2 
  Midterm Exam
  40 75
  Final Exam
  60 100
 The first line contains the number of assignments.
  Then each assignment has two lines, the first containing the assignment's
  name and the second containing two numbers, the weight followed by the possible
  points. [The code for creating one assignment should be similar to the rrant-get-info
function, except that it's reading from a file instead of from the keyboard.]
 A file of students for this course would look
  like this:
2
  Aardvark, Aaron
  11223344
  68 85
  Tapir, Tamara
  44332211
  74 92
 The first line contains the number of students.
  Then each student has three lines, the first containing the student's
  name, the second containing the student's ID, and the third containing
  the student's scores on each assignment, in order.
Here are two lines of code to set up the reading from the two files listed above (in the same folder as your Scheme code):
(define assignment-port (open-input-file "Assignments.txt"))
  (define student-port (open-input-file "Students.txt"))
Here are two examples of reading from the files:
(read assignment-port) ; Read one expression from the assignments file 
  (read-line student-port 'any) ; Read one line from the students file and return it as a string.
 The 'any argument to read-line will handle files on both Windows and Mac; these systems use different characters to signal the end of a line.
As you read the input files, remember that the read-line function reads an entire line of input and returns a string (this is useful
  for reading strings that may contain blanks, without requiring the user
  to enclose the strings in quotation marks).  The read function reads the next Scheme expression (e.g., a single number) from the
    input.  You'll also want to call read-line (ignoring its return value) after reading numbers from a line; this will
      put you at the start of the next line so you're ready to read  


Nearly all of the ICS 22 lab assignments require
that you write some Java code.  In ICS 21 you concentrated mostly on the
correctness and completeness of your programs, but from now on your grade
will also depend on other qualities.  A good program has many attributes,
such as correctness, efficiency, ease of learning and use, reliability,
modifiability, and clarity.  Correctness is paramount, but "anything
that works" is the attitude of a hacker, not a professional.  A professional-quality
program must score highly in all these categories, and we intend to help
you learn how to write professional programs.

One aspect of professional programs is their
style.  When we speak of programming style, we use the term "style"
not in the sense of an author's manner of expression--Hemingway's
style is different from Joyce's--but in the sense of "good, clear
style" that everyone should strive for.  Achieving that clarity requires
work at many levels, from the overall design of the program's classes,
algorithms, and data structures, to the mundane details of indentation,
capitalization, and spacing.

Throughout the course we will concentrate
on the major design issues; in this document we focus on the smaller details.
 Yet these details are not cosmetic trivialities.  Adhering to consistent
style guidelines helps you write clearer, more modifiable, more reliable,
and generally higher quality code.

The style guidelines we present here are good
ones.  We require that you follow them (perhaps with amendments your TA
makes) for your programming in this course.  That is not to say that every
detail of these guidelines is superior to any other way of doing things,
but for the sake of consistency we require that you follow these guidelines
in this course.  You will find that many organizations have coding style
guidelines that all their programmers must follow.

However, nobody should follow style guidelines
slavishly.  If you come upon a specific situation where the rules don't
make a program clearer, the rules should give way (though you should check
with your TA to make sure).

Program design and organization:  You
should organize your program so that its structure is clear, using abstraction
of various kinds to hide unnecessary detail at each level. 

*   A main strength of Java is the set
of features it provides to support object-oriented programming.  Wherever
appropriate, you should design your program in terms of the real-world objects
it represents, making good use of classes and their associated operations.

*   Your classes should use the features
Java provides for abstraction and information hiding, including where appropriate
inheritance and private methods and instance variables.

* Methods should almost never be longer than
one screenful; break long methods into sub-programs.

* Use symbolic constants wherever applicable.
 Other than zero and one, you should have no literal constants (i.e., no
numbers) in the body of your program.  Every number has a meaning, and you
should capture that meaning in a constant definition.  (But that doesn't
mean following the silly practice of defining eponymous constants like
static final int TEN = 10; --use
meaningful identifier names.)

Choosing identifier names:  You must
choose identifier names that convey their function clearly to anyone reading
your program.

* The names of void functions (and of methods
whose return value is only a status indicator of successful completion)
should be imperative words or phrases-- commands that describe their actions.

      public
void printFormLetter (Name n, Address a) {...}

      public boolean fillRecord
() {...}

      public int sortByVegetableName
() {...}

* Other method names should usually be nouns,
naming the value returned.

      public
double insurancePremium (long ZipCode)  {...}

      public numberOfFlights sizeOfFlightRecordCollection
()  {...}

* Names of methods that return boolean values
should be declarative statements, so that they "read correctly"
when they're called.

      public
boolean cityNameIsValid (Response nameToCheck) {...}

      if (cityNameIsValid (usersInput)

         System.out.println("That's a city name,
all right.");

Indentation and spacing:  The key concept
here is to include enough white space so that more closely related items
appear closer together than less closely related items.  This should make
the program's organization apparent.  Never be stingy with blank lines;
use them to help guide the reader's eye to what's important.* Start
each new statement and each new data definition on a new line.  Break long
lines at a clear, convenient place and indent the continuation to indicate
that it's not a separate new statement.

Documentation:  The documentation required
varies from one assignment to the next, but at a minimum every assignment
should have the following.  Remember that comments can't make up for
poorly chosen identifier names or unclear code.* Include a comment at the
top of the program that includes your name, your student ID number, the
course, your TA's name, and the name and number of the assignment.

* Every procedure should include a comment
that describes the procedure's purpose, the kinds of parameters it expects
and any assumptions about their values (this is called the procedure's
precondition--what's true before it starts), the values it returns or
actions its performs (its postcondition--what's true after it executes),
and a high-level description of the method it uses if that method isn't
obvious from reading the code.

* Explain any intricate or obscure sections
of code in comments if you can't rewrite them to be less obscure.

* Because comments appear along with the code,
you can assume that the reader of your comments knows how to read Java,
even though he or she isn't familiar with your particular program. 
Thus, you should avoid silly, redundant comments like this:

total++;  // Add one to the total.

Safety and reuse:  Don't reinvent
the wheel, at least when you have permission to use an existing wheel. 
In real-world software development, program designers learn and use vast
libraries of classes and programs so they don't have to rebuild everything
from the ground up.  

In an introductory course such as this one,
there will be times when we ask you to build something from the ground up
because you need to learn the construction techniques involved.  But when
we don't tell you to build something from scratch, you should use existing
code where possible and where permissible (which means, of course, that
you can't use your classmates' or roommates' code--see below).

Code reuse is particularly valuable when the
existing code has qualities that your code lacks, such as extra features,
clearer design, or thorough error-checking.

We will use the program grading form shown
below; you should read it now and use it as a guide when you write your
code.  Notice how large a portion of your grade depends on issues of programming
style.

Turning in lab assignments:  Each assignment
describes what to turn in.  Typically this includes both a paper copy
and an electronic copy.  

Place all the parts of your paper submittal
into a manila envelope so that it forms one package. Make sure your name,
your student ID, and your TA's name are written on the front of the
envelope.  Then give the envelope to your TA in section. 

For electronic submission, use the Checkmate
system at checkmate.ics.uci.edu.


Please refer to the course outline on the
importance of keeping backups; papers do get lost, and servers do crash,
and we'll expect you to be able to produce a replacement copy easily
if either misfortune should occur again.

Late assignments:  Assignments will
typically be due at the start of your discussion section on the date specified
on the assignment; your submission to Checkmate should be complete by then
and your paper submission should be ready to hand in. We expect everyone
to turn in by the due date whatever work they have completed; significant
lateness will incur penalties.  (We can make exceptions for major illness
or emergency, but not for conflicts with other classes or work.)  We will
  

This assignment is due on Wednesday, March
12.  There's not much coding here except for the last part, which you
may do in pairs.

(a) Below is some code that implements
a finite-state machine.

final int Secret1 = 35;

final int Secret2 = 127;

final int Secret3 = 33;

String[] stateList = {"Init",
"GotFirst", "GotSecond", "Success");


int number;

int count = 1;

String state;

void main()

{

  state = "Init";   

  while ((!state.equals("Success"))
&& (count <= 3))

  {

    number = getNext();


    if (state.equals("Init"))

     {

       if (number == Secret1)

      state = "GotFirst";

       else state = "Init";

     }

    else if (state.equals("GotFirst"))

     {

       if (number == Secret2)

      state = "GotSecond";

       else state = "Init";

     }

    else if (state.equals("GotSecond"))

     {

       if (number == Secret3)

      state = "Success";

       else state = "Init";

     }

    count++;

  }

  

if (state.equals("Success"))

    System.out.println("Input
accepted.");

else

    System.out.println("Input
rejected.");

}


(a.1) Draw the state transition diagram
that represents the FSA this program implements.  The input tokens here
are whole integers, not individual characters.

(a.2) Describe in one brief English
sentence what this FSA does.  Try to think of a simple, real-world, non-computer-related
object that this FSA models.

Intermezzo:  State transition diagrams
are one way to describe FSAs.  Another way (which is easier to represent
in a computer) is a transition table.  A transition table has a row
for each state and a column for each input; the value at each position in
the table tells you what state to go to when you read a given input in a
given state.  Below is a transition table for the program above:

 
Secret1
Secret2
Secret3
other
Init
GotFirst
Init
Init
Init
GotFirst
Init
GotSecond
Init
Init
GotSecond
Init
Init
Success
Init
Success
 
 
 



This table says just what the program and
the state transition diagram say:  If you're in Init
and you read Secret1,
you go into state GotFirst;
if you're in state Init
and you read anything else, you stay in Init.
 If you're in state GotFirst
and you read Secret2,
you go into state GotSecond;
if you read anything else in state GotFirst
you go to state Init.
 And finally, if you're in state GotSecond
and you read Secret3,
you go to state Success;
otherwise, you go to Init.
 In state Success
the machine stops, so you don't make any transitions out of that state;
it's the accept state.

As we noted, transition tables make FSAs easy
to represent in a computer.  In fact, we can write a very simple but very
general FSA simulator according to the following pseudocode:

initialize TransitionTable;

state 
initial state;

while there are more tokens:

      get a token;

      state 
TransitionTable[state][token];

if state = accept state

      then accept

      else reject.

Because this code is so simple, it's the
preferred way to implement FSAs in programs.  The only tricky part is finding
a data type that will represent the range of tokens and will at the same
time be acceptable as an array index in your programming language.  Scheme,
for example, handles symbolic names very easily.  But in the above Java
code, you can't have an array with four columns labeled 35, 127, 33,
and 'other'.  The cleanest way to deal with this is to have a routine
that would translate each token (or category of tokens) to its corresponding
column in the transition table--effectively a switch statement or sequence
of if-statements that map the tokens (or token categories) to the range
0..3.

(b)  Think about the task of extracting
words from a stream of text.  In Java, StringTokenizer does this for you,
but sometimes you need to specify "words" idiosyncratically (as
with the DVD information).  You can do this kind of input-parsing task much
more easily using state machines than by writing code directly.

(b.1)  Draw a state transition diagram
that accepts words defined as follows:  a sequence of non-separator characters
whose end is marked by a separator.  Separators are symbols that separate
English words--space, comma, semicolon, colon, and so on.  Note that the
hyphen (-), the apostrophe ('), and the percent sign (%) are not separators:
 treat "mother-in-law," "don't," and "23%"
as single words.   The end of the line is a separator, unless the last word
of the line ends with a hyphen.  That way, if a word like mother-in-law
is hyphenated across two lines, it will still count as one word.  (We will
assume that in our input, only words that are always hyphenated will be
hyphenated at the end of a line; that is, you should not expect normally-unhyphenated
words to be broken across two lines.)  Watch for multiple separators in
a row--for example, a comma followed by a space is two separators, but there
is no word between them.

You could code up this FSA into a method called
getNextWord,
and call it to parse a stream of input.  Coding this isn't a required
part of this assignment, though.

(b.2)  Write a transition table for
the state machine you drew in part (b.1).

(c)  Now it's time to think about
finite-state machines and the DVD information fields defined in the Sixth
Homework.

(c.1)  Draw a state transition diagram
that accepts DVD information.  You should design your machine to accept
a single field--maybe a quoted string, maybe an integer, maybe a date--and
to go back to the initial state when it encounters a comma (that isn't
quoted, of course).  This makes processing quite simple so long as you're
willing to forego checking which field is of which type, or that you have
the correct number of fields.  (In coding, you could easily add actions
for some transitions that would maintain a field count.  It might also help
to assume that there's an input token or character called EOS, for "end
of string," that your character-reading routine would return and that
your machine could check for.)

(c.2)  For extra credit, recode your
DVD-parsing program to implement the FSA you designed above.

(d)  (This part is optional, but don't
stop here; subsequent parts of this homework are required.)  Available on
the web is a program called JFLAP, written at Duke University (http://www.cs.duke.edu/~rodger/tools/jflaptmp/).
 You can download this Java application and use it to build and test your
own simple FSAs (as well as do other formal-language activities).  Other
state machine simulators are available on the web; you can find some of
them by using search strings like "state machine applet" or "FSA
animation."  If you'd like to work on building or enhancing tools
like these (especially to allow graphical construction of useful FSAs with
regular expressions as the transitions), come talk to me some time.

(e)  The programming language Lisp
(whose name is a contraction of the words "LISt Processing") was
invented by John McCarthy in 1958.  It was such an advanced language for
its time that existing machines could not run it efficiently, and its early
use was mostly limited to researchers in artificial intelligence.  Today,
however, computers are thousands of times faster than they were in the 1950s,
and Lisp's power is practical for a very wide range of programming tasks.
 Scheme and Common Lisp are two modern members of the Lisp family of programming
languages.

One of Scheme's attractions is that its
syntax is very simple.  Unlike Java, which has a few dozen different statements,
each with its own grammar and punctuation rules, every program or expression
in Scheme is just a list of words surrounded by parentheses.  This provides
a rich variety of expression because a "word" can be (a) any sequence
of characters delimited (separated from other words) by white space, or
(b) a parenthesized list of words nested within the outside list.  The following
are all valid Scheme expressions (each is one line long except the last,
which starts with the word define):

(Fee fie fo fum)

(+ 3.14159 1776 -45 quantity)

(equal? (+ 2 2) (+ 3 1))

(define square

   (lambda (x)

      (* x x)))

Novice Scheme programmers sometimes worry
about keeping all the parentheses balanced, but mostBack to Lesson Index






Lesson 77 - Dispute Resolution in Cyberspace
Introduction


Freedom of Speech in Cyberspace from the Listener's Perspective: Private Speech 
Re-strictions, Libel, State Action, Harassment, and Sex





Introduction	 378
I. Edited Conferences	 381
	A. Electronic Conferences and Their Hazards	 381
	B. The Right to Edit	 385
		1. The Right to Exclude Content	 385
		2. The Right to Exclude Speakers	 390
		3. Possibly Permissible Requirements	 397
	C. Editing from the Listener's Perspective	 398
	D. Defamation Liability	 401
	E. Edited Conference Groups on Public Computers 
		or Run by Public Employees	 407
		1. No Constitutional Barriers to Editing	 407
		2. No Constitutional Right to Edit	 409
II. Government Protection of Listeners Against Offensive 
	Messages	 410
	A. Protecting Some Listeners Without Burdening Other-
		Listeners	 410
	B. Telephone Harassment Laws	 412
	C. ³Electronic Harassment² in Electronic Conferences	 413
	D. Hostile-Environment Harassment	 414
	E. One-to-One Online Harassment	 421
	F. The Continued Unwanted Contact Model	 423
III. Sexually Explicit Material and Minors	 425
	A. The Potential Restrictions	 426
	B. The Least Restrictive Alternative Requirement	 428
	C. Ratings	 429
		1. The Clean List/Dirty List Models	 429
		2. The Ratings Model	 432

		3. Enforcing the Ratings System	 432
		4. Why This is at Least an Equally Effective 
			Alternative	 433
		5. Community Standards	 435
Conclusion	 435

INTRODUCTION

Speakers' desires are fairly simple: gener-ally, they want more listeners.  But listen-ers don't just want more speakers talk-ing to them. Listeners want more control over their speech di-et‹a larger range of available speech cou-pled with greater ease of selecting the speech that's most useful or interesting to them.
The success of the new electronic media in the ³marketplace of marketplaces² of ideas‹where information providers compete for that scarcest of resources, the attention span of modern man‹will turn on how well they can satisfy listeners' desires.  The new media have one significant advantage: they can give listeners many more choices. But for listen-ers, that's not enough. For listeners, what the new media omit‹time-wasting junk, insults, material that might be harmful to their children‹is just as important as what they in-clude. Listeners care about this outside the online world, and they care about it just as much online.
	In the following pages, I will discuss three categories of online speech issues and look at them partly, though only partly, through the lens of the listeners' interests:
	
	1. Edited Electronic Conferences: One of the most significant features of the new media is the interactive electronic confer-ence‹bulletin board, newsgroup, discussion list, or the like. People who listen in on these conferences (and most participants spend much more of their time listening than speak-ing) want speech that's relevant to their interests, readable, reliable, and not rude. Sometimes an open, unedited electronic confer-ence can provide this, but often it can't. Often‹as conference operators have been learn-ing‹editing is critical to making online speech worth listening to.

 	At the same time, editing is content con-trol, the sort of thing that, if the govern-ment did it, would be called ³censorship.² It includes limitations on who may speak, removal of people who speak badly (in the editor's opinion), the deletion of inappropriate mes-sages, and automatic screening of messages for profanities. Many have expressed concern about this sort of private speech restriction.

In Part I, I will defend the propriety of private, nongovern-mental, content control on electronic conferences. I'll argue that:
Conference operators should generally have the right to decide what's said on their conferences and who says it.

Libel law generally ought not penalize conference editors by imposing on them extra risk of defamation liability beyond what operators of unedited conferences must bear.

The conference operator's power to edit should remain even if the conference is run on a government-owned computer or if the operator is a government employee.

2. Avoidance of Offense: Listeners don't want to hear materi-al that offends them. This doesn't mean they only want to hear what they agree with; controversy is usually more fun than agreement. But some speech is offensive enough that its emotion-al cost to the listen-ers can exceed the informational benefit they derive from the conversation.

	No one likes to be personally insulted. No one likes to hear one's race, sex, religion, or deeply held moral beliefs rudely at-tacked. Often, we're discomfited even by watching oth-ers argue rudely with one another. Some speech like this can be annoying; some can ruin one's mood for hours. People don't go to parties where they think it likely that the other guests will be rude to them‹neither do they want to participate in electronic confer-ences where this happens.

	In Part I, I'll argue that private editing is an important tool for giving people the opportunity to interact in the polite environ-ment they may prefer. In Part II, I'll discuss what the govern-ment may do to protect people from speech that offends them when private editors can't or won't edit it out. I'll sug-gest that:
In general, the government ought not be able to restrict offensive speech in electron-ic conferences (unless it's a threat or falls into some other Free Speech Clause exception). Some tele-phone harassment laws, and possibly some aspects of hostile environment harass-ment law, seem to already impose restrictions on online speech,  but to the extent they do, they're unconstitu-tional.
On the other hand, the government should be more able to restrict one-to-one speech‹such as personal e-mail‹that's aimed at unwilling listeners; such restrictions protect unwilling listeners while still leaving speak-ers able to communicate with willing ones. The best way to implement such a restriction would be to let listeners demand that a speak-er stop sending them direct e-mail, a power people al-ready enjoy with regard to normal mail.  Such a rule would be better than di-rect extensions of telephone harassment laws, which often embody dangerously vague prohi-bi-tions on speech that's ³annoying² or ³harassing.²

	3. Giving Parents Control Over Their Children's Access: Fi-nal-ly, online as well as offline, parents are concerned about their children gaining access to sexually explicit materials; and, online as well as offline, the question becomes how the law can restrict children's access without also restricting the access of willing adult listeners. In Part III, I'll suggest that:
	‹ Some laws may already prohibit the online posting of nonobscene sexually explicit mate-rial that might be ³harmful to mi-nors² (a term of art described below). 
	‹ These laws have been upheld in the offline world, partly be-cause they've been seen as not imposing much of a burden on adults who want to get the material. Online, though, where it's hard to tell who's a child and who's not, these laws are much more bur-densome to adult viewers.
	‹ These laws ought to be unconstitu-tional online because there's a less speech-restric-tive alternative which could protect children while maximizing the choices available to adult listen-ers: a self-rating system that would identify which images or discussions are sexually explicit. This approach will still impose something of a burden on speakers and adult listeners, but this burden should be constitutionally permissible.
	In focusing on listeners, I don't mean to suggest that listeners' rights are generally more important than the rights of speakers. After all, the Free Speech Clause guarantees ³the free-dom of speech,² and much of the Court's doctrine has‹in my view correct-ly‹protected speakers, even where most listen-ers might object to what the speakers are say-ing.
	But this very emphasis on the rights of speakers can lead people to ignore the rights of listeners, rights the Court has also recog-nized. And worse still, focusing exclusively on the rights of speakers can make us ignore how critical listener satisfaction can be to the survival of the new media. If we think the new media can be valuable tools for public discourse, it's worth trying to make sure that the law doesn't make them unattractive to the listening public.

I. EDITED CONFERENCES

 
A. Electronic Conferences and Their Haz-ards

	Listeners want to hear more of what inter-ests them and less of what doesn't. This be-comes especially important for electronic con-ferences, some of the biggest speech activi-ties on the infobahn.
	These conferences are electronic ³places² where people from all over the world can com-municate with one another on a partic-ular topic, from the law of government and religion  to Jewish issues in Star Trek.  Electronic conferences can be organized as Internet dis-cussion lists;  as Internet news groups;  or as special dial-in services, ranging from the big public ones like Prodigy, America Online, and Compuserve, to the smaller and more spe-cialized ones like Counsel Connect, to single-PC bulletin boards that may have only a few hundred subscribers.  Regardless of imple-men-tation, though, these conferences are means by which each of hundreds or thousands of par-tic-ipants can talk to all the others, and will have to listen to what the others have to say.
	The conferences are like faculty or law firm symposia, where everyone present can speak (though not all at once) and comment on what everyone else has said. They are, howev-er, symposia that go on continuously, and that can include hundreds of people who've never physically met one another. And, as in a sym-po-sium, though everyone has an opportunity to speak, the over-whelming majority of partic-ipants are ³lurkers,² people who only listen.
	The advantage of these conferences over the traditional me-dia is their openness and interactivity; but this is also their great risk. An electronic conference is a compila-tion of the messages (or ³posts²) written by all its participants, and as with any compila-tion, its value lies both in the substance of the materials it con-tains and in their selec-tion. As with other compilation media, such as radio programs, magazines, or live conferenc-es, people look for high ratios of wheat to chaff (or, as computer people say, ³signal to noise²): electronic confer-ences in which they find a large fraction of the speech to be in-terest-ing. 
	I've seen many users turn away from elec-tronic conferences, even conferences on topics that interest them, be-cause the signal-to-noise ratio was too low. Conference users have limited time, and messages that are irrelevant to the con-ference topic, messag-es from people who don't know what they're talk-ing about, and messages that are repeti-tive all make the conference less valu-able. People want conversations of higher quality than talk radio. 
	Conference users also want an emotionally congenial envi-ronment. It may be a pleasure to listen to people discuss an issue civilly, but a strain to listen to them yell at each other. Even if the intellectual content is the same, the tone of the speech can be a serious bur-den.
	Few physical conferences, for instance, invite speakers who insult one another. Many newspapers refuse to print certain profani-ties. We don't go to clubs or parties where we know boors are likely to be declaiming; simi-lar online conduct can make an electronic con-ference much less valuable for us. One bad apple on a discussion list can spoil many people's enjoyment. And as more people get online and begin to use online resources, the risk of information overload and of the occasional rude participant esca-lates.
	Most electronic conferences try to keep both the signal-to-noise ratio and civility high by moral suasion.  Each conference has an official topic; people generally know not to stray too far from it, and if they do, oth-ers might ask them to ³take it off-list²‹continue the discussion in personal e-mail rather than on the electronic conference. When people start getting rude, others might chime in to quiet every-one down. Most confer-ences have conference operators who are in charge of the techni-cal details of conference administration; they often also take responsi-bility for informally keeping everyone in line.
 	Increasingly, though, conference operators have begun to edit more coercively, in several ways:
	1. They may limit who can access their con-ference. Counsel Connect, for instance, is limited to lawyers; the LAWPROF Internet discussion group  is limited to law profes-sors. The the-o-ry is that those are the people who are most likely to contribute something valu-able to the discussion.  List operators have dis-cretion, of course, to waive these rules‹either in favor of admis-sion or of ex-clusion‹in particular cases.
	2. They may kick out troublemakers, people who have prov-en to be consistently off-topic, or rude, or kooky‹as always, in the opera-tor's judgment. 
	3. They may automatically filter all mes-sages to exclude particular words, such as profanities. 
	4. They may manually screen each message that's sent to the conference before actually passing it along to all conference par-ticipants. This can, of course, be a time-consum-ing process, though for many conferences it might not be prohibitively so.
	And, as with newspapers and physical con-ferences, editorial decisions make a big dif-ference in the conference content on three different levels. First, editing decisions directly dictate what can be said. A confer-ence that's open to everyone will be different from one that's open only to law professors. A conference that allows militant and even rude debate will be different from one that re-quires more gentility. A conference on, say, religious free-dom that doesn't allow posts which rely on explicitly religious foundations (on the theory that such posts are likely to distract discussion into unresolvable theolog-ical arguments) will be differ-ent from one that takes another approach.
	Second, editing one post can cut short a whole discussion. Be-cause conferences are in-teractive, one post leads to others. Excluding one rude message may avoid dozens of messages re-sponding to it, responding to the responses, commenting on the merits of polite de-bate over rude debate, and so on.
	Third, including or excluding certain mes-sages will change who participates. Some peo-ple will get involved in polite discus-sions‹both speaking and listening‹but will turn away if the discussion turns nasty. Oth-ers will participate only so long as there are comparatively few posts that they see as irrelevant. A law professor might be willing to read a law professors-only con-ference but not be interested in a general public confer-ence, or vice versa.

B. The Right to Edit

 
	1. The right to exclude content.
	Where there are editors, there are speakers who resent being edited out. Prodigy, for in-stance, has been criticized for its edit-ing practices, which have at times included auto-matically screen-ing out profanities, deleting messages that denied the existence of the Ho-locaust, deleting messages criticizing Prodigy's pricing policies (and urging a boy-cott of Prodigy), and kicking off users who persisted in posting these messages.  Similarly, oper-ators of Internet discussion lists who try to restrict what's said on the list, and by whom it's said, can expect a good deal of resis-tance. 
	Private conference operators clearly don't violate the Consti-tution by editing, just like newspaper editors don't abridge free speech by refusing to publish a letter to the editor. Some have argued that private providers' use of government-funded or gov-ernment-regulated Net backbones makes them state actors and thus bound by the First Amendment; this, though, is cer-tainly not so under existing state-action doctrine. 
	But editing is not only constitutional, it is constitutionally protected. A law that would, for instance, prohibit conference oper-ators from screening messages, or even allow screening for relevance but prohibit screening for viewpoint, would violate the First Amend-ment. As the Court held in 1974 in Miami Her-ald Publishing Co. v Tornillo  and recently reaffirmed in Hurley v Irish-American Gay, Lesbian and Bisexual Group,  the freedom to speak includes the freedom to create one's own mix of speech.
	A parade, a magazine, the playlist of a music radio station, and an edited electronic conference are all speech products creat-ed by an editor. ³Rather like a composer, the [edi-tor] selects the expressive units of the [pub-lication] from potential participants² to cre-ate a particular work.  Restricting the editor's right to edit would be restricting his right to create a particular speech prod-uct: it would make ille-gal the production of certain speech mixes and require instead the production of others. ³The choice of mate-rial to go into a [publica-tion], and the decisions made as to limi-tations on the [publication's] size and content . . . constitute the exercise of editorial control and judgment,²  and this edito-ri-al judgment is constitutionally protected from govern-ment in-ter-fer-ence. This is the rule for newspapers and parades, and it should be the same for electronic conferences.
	Of course, many conference operators don't have a specific ideological perspective they want to communicate. They may just want to spread information about a certain topic and may ex-clude material only because they think it's irrelevant, impolite, or inaccurate, not because it clashes with their viewpoint.
	But ³a narrow, succinctly articulable mes-sage is not a condi-tion of constitutional pro-tection.²  The decision by the St. Patrick's Day parade orga-nizers to exclude one group was pro-tect-ed even though the remaining parade wasn't communicating much by way of a specif-ic ideology. The editorial choices of a nonparti-san news-paper that assiduously tries to avoid all politi-cal bias are as pro-tected as other papers' choices. The editing deci-sions of a conference operator are equally a conscious attempt to create a speech prod-uct with a par-ticular content; their claim to be-ing protect-ed exercis-es of editorial judgment is as strong as that of the deci-sions of the news-papers or parade orga-nizers.
	Nor should it be relevant that electronic conferences are less selective than newspapers and magazines. It's true that newspa-pers and maga-zines publish only a small fraction of what might be submit-ted to them, while even edited elec-tronic conferences tend to let through almost all the messages that people try to post.  But this lower selec-tiv-ity shouldn't keep the editors' edi-to-rial judgments from being protected.
	Technology eliminates the need to edit for paper-saving rea-sons, but the editors' desires to edit for germane-ness, civility, and even viewpoint remain as legitimate as they are in the news-pa-per con-text. Compelling opera-tors to give access to the con-ferenc-es to ev-eryone proba-bly won't cost the opera-tors any-thing out of pocket, but it will cost them the ability to create the speech prod-uct they pre-fer. As the Court has held, ³[e]ven if a news-paper would face no addi-tional cost to comply with a com-pul-so-ry access law and would not be forced to forgo the publica-tion of [its own chosen mate-ri-als] by the [compelled access],² the First Amend-ment would still prohibit the compelled access law's ³intrusion into the function of edit-ors.²  And, of course, Hurley made clear that the editorial func-tion remains protected even when, as in a parade, the edi-tors rare-ly exercise it. 
	The Court has, in two contexts, upheld laws that require pri-vate property owners to let others speak on their property, but neither of these narrow exceptions should be applicable to elec-tronic conferences:
	Broadcasting: The Court has tolerated ³more intrusive regu-la-tion of broadcast speakers than of speakers in other media²;  in par-tic-ular, Red Lion Broadcasting Co. v FCC  up-held a rule requiring broadcasters to give time to opposing views. But the Court has re-fused to extend its rela-tively deferential scrutiny of broadcasting controls to other media, such as newspapers or cable TV.  Red Lion has been read as turning entire-ly on ³the unique phy-si-cal limita-tions of the broadcast medi-um²‹the physi-cal scarcity of avail-able broadcast chan-nels.  No such limita-tions ex-ist for elec-tronic confer-ences; there are thousands of con-ferenc-es avail-able to every-one who has Internet access (which includes users of Prod-igy, Compu--Serve, America On-line, and similar ser-vices). Even if one counts only the three big ser-vices, three is still more than the num-ber of cable operators or large local news-pa-pers that serve the typical city. Given that the Court has refused to apply Red Lion to cable and news-papers, I don't see how it could justify applying Red Lion to elec-tronic con-ferenc-es.
	Content-Neutral Access Mandates: In two cases, the Court at least partly approved con-tent-neutral speaker access mandates. Turner Broadcasting System v FCC  indi-cated that the govern-ment may in some circumstances re-quire cable-system operators to leave open some channels for local broadcast-ers. PruneYard Shop-ping Center v Robins  held that state law may require shop-ping center owners to let members of the public speak in the center's public areas. The more recent Hurley deci-sion, though, makes clear that these cases wouldn't justify even content-neu-tral access mandates to electron-ic confer-enc-es.
	An electronic conference, like the parade involved in Hurley or the newpaper in Miami Herald, is a more or less coher-ent speech product, one whose content is a func-tion of all its com-po-nents. A parade organizer, newspaper editor, or conference opera-tor may solic-it speech from the public, and may decide to let much of it through unedited; but this is just one possible choice on his part, and he might equally well choose to fashion his speech product out of only a cer-tain set of messages. When the govern-ment re-quires a confer-ence operator to include speech that he would prefer to exclude, it's order-ing the operator to change the char-acter of the information the confer-ence conveys. Just as a St. Patrick's Day parade which includes an ³Irish American Gay, Lesbian and Bisexual Group of Boston² banner communicates some-thing dif-ferent from a St. Patrick's Day parade which ex--
cludes this ban-ner,  so an unedit-ed confer-ence communi-cates something other than an edited one.
	PruneYard, as Hurley pointed out, ³did not involve `any con-cern that [mandated access by other speakers] might affect the shopping center owner's exercise of his own right to speak.'²  Shopping cen-ters aren't usually in the speech business; ³[t]he selection of mate-rial for publication is not generally a con-cern of shopping centers.²  The speech by mem-bers of the public didn't interfere with any messages the shopping center was trying to communicate. ³The principle of speaker's au-tonomy was simply not threatened in that case.² 
	It's true that in some cases compelled ac-cess to a shopping center can indeed inter-fere with the center owner's speech. If the owner, for instance, decid-ed to have a patriotic Fourth of July festival, letting flagburning pro-testers on the property might affect the center's speech as much as would letting un-wanted signs into a parade. But such coordinated expressive activi-ty‹the use of the shop-ping center to communicate a message or a set of messag-es‹is the exception rather than the rule. Prune-Yard didn't fore-close the possibil-ity that, in such a context, gov-ernment-man-dated inclusion of other speakers in the fes-tival would be unconstitu-tional; as Justice Marshall said in his concur-rence, the shop-ping center owners were ³permit-ted to impose rea-sonable restric-tions on ex-press-ive activi-ty.²  And the Court has never suggested that the government could compel access to, for instance, bookstores or holi-day displays or other places where access might seriously in-terfere with the own-er's own message. 
	Turner Broadcasting did involve a limita-tion on the property owner's speech‹the cable operator could no longer use the chan-nels that were set aside by the law to carry the materi-als it pre-ferred.  But, as Hurley pointed out, cable operators have a mo-no-po-ly; the jus-tification supporting the law in Turner Broad-cast-ing was the survival of broadcast stations that might be threat-ened when a monopolist excludes them.  This was the interest that made the law valid, and this interest is ab-sent in the elec-tronic-conference context. The interest served by restrictions on con-ference editing‹the interest in ³requir[ing] speakers [here, conference operators] to modify the content of their expression to whatever extent beneficiaries of the law choose to alter it with messages of their own²‹is, according to Hurley, ³exact-ly what the gener-al rule of speaker's autonomy forbids.² 
	Of course, speakers would prefer to have access to an exist-ing conference, with its estab-lished pool of listeners, even when set-ting up new con-ferenc-es isn't hard. But, as in Hurley, though ³the size and success of [an existing confer-ence] makes it an enviable ve-hicle for the dissemi-nation of [disparate] views, . . . that fact, without more, would fall far short of sup-porting a claim that [the confer-ence] enjoy[s] an abiding monop-oly of access to spectators.² 

	2. The right to exclude speakers.
	Some conference operators may want to limit access based on who a person is‹for instance, on the person's occupation, profes-sion-al standing, political opinions, religion, sex, or race‹and not just on what he posts. Many traditional conferences certainly select their speakers this way. Of course, it's often hard to tell these things about a person online, so someone might lie his way into a closed group without much difficulty. But few people gen-er-ally want to do this, and in any event, even online the truth might come out.
	Sometimes, the person's status may be used as a proxy for his knowledge: Counsel Connect, for instance, is generally re-stricted to lawyers, largely because lawyers are more likely to talk and think in particular ways, ways useful to other lawyers. If a lawyer asks a ques-tion about First Amendment law, other law-yers are more likely to respond by citing cas-es; laypeople may instead respond with textual arguments (³Congress shall make no law²) or moral arguments that lawyers may know are gen-erally not accepted by courts. 
	A person's identity can also be directly relevant to the confer-ence operator's purpos-es. Some conferences are aimed at dealing with issues facing a particular group. Democrats might want to argue about what the Democratic Party platform should be. Ho-mosexuals might want to debate what the homosexual community's stance ought to be on a particular issue. Southern Baptists might want to discuss what stance Southern Baptist churches should take on homosexuality. Blacks might want to argue how they as blacks should react to Louis Farrakhan; whites might want to debate how whites should deal with prob-lems of police racism; men or women might want to share thoughts on why their own sex is superior. In each situation, people might specifically want to hear the voices of their fellow group mem-bers (whatever they have to say) and not of others (no matter how sympathetic to the group they might be). We see these sorts of group-limited symposia often in the offline world, where they are some-times praised and sometimes condemned.
	Finally, a person's identity might more subtly influence the conference operator's actions. An operator might be more willing to bend the rules for, say, academics or women or whites or ag-nos-tics than he would be for oth-ers. An operator might more quickly kick off a misbehaving person with a male-sounding name than with a female-sound-ing name, or vice ver-sa. And regardless of the operator's actual rea-sons, a person who's denied access to a conference‹or who's kicked off after having had ac-cess‹might believe that his group mem-bership was the reason.
	Can the government bar conference operators from dis-crimi-nating based on, say, race, sex, religion, age, political opinion, marital sta-tus, sexual orientation, profession, or educa-tion? The law already bars various forms of discrimination in public accom-modations. Pri-vate clubs,  parades,  and the Boy Scouts  have all been viewed by at least some govern-ment agencies as places of public accom-moda-tion; the same logic might be applied to elec-tronic conferences.  And some juris-dic-tions prohibit much more than just discrim-ina-tion based on race, sex, religion, or na-tional ori-gin: The District of Colum-bia, for instance, also bars discrimi-nation based on ³age, mari-tal status, personal appear-ance, sexual orien-tation, family responsibilities, disabil-ity, matriculation, political affilia-tion, source of income, or place of resi-dence or busi-ness.² 
	The Court has never squarely dealt with this. Hurley held only that the parade orga-nizers had the right to exclude speech that en-dorsed homosexuality‹it didn't decide wheth-er parade organizers had the right to ex-clude homosexuals.  The Court has several times con-fronted the question whether barring sex dis-crimination by private clubs would abridge the club members' rights to freedom of expres-sive association, but this too is a some-what different matter. When a club is forced to admit unwanted members, the danger is the pos-sibili-ty that ³admission of [the unwanted peo-ple] as voting members will change the message communicated by the group's speech.²  When a conference is forced to accept unwanted speak-ers, the danger is the certainty that admis-sion of the speakers will change the mes-sage com-mu-nicated within the conference.
	Still, Hurley did suggest that the expres-sive association cases may be relevant to de-termining whether parades‹or, presum-ably, con-ferences, whether electronic or not‹can dis-criminate in 
 selecting their participants.  The rule the Court announced in those cases has two components.
	First, the First Amendment is implicated only when the law will indeed ³change the con-tent or impact of the organization's speech.²  To determine whether this is so, a court can't just con-sider generalizations, even statistically accurate ones, about the beliefs shared by most women or most men (or, presumably, by most mem-bers of other classes defined by quasi-suspect or sus-pect attrib-utes such as race).  When a law ³requires no change in the [associa-tion's] creed . . . and . . . impos-es no re-stric-tions on the organization's ability to exclude individ-uals with ideolo-gies or philosophies different from those of its existing mem-bers,²  the orga-ni-zation must ³show that it is organized for spe-cific expressive purposes and that it will not be able to advo-cate its desired viewpoints nearly as effectively if it cannot confine its membership to those who share [a particular attrib-ute].² 
	Second, even if the First Amendment is im-plicated, the regu-lation may still be upheld if it's narrowly tailored to a compelling state inter-est which is unrelated to the sup-pression of ideas.  The prevention of sex discrimination, even in organizations which do not actually engage in commerce but only provide leadership skills and business contacts, is such a compelling inter-est.  Pre-sumably the same would be true of the prevention of race and national origin dis-crimina-tion.  And a prohibition on dis-crimination in membership is by definition narrowly tailored to the interest.
	Justice O'Connor, recently joined by Jus-tice Kennedy, has taken a different view. Un-der her approach, the only inquiry must be whether the organization is primarily commer-cial, which is true ³when, and only when, the association's activities are not predominantly of the type protected by the First Amend-ment²‹are not predominantly expressive.  If the organization's activities are primarily commercial, then it has only minimal expres-sive association rights,  and govern-ment interference with its membership criteria would be permis-sible.  If the organization's activ-ities are primarily ex-pressive, then ³both the content of its mes-sage and the choice of its members² are pro-tected. 
	Thus, if Justice O'Connor's approach is transplanted from the expressive association context to electronic conferences, most conference operators‹all those whose conferences are devoted to something other than commercial transactions‹would have the unlimited right to discriminate in membership.
	If the majority view is applied, however, the result is less clear. To begin with, the conference operator will have to show that ³the content or impact of the [conference's] speech²  will be changed if the participant restrictions are lifted. Under one defi-nition of ³content² this shouldn't be hard; certainly the content of a conference will be changed whenever new speakers are allowed. On the oth-er hand, if courts insist that the change not just be to the exact words the conference con-tains, but to some substantive aspects of the discussion, the operator will have to show that, say, nonlawyers or women or blacks as a group will probably have different views on various topics than lawyers or men or whites as a group. And when the group is defined by a suspect or quasi-suspect attribute, such as race or sex, the opera-tor will have to show this using more than just statistical general-iza-tions (even empirically valid ones). 
	Next, the court would ask whether the gov-ernment has a compelling interest in barring the particular form of discrimina-tion. Such a compelling interest quite likely exists for race, na-tional origin, sex, and probably reli-gion. For other attributes, it's less clear. State courts are, for instance, split on whether pre-venting discrimination based on marital status, sexual orienta-tion, and age are compelling interests,  and I know of no deci-sions dealing with whether there's a com-pelling interest in bar-ring private discrimi-nation based on, say, political affilia-tion.
	In my view, Justice O'Connor's framework is the better one, especially when one is dealing with choice of speakers and not just with choice of members in an organization.  An all-lawyer, all-Repub-lican, all-female, all-white, or all-Catholic electronic conference pres-ents a unique speech mix for its partici-pants. We might not be entirely happy that some people prefer to talk only to members of their own group, but‹especially where no sala-ry or other tangible economic benefits are directly in-volved ‹people's choice of cor-re----spondents seems as much a part of the free-dom of speech as their choice of what to say or listen to.
	Nor is it proper to allow only those exclu-sions that are in some way germane to the con-ference topic‹to say that, for in-stance, wom-en might be excluded from an electronic confer-ence for discussion of men's issues, but not from an electronic confer-ence on, say, bank-ruptcy law. It shouldn't be the government's job to determine what's germane to an expres-sive association's purposes and what's not. Ex-cluding women (or men) from a bank-ruptcy law discussion will defi-nitely change the discus-sion con-tent; we might not think it will change the content in any re-motely interesting way, but presumably the discussion organizers disagree. Hurley tells us it's up to the pa-rade organizer, not the government, to decide whether including a certain message would unacceptably change the parade's message. If Justice O'Connor is right to equate an expres-sive association's interest in ³the content of its message² and ³the choice of its members,² then the decisions about membership in an ex-pressive association‹or an elec-tronic conference‹should likewise be in the organizer's hands.
	In at least one area, in fact, antidiscrimination law has been appropriately trumped by the First Amendment; despite Title VII, churches continue to have the right to discriminate based on race and sex in their choice of cler-gy. ³The right to choose minis-ters without government restriction un-derlies the well-being of religious com-munity, for perpetuation of a church's existence may depend upon those whom it selects to preach its values, teach its mes-sage, and inter-pret its doc-trines both to its own membership and to the world at large.²  Though the inter-est in stopping race and sex discrimination is normal-ly compelling, in the con-text of clergy selection it must yield to the church's rights under the Free Exercise Clause.  Conference participants are to a con-ference what clergy are to a church: The perpetua-tion of a confer-ence's distinctive content depends on those whom the operator selects to contribute to it.

	3. Possibly permissible requirements.
	All the above has turned on the conference operator's right to create a coherent speech product. Regulations that don't jeopar-dize this right are a different story. For instance, a law that required online service providers to of-fer person-to-person e-mail services to every-one and barred providers from restricting the content of such message would probably be constitutional.
	The same should even be true of a law that required service providers (Prodigy and the like) to give their users the ability to cre-ate new electronic conferences. Such laws wouldn't prohibit the creation of any speech products; operators could still edit their own conferenc-es any way they please. (One could, of course, still oppose these laws on the policy grounds that the government gen-erally should-n't inter-fere with private businesses, or even argue that such laws may some-times be takings of private prop-erty without just compensa-tion. )
	It may also be permissible to restrict op-erators from chang-ing posts (as opposed to deleting them) without the authors' per-mis-sion. Changing people's posts essentially rep-resents them as having said something they didn't say‹it implies a false state-ment of fact, ³X said Y² where in reality X said Z. This sort of knowingly false statement should be constitutionally unprotect-ed.  
	In fact, such modifications of others' posts may already be prohibited in many situations. Under the Copyright Act,  both copying someone's work and transforming or abridging it are presumptively infringe-ments. By posting to an electronic confer-ence the author obviously gives the conference operator an im-plied license to copy the work in order to forward it to the other conference members, but he probably doesn't give an implied license to change it. Putting words into someone's (elec-tronic) mouth may also risk a false-light invasion of privacy lawsuit, and, in a commercial context, a misattribution claim under the Lanham Act.  If an operator wants to change a con-ference participant's words, the operator should get the person's agree-ment, either at the time of the post or be-forehand (for in-stance, when the person signs a Terms of Service agree-ment that makes clear that certain words will be deleted from all posts).

C. Editing from the Listener's Perspective

	The Value of Editing: I've focused on the interests of the conference editor as speaker, largely because this is what the doctrine has generally done. But, as I mentioned earlier, editing is also critical to the interests of listeners.
	As the Court has recognized, listeners have substantial claims to autonomy in their selec-tion of the speech they hear: ³no-one has a right to press even `good' ideas on an unwill-ing recipient.²  In many contexts, this au-tono-my can't justify silenc-ing a speaker, be-cause other, willing listeners might be pres-ent. But listener choice remains an important value; practically, if a medium can't give listeners what they want, listeners aren't likely to use it.
	Private intermediaries are a vital tool for listener choice. Listeners who want more op-tions are generally better served not by a media outlet which carries everything submit-ted to it, or even by many such outlets, but by many edited media outlets, each with its own editorial judgment. I'd rather have access to twenty radio stations, each with its own playlist, than to twenty (or even fifty) sta-tions that are all open to all comers. And just as speakers' rights to speak can often be fully realized only by their right to associate to form a more powerful speaker (albeit one that might not always perfectly track the ideas of each of its individual members),  so listeners' control over what they listen to is often made possible by the editors' right to edit (even though the result might not per-fectly track the interests of each of the editor's customers).
 	Nor would it be wise to prohibit viewpoint-based editing, while allowing editing based on subject matter. Some of the most useful forms of editing are at least partly based on viewpoint. This is com-mon in the print world: The New Republic and The Nation-al Review, for in-stance, are useful to their readers precise-ly be-cause they have particular outlooks on the world. Likewise, con-ventional conferences of-ten invite speakers precisely because of the viewpoints they express.
	The same goes for electronic conferences. A biology discus-sion group might, for instance, reject messages that take a creationist perspective. A gay-rights discussion group might re-ject messages that argue that gay rights are a bad idea because homosexuality is evil. A Christian theology discussion group might re-ject messages that try to prove there is no God. Even the most open-minded of us can't devote our time to debating every-thing. Once we're confident enough about a certain propo-si-tion‹that evolution is correct, that homo-sexuality isn't immoral, that God exists‹we may want to spend time discussing its impli-ca-tions rather than rehashing the arguments about whether it's correct. Messages that ex-press contrary viewpoints, messages that respond to them, further responses to the re-sponses, and so on, will be useless to us, and by decreasing the signal-to-noise ratio will make the whole conference less useful.
	Of course, this doesn't mean that most electronic conferences will be completely doc-trinaire. Debate is the lifeblood of electron-ic conferences; few conferences of which I know have much of an ideological litmus test. But while the typical conference may tolerate a wide range of opinions, the editor may de-cide that certain perspectives are be-yond the pale. He may do participants a service‹making the confer-ence more valuable to them‹by ex-cluding those perspectives.
	The Drawbacks of Editing: Of course, edito-rial judgment itself limits listener choice, by depriving listeners of access to voices which they might like. Perhaps I might be dis-appointed by the law professor-only conference, and wish that my friend the layman could partici-pate. Perhaps a biologist might think his colleagues could profit from learning more about the creation scientists' arguments, even if many of his colleagues might think they've heard enough of them.
	But because these limitations are a matter of private deci-sion, not of government rule, they are generally easier to avoid. If enough lis-teners want to hear a particular view and one confer-ence doesn't carry it, others proba-bly will. And if no conference is interested in carrying the view, then chances are that this is because too few listeners want to hear it. In that case, the only way that those who are interested can be satisfied is by imposing on the greater number who aren't interest-ed.
	We see this happening already. Among the big services, Prodigy advertises its editing, while CompuServe generally im-poses no content controls. Counsel Connect provides lawyer-only discussions, while many conferences on the big services and on the Internet are open to everyone. There's an AMEND1-L Internet free speech discussion list  that's open to all and a CLSPEECH list  just for law profes-sors. New Internet discus-sion lists are cheap to start; people who already have accounts with certain Internet providers such as Netcom‹accounts that cost about $10 per month‹can set up such lists for free. And these discussion lists will be open to all Prodigy, America Online, and CompuServe users, as well as those who have direct Internet access.
	Of course, editing won't always be benefi-cial to listeners. To take one example, Prodigy's notorious removal of messages criti-cal of Prodigy's pricing policies was in no one's interests but Prodigy's own.  One could defend this on Miami Herald grounds as part of Prodigy's edito-rial control rights, but it's hard to justify it on listener auton-omy grounds. This, though, was an unusual in-ci-dent, and one that had little overall nega-tive impact on speak-ers or listeners. Banning this sort of conduct might not hurt listeners, but it wouldn't have helped them much, either.
	On the other hand, Prodigy's removal of anti-Semitic messag-es from some bulletin boards and its automatic editing of offen-sive words may be of significant value to many lis-teners. Just as I'm entitled to avoid magazines that print anti-Se-mitic propagan-da, I have a legitimate interest in having maga-zine edi-tors, act-ing as my agents, exclude the anti-Semitic mate-rial for me. Hav-ing Prodigy impose this editing policy gives me as listener a choice: be exposed to a restricted set of views on Prodi-gy, or to an unedited set on CompuServe or on the Internet. Bar-ring Prodigy from editing would deprive me of that choice.  On government property, we may have no choice but to suffer offensive speech, but there's no rea-son this has to apply to private-ly owned fora.
	Naturally, by increasing listener choice, editing also increas-es listeners' ability to choose unwisely. Listeners who choose confer-ences that tolerate only their own viewpoint, or those that shut down passionate debate, or even those that ex-clude racist speech, might be sealing themselves off from impor-tant argu-ments, arguments they might find persuasive (or at least worth knowing) if they saw them. Some might see this danger as a justifica-tion for laws that would open up the conferences and make sure that listeners don't shut themselves off from balanced debate.
	But though listeners may make the wrong decision, I believe it's better to leave these decisions to the listeners rather than to the government. It seems morally troubling for the govern-ment to force unwanted speech onto listeners; and I'm skeptical that even a well-motivated government can be good at determin-ing what listeners really ought to hear and what they can legitimate-ly seek to avoid.
	Equally importantly, I doubt that any at-tempts to save lis-teners from their narrow-mindedness will really work. If listeners want to cocoon themselves from opposing ideas, it's hard to see what can be done about that. Maybe compelled access will give some listeners some information for which they'll ultimately be grateful, even though they didn't at first want it. But I doubt this will often happen; you can make people receive mes-sages, but you can't make them read them. And in some situa-tions‹for instance, if the government bars editors from screening out in-sults or racial attacks or even ignoramuses‹many listeners may just stop reading the conference altogether. In trying to make people more informed, the government might cause them to become less informed.

D. Defamation Liability

	There have so far been no direct legal threats to conference operators' right to ed-it. There has been, however, one recent indi-rect threat: the assertion by one court‹and some commenta-tors‹that editing should increase the conference operator's expo-sure to defama-tion liability. 
	People who run electronic conferences, ed-ited or not, may be liable for defamatory statements posted on those conferences. As a general rule, those who participate in dis-tributing a libel are liable together with the original author; the same may apply to the confer-ence operator.
	A republisher of a libel‹for instance, a newspaper printing an op-ed or even a letter to the editor‹is liable under the famil-iar constitutional framework:
	Public Figure/Public Concern: If the false statement is about a public figure and is on a matter of public concern, the repub-lisher is liable if he knows the statement is false or recklessly disregards the possibility that it's false. 
	Private Figure/Public Concern: If the false statement is about a private figure and is on a matter of public concern, the republisher is liable if he acts negligently in publishing the state-ment (for instance, doesn't do the factual investigation that a reasonable person would have done). 
	Private Concern: If the false statement is on a matter of private concern, the republish-er might theoretically be strictly liable.  In practice, though, few states impose strict liability even on the person who originally makes the statement,  and I've seen no re-cent case that imposed strict liability on the re-publisher. Whether such strict liability would be constitutionally permissible is an open question. 
	A distributor who isn't a republisher‹for instance, a book-store or a newsstand‹can be held liable, too, but such a distribu-tor is given an extra immunity: It isn't liable if it ³neither knows nor has reason to know of the defamatory article,² and it is gen-erally ³un-der no duty to examine the various publica-tions that [it] offers . . . to ascertain whether they contain any defamatory items,² unless a particular publication ³notoriously persists in printing scandalous items.² 
	Much of the recent controversy about online libel turns on wheth-er conference operators should be seen as republishers or distribu-tors; but in practice this distinction isn't that important here. Whether he's a republish-er or a distributor, a conference operator will be liable for public figure/public con-cern statements only if he's acting with actu-al malice. And regardless of whether he's a republisher or a distributor, an operator will be liable for private figure/public concern statements under some sort of negli-gence stan-dard‹if an operator ³has reason to know² that a post is defamatory, he is vulnerable to a lawsuit even if he is seen only as a distributor. The one area of possible difference would be statements on matters of private con-cern, but even there it seems unlikely that a conference operator would be held strictly liable even as a republisher. 
	The conference operator's main worry, then, has to be about what the negligence stan-dard‹the lowest standard with which he'll have to deal‹means in practice. Is it reasonable to let all posts through, or does the duty of care include a duty to prescreen? If the oper-ator does have a chance to screen the mes-sag-es, must he read them carefully, or is it reasonable to adopt a ³let-it-through-unless-it's-clearly-off-topic² policy?
	It's here that a court's attitude towards editing becomes important, because the choice of a duty of care is in large part a policy decision for the court to make. What level of expense and effort is ³reasonable² to expect can turn, rightly or wrongly, on the court's view of the so-cial utility of the underlying conduct. If a court believes that editing is a bad thing, it might impose more
 
 liability on conference operators who edit than it would on those who don't edit.
	Stratton Oakmont, Inc. v Prodigy Services Co.,  a libel case which held Prodigy to a higher standard than CompuServe be-cause Prodi-gy edited and CompuServe didn't, is a case in point. Formally, the court claimed it was sim-ply determining whether the better analo-gy for Prodigy was the bookstore (a distributor) or the newspaper (a publisher). ³Prodigy's con-scious choice, to gain the benefits of edito-rial control,² the court concluded, ³has opened it up to a greater liabil-ity than . . . other com-puter net-works that make no such choice,² and than ³bookstores, libraries, and network affiliates.²  The ³decision to regu---------late the content of its bulletin boards . . . simply require[s] that . . . [Prodigy] also accept the concomitant legal consequenc-es² ‹with edito-rial control comes increased liability. Prodigy was more like a pub-lisher than a distributor because it ³[had] uniquely arrogated to itself the role of de-termining what is proper for its mem-bers to post and read on its bulletin boards.² 
	Now it's true that, under conventional neg-ligence principles, one's ability to avoid harmful conduct (here, defamation) is rele-vant to whether one has a duty to try to avoid it, so situations in which the operators have the opportunity to exercise editorial control may in-deed properly lead to greater liability. If operators actually read all incoming messages before distributing them to the conference, then it becomes more likely that they'll know about the defamatory state-ment; in that case, the operator may be liable regardless of whether it's viewed as a distributor. And even if the operator doesn't read the messages, the fact that it has an ³editorial staff . . . who have the abili-ty to continually monitor incom-ing transmissions²  might make it fair to impose on it the duty to read the messages.
	But the Stratton Oakmont court didn't limit its discussion of Prodigy's editing to manual editing: It also referred to the auto-matic software screening program and to Prodigy's practice of deleting some messages after they've been posted, presumably once they have triggered subscriber complaints.  These prac-tices don't change the cost to the opera-tor (and, indirectly, to its cus-tomers) of greater monitoring for libel; they don't change the benefits to defamation victims that such greater monitoring would bring. There's no inherent reason that these sorts of edit-ing decisions should affect the negligence calcu-lus.
	Thus, the court's decision wasn't an appli-cation of settled negligence principles. But neither was it an application of a set-tled libel law distinction between publishers and distributors. The court's mod-els of distribu-tors‹bookstores and network affili-ates‹do ex-ercise editorial control; they, no less than Prodigy, determine what their customers and viewers will see. They select which books they'll carry or which shows they'll broad-cast. Some-times they refuse to carry an item if it seems to them to contain offensive, ideologically unpalatable, or just unpopular material. They may lack the ability to edit books or TV shows line-by-line, but for prac-tical purposes Prodigy lacks this ability, too. Actually, Prodigy is much less selective about its posts than a bookstore is about the books it carries: Bookstores choose to stock only a frac-tion of all the books that are available to them, while Prodigy lets through virtually all the posts submitted to it.
	It therefore seems to me that the court's decision reflects not the com-mands of established libel or negligence principles, but rather a policy judgment about the propriety of editing. Con-sider the court's assertion that Prodigy ³has uniquely arrogated to itself the role of determining what is proper for its members to post and read on its bulle-tin boards²;  its stress that editing ³may have a chilling ef-fect on freedom of communication in Cyberspace, . . . [a] chilling effect [which appears to be] exactly what PRODIGY wants²;  and its two references to Prodigy's conduct as ³censor-ship.²  The court seemed to be exact-ing great-er liability as the price for bad, or at least suspect, behavior.
	For the reasons I mentioned above, this is the wrong policy choice to make. Editing is a valuable service, and conference opera-tors shouldn't be discouraged from performing it. Depending on how you weigh the interests in private reputation and in un-inhibited speech, some sort of operator liability may be appropri-ate.  The eco-nomic feasibility of editing might play a role in the balance, just as the economic fea-sibility of preventive measures is general-ly relevant in negligence analyses. But whether the opera-tor actually edits shouldn't affect the place the line is ultimately drawn. 
	The Communications Act of 1996  can be read as prohibit-ing courts from penal-izing conference operators for edit-ing. The Act says:

	No provider or user of an interactive com-puter service shall be treated as the publish-er or speaker of any in-formation provided by another information con-tent provider. . . . 
	No provider or user shall be held liable on account of . . . any action volun-tarily taken in good faith to restrict access to or avail-ability of material that the provider or user considers to be obscene, lewd, lascivi-ous, filthy, excessively violent, harassing, or oth-erwise objectionable . . . . 
	The term ³in-formation content pro-vider² means any person or entity that is responsible, in whole or in part, for the creation of development of in-formation provided through the Internet or any other inter-active computer ser-vice. 


I think that the best reading of the statute is that no conference opera-tor shall be held liable as a publisher or republisher for defamatory speech by con-ference participants; that the operator's ed-iting can't be considered in determining whether he should be exposed to defama-tion liability; and that the ³or otherwise objec-tionable² clause gives protection to any of the operator's edit-ing choices.
	On the other hand, one can at least argue that: (1) a confer-ence operator can be held liable as transmitter of a defamatory state-ment on the same terms as the original speak-er, so long as state law does not label him a ³publisher² or a ³speaker²; (2) considering an operator's editing decisions as a factor in deter-mining the operator's standard of care does not constitute impos-ing liability ³on account of² his editing; (3) the ³or otherwise objectionable² proviso only protects editing choices that turn on the offensive form of speech and not, say, on viewpoint-based or subject matter-based editing choices; or (4) ³information content provider,² despite its breadth, doesn't include individual contribu-tors to a conference.
	These latter arguments, I believe, are something of a stretch, which is why I think the Communications Act does bar Stratton Oakmont-type reasoning. But there's enough ambiguity in the statute that the matter is not free from doubt.

E.  Edited Conference Groups on Public Com-put-ers or Run by 	Public Employees

	Many of the computers that make up the Internet are run by public institutions, gen-erally public universities. Many Internet electronic conferences are operated from those computers, and many are operated by public employees, especially academics.
	Does the editing of such conferences stand on a different footing from the editing of private conferences? Does the public-forum doctrine, for instance, make certain forms of editing uncon-stitutional? Conversely, does the government's ownership of the computers or control over its employees give it the pow-er‹even if not the duty‹to restrict their ed-iting activities?

	1. No constitutional barriers to editing.
	A private person operating an electronic conference on a public computer is not bound by the requirements of the Free Speech Clause; he may restrict speech even based on its view-point. Private speakers don't become state actors just because they're speaking on or using public property.
	This is most obvious with regard to the traditional public fo-r-um‹the organizers of a rally or a parade may control the speech that goes on there, even though they're using pub-lic prop-erty for this speech ‹but it should be equally true for other public prop-erty. A student group meeting in a public school, for instance, should still be able to control its own speaker selection. Use of a public class-room, or of time and space on a public com-put-er, is a valuable government sub-sidy, but tak-ing subsidies (even large ones) doesn't turn a private organization into a state actor for Free Speech Clause purpos-es.  So long as the group's speech-based decisions aren't dic-tated by the government, there's no state action.
	The same should be true when the subsidy comes in the form of the government letting an employee edit a conference on gov-ernment time. Books or journals edited by public university pro-fessors, for instance, have never been thought of as involving state action. Certain-ly the editors routinely make viewpoint-based decisions about what gets published and what doesn't, something state actors generally can't do even in a nonpublic forum. 
	A government employee isn't always a state actor, even when he's acting on government time. So long as he isn't ³exercising power `possessed by virtue of state law and made possible only because the wrongdoer is clothed with the authority of state law,'²  he's acting as a private person. Like a public de-fender, a professor editing an electronic con-ference is engaging in ³essen-tially a private function, traditionally filled by [private persons],
 
 for which state office and authority are not needed,² though in this case state dollars are paying his salary. 

	2. No constitutional right to edit.
	On the other hand, the government may let someone set up an electronic conference on its computers, or allow him to operate it on gov-ernment time, only on condition that he not edit, or that he edit only in certain ways. This is akin to the government's power to cre-ate a designated public forum limited to the discus-sion of particular subjects. The govern-ment may conclude that, if it's going to let public property be used, it should be used only in the way that best serves the pub-lic‹for instance, for a confer-ence that's open to everyone, or a conference that, even if edited, is edited only in viewpoint-neutral ways.
	Nonetheless, I'd recommend that the govern-ment be hesitant to restrict editors' power. As I mentioned above, even viewpoint-based editing may often create a more valuable speech product. For in-stance, a scholarly bi-ology list that accepts messages based on evo-lutionary premises but refuses to accept mes-sages based on creation science premises would probably be discriminating based on view-point: The theory that man was created directly by God is certainly an alternate viewpoint to the theory that man naturally evolved from other animals.  But such a restriction may well be quite appropri-ate. Even an open-minded group of scientists may reasonably con-clude that they'll use one theory as their operating as-sumption. At that point, further arguments based on other theories may just become dis-tractions from the business at hand. The sci-entific community, it seems to me, is better served by one conference devoted to discussion of biological problems from an evolutionary perspective, another from a creation science perspec-tive, and a third for arguing about which is the better perspec-tive, than by three conferences on which creationists and evolu-tionists fight it out.
 	If the concerns about limited access can be allayed not by restraining the editors but by providing more discussion lists on the same topic (but edited in different ways), then providing more lists should be the preferred alternative. Providing the extra list doesn't cost anything by itself; the list is just another entry in the computer's tables. Sometimes add-ing the new edited list may lead to more mes-sages coming through the computer, but often it won't: The separate edited lists may end up having fewer band-width-consuming flame wars and fewer digressions. Editing is a good thing; as a general rule, govern-ment computer owners (and especially academic institutions) should encourage it, not discourage it.

II. GOVERNMENT PROTECTION OF LISTENERS AGAINST OFFENSIVE MESSAGES

	Another desire of listeners is a pleasant, polite speech envi-ron-ment, both one in which they aren't personally insulted, and one in which they don't have to hear more general statements that they might find offensive (for instance, because the state-ments are profane, racist, or sexually explicit). As I argued above, editing decisions by confer-ence owners can be valuable to listen-ers for precisely this reason. Just as many people prefer a ³family newspaper,² or a newspaper run by po-lite editors rather than by bigots or fanat-ics, so many people would prefer a list where flame wars and other forms of abuse are screened out, or at least quick-ly suppressed. But what if the conference opera-tors choose not to intervene‹if they decide not to edit generally, or if they agree with the abusive messages or at least find them valuable enough not to edit out?

A. Protecting Some Listeners Without Bur-den-ing Other Listeners

	In my view, the government may generally restrict speech to protect unwilling listeners only if the restriction doesn't interfere with the flow of speech to willing listeners. Thus, speech on elec-tronic conferences should be protected even if it's offen-sive, in-sulting, pro-fane, or bigoted,  because restricting such speech would ³permit[] majoritarian tastes . . . to preclude a protected message from [reach-ing] a recep-tive, unoffended minor-ity.²  In this, electronic conferenc-es are like billboards, demon-strations, and news-pa-pers. The Court has made clear that re-stricting offen-sive speech in these media would impermissibly impoverish pub-lic dis-course,  and there's no reason the rule should be differ-ent online. The interests of the speaker and of the willing listen-ers must, I believe, prevail over those of the offended listener.
	On the other hand, some restrictions on unwanted one-to-one communications, such as physical mail, phone calls, and e-mail, should be constitutionally sound. For one-to-one com-munications, it's possible to create laws that are ³narrowly tailored to protect only unwill-ing recipients of the communications.²  A law that, for in-stance, stops mailers from sending material to people who've already ex-pressed a desire not to get it is constitu-tional;  the same should be true for e-mail.
	Of course, speakers might still want to communicate even to unwilling listeners, and imposition on a speaker's self-expression ought not be taken lightly.  Nonetheless, especially when a listen-er has already told the speaker that he's not interested in hear-ing more, I don't believe the speaker's desire to keep talking should be treated with much solicitude. In such a context, the speech is likely only to annoy or offend, and not en-lighten or persuade anyone.  I agree with the Court that ³no one has a right to press even `good' ideas on an unwilling recipi-ent,²  so long as the unwilling recipi-ent is the only listener involved.
	Space constraints keep me from defending this theoretical posi-tion in detail here, though I've talked about it at some length else-where.  Moreover, a broad theoretical defense is probably prema-ture, since there've been few explicit pro-posals for regulat-ing of-fensive online speech (other than sexually-themed speech, which I discuss in Part III). Instead, I'll focus more specifically on the two sorts of fairly broad restrictions on online speech that may already exist, though they generally aren't enforced this way today: telephone harassment stat-utes and hostile-en-vironment harassment law.

B. Telephone Harassment Laws

	In recent years, some telephone harassment statutes‹which are today generally used to stop indecent, threatening, and other-wise an-noying phone calls‹have been specifically ex-tended to online communications. Others had always been broad enough to include online messages. These statutes vary by jurisdiction, but they tend to prohibit some mix of the fol-lowing:

‹	Threats, a prohibition that general-ly rais-es no First 	Amend-ment prob-lems. 
‹	³[R]epeated telephone calls with intent to annoy another person,² some-times limited to phone calls 	di-rected to the other person's home or work. 
‹	Use of ³indecent or obscene lan-guage,²  some-	times with ³intent to annoy, abuse, or harass.² 
 ‹	Any communication made ³with intent to ha-rass, annoy or alarm another per-son,²  some-times lim-it-ed to those made ³in a manner like-ly to cause an-noy-ance or alarm.² 
‹	Anonymous communications made ³with intent to 	annoy, abuse, . . . or ha-rass.² 


	These statutes have generally been upheld against First Amend-ment challenges, a result which is defensible (though, as I discuss be-low in Part II.E., still problematic).  But extending them literally to online commu-nica-tions causes significant prob-lems.

C. ³Electronic Harassment² in Electronic Con-ferences

	Consider, for instance, the Connecticut telephone harass-ment statute, which has re-cently been amended to say:

(a) A person is guilty of harassment in the second de-	gree when: . . . 
(2) with intent to harass, annoy or alarm an-other per-	son, he communicates with a person by telegraph or 	mail, . . . by computer net-work . . . or by any other 	form of written com-muni-cation, in a manner likely 	to cause annoyance or alarm . . . . 


Read literally, the statute would prohibit me from posting any message to an electronic con-ference ³with intent to . . . annoy² one of the participants (say, someone with whom I'm arguing). After all, by posting a message to a conference, I'm communicat-ing with each of the conference participants; for instance, if the conference is a distribution list, I'm causing a message to be e-
mailed to everyone on the list‹³communicat[ing] with² each of them ³by computer network.² This includes the person I'm trying to annoy.
	How broadly ³annoy² would be read is anybody's guess, but a lot of things said in online conversation are intended at least in part (and sometimes entirely) to annoy one's opponents. Perhaps electronic conferences would be better if everyone intended only to enlighten, and never to annoy, but annoying and offensive speech is nonetheless constitu-tionally protected. Leaflets, news-paper arti-cles, books, and movies can all be annoying (sometimes intentionally) to parts of their audiences; despite this, it seems clear that a ban on ³harassing, annoying, or alarming² speech in them would be unconstitutional.  I see no reason why elec-tronic messages should be less protected.
	The problem is that a statute which origi-nally applied to one-to-one communications is being applied to one-to-many com-munica-tions. Keeping me from sending annoying messages to one particular person doesn't severly restrain public discourse; if the message is meant to irritate the recipient, it's unlikely to per-suade or enlighten him. Its only likely consequence is annoy-ance. But in a one-to-many context, a message that's annoying, even in-tentionally so, to one per-son may indeed be valuable to others.
	I'm not sure that the extension of tele-phone harassment laws to online communications was meant to cover electronic confer-ences. Quite possibly the drafters of the laws were only contem-plating direct e-mail, a one-to-one medium not much different from conventional phone calls. In this context, as I mention be-low, restrictions similar to those imposed on telephone harass-ment might indeed be per-missible. But whether intentionally or not, some of the laws on their face sweep consider-ably further than they should.

D. Hostile-Environment Harassment

	Hostile-environment harassment law is a very different crea-ture from telephone harass-ment law, but it too might have unex-pected consequences in cyberspace.
	The most familiar form of hostile environ-ment harassment is workplace harassment: speech or conduct that is

‹ ³severe or pervasive² enough to
‹ create a ³hostile or abusive work environ-ment²
‹ based on race, sex, religion, national ori-gin, age, 				disability, veteran status, or, in some jurisdictions, 	sexu-al orien-tation, citi-zen/alien status, political 	affilia-tion, mari-tal status, or personal appearance
‹ for the plaintiff and for a reasonable per-son. 


	An employer is liable for hostile envi-ronment harass-ment perpetrated by its employees‹and even its cus-tom-ers ‹so long as it knows or has rea-son to know about the conduct.
	This is a broad definition, and it has in fact been applied to a broad range of speech. A state court, for instance, has held that it was reli-gious harassment for an employer to put religious articles in its employee newsletter and Chris-tian-themed verses on its pay-checks.  The EEOC has likewise concluded that a claim that an em-ployer permitted the daily broadcast of prayers over the public address system was ³sufficient to allege the existence of a hostile working environment predicated on religious discrim-ina-tion.² 
	Similarly, a court has characterized an employee's hanging ³pictures of the Ayatollah Khome[i]ni and a burning Ameri-can flag in Iran in her own cubicle² as ³national-origin ha-rassment² of an Iranian employee who saw the pictures.  Courts have used ha-rassment law to enjoin people from making ³remarks or slurs contrary to their fel-low employees' re-ligious beliefs,²  dis-play-ing materials that are ³sexually suggestive [or] sexually demean-ing,²  or uttering ³any racial, eth-nic, or religious slurs wheth-er in the form of `jokes,' `jests,' or otherwise.²  A fed-er-----al agen-cy has likewise characterized anti-veteran postings at Ohio State University as ha-rass-ment based on Vietnam Era veteran sta-tus. 
	Hostile-environment law may even cover coworkers' use of job titles such as ³foreman² and ³draftsman,²  sexually themed (but not misogynistic) jokes,  and ³legiti-mate² art.  The con-sti-tutional-ity of workplace harassment law is being hotly debat-ed,  but as of this writing the risk of ha-rassment lia-bili-ty is certainly a fact of life.
	What does this have to do with the Internet? Well, the foun-dation of workplace harassment law is the theory that harass-ment is itself discrimination: the denial to cer-tain people of a particular kind of employment benefit‹a tolerable work environ-ment‹based on their race, sex, and so on. 
	This theory is equally applicable to other discrimination statutes, including statutes that bar discrimination in places of public accommodation. Some statutes make this explic-it, prohibit-ing, for instance, ³communication of a sexual nature² that creates ³an intimi-dating, hostile, or offensive . . . public accommoda-tions . . . environ-ment.²  Other statutes that speak only of dis-crimina-tion have also been interpreted as barring harass-ment: For instance, a recent Wiscon-sin admin-istrative agency decision has concluded that an overheard (but loud) discussion that used the word ³nigger² created an illegal hos-tile public accommoda-tions environment for black patrons, even though the statements weren't said to or about the patrons.  Like-wise, the Minnesota Supreme Court has held a health club liable for creating a hostile pub-lic ac-commo-dations environment, based on the club's owners ³belittl[ing]² a patron's reli-gious views (expressed in a book the patron had written) and ³lectur[ing] her on fun-damen-tal-ist Chris-tian doctrine.²  And it's fair-ly well-estab-lished that other antidiscrimination statutes, which ban dis-crimination in educa-tion and housing, also apply to hostile envi-ronment harass-ment;  it stands to reason that the same would be true for pub-lic accom-modations statutes.
	As Part I.B.2 discusses, it's eminently plausible that com-mercial online services would be considered places of public ac-commo-dation. Given that some judges have seen even noncom-mercial establishments‹such as parades, the Boy Scouts, and private clubs‹as places of public accommodation, Prodigy, Coun-sel Con-nect, and others would quite likely quali-fy.  At least one commentator has in fact suggested this very point.  Say, then, that someone frequently posts slurs or sexual jokes or sexu-ally explicit messages or sexist or racist or anti-veteran or reli-giously bigoted statements or even religious proselytizing to an electronic conference. In the eyes of some factfind-ers, such mes-sag-es may well create a ³hostile or abusive² environment for some of the conference participants. If the conference operator has the power to do something about this‹for instance, if the conference is moder-ated but the moderator lets these messages through, or if the operator can kick off the offender but refuses to do so‹the speech could give rise to liability.
	The best real-life online example of this came in the context of hostile educational environment law. In late 1994, in the wake of a controversy about an allegedly sexist ad in the Santa Rosa Junior College newspaper, some students posted sexist remarks about two fe-male student newspaper staffers on a college-run electronic confer-ence.  Though the fe-male students didn't see the message, they eventually learned about it, and when they did, they filed a complaint with the U.S. De-partment of Education's Office for Civil Rights.
	The Office concluded that the messages were probably ³so severe and pervasive as to create a hostile [educational] environ-ment on the basis of sex² for one of the students.  A college tolerating speech that creates a sexu-ally hostile educational envi-ronment would, in the Office's view, violate Title IX of the Civil Rights Act.  If this is so, then a service provider tolerat-ing sim-i-lar speech on its computers would probably be violating pub-lic accommodations statutes.
	I believe these sorts of speech restric-tions are generally un-constitutional, entirely so in the educational and public accom-moda-tions contexts, and partly so in the workplace context. I don't want to go into the details of this here; the arguments have been amply discussed elsewhere.  Put briefly, I can't deny that ³hostile or abusive² speech can greatly diminish the value of an online con-ference‹public or university‹for those who are offend-ed; but such speech, even racially, re-ligiously, or sexually bigoted speech, is pro-tected by the Free Speech Clause from gov-ern-ment abridgment.  It's protected on side-walks, in private homes, in the pages of news-papers. Despite the recent spate of campus speech codes, courts have held that it's pro-tected in universities.  There's no rea-son it shouldn't be equally protected in Prod-igy, Counsel Connect, and the like.
	Some courts have been willing to uphold hostile-environment harassment law in the workplace, though it bears emphasizing that others have suggested that even there it may face substan-tial constitu-tional prob-lems.  But this has been in large part be-cause of their view that ³the workplace is for work-ing,² not for debate.  Electron-ic conferenc-es are created precisely for de-bate. Whatever the constitu-tional status of workplace harass-ment law, such speech restric-tions in places devoted to communi-cation can't be valid.
	But though I'm confident that most restric-tions on harassing speech will ultimately be struck down, the fact remains that they are something of a growth field in free speech law today, and that they enjoy a good deal of support. Hostile environ-ment-based restric-tions on online speech are likely to arise with some frequency in coming years.

E. One-to-One Online Harassment

	Restrictions on some one-to-one messages‹such as personal email‹are at least theo-retically more defensible because they help insulate unwilling listeners while still protecting the right to communi-cate to will-ing ones. Some telephone harass-ment laws have been upheld precisely on these grounds.
	Still, even in the one-to-one context, these laws pose signifi-cant problems. ³Annoy-ing,² ³harassing,² and ³indecent²‹words the laws use to define the speech they bar‹are vague terms, and fairly read, the laws can sweep quite broadly. If an acquaintance of mine has botched a task I asked him to do, and I phone him or e-mail him and say, ³You idiot, you really fucked this up,² I may well have committed harassment; I've said something that's argu-ably both ³annoying² and ³inde-cent,²  I've said it with the in-tent to an-noy (and perhaps ³harass,² whatever that means), and my statement is in fact likely to an-noy. Under many telephone harassment stat-utes, I've committed a crime.
	Likewise, I edit an electronic poetry jour-nal,  and our sub-scribers sometimes send us messages about our poems. One such message said nothing more than ³Your poems suck!²  Under the Connecticut law, send-ing that mes-sage may well have been a misde-meanor; the message was likely to annoy me and could have been intended to do so (as well as to communi-cate the sender's views). I can't claim that the messages in these exam-ples are of remark-ably great First Amendment value, but it isn't clear that this sort of speech should be crim-inal.
	Some of the broader telephone harassment statutes have been held unconstitutional for this very reason.  Other stat-utes have been upheld, especially if they've required that the speech be intend-ed to annoy (which not all statutes do);  and some commenta-tors argue that this intent requirement should help save the law from inval-idity.  But I'm not sure that even those statements made with the in-tent to annoy should be con-sidered crimi-nal‹as my example above shows, many of us might say such things in an exasperated mo-ment, with little likely harm to anyone.
	In practice, of course, telephone harass-ment laws are consid-erably less menacing than their language suggests. It takes con-scious effort to make an annoying call to a stranger; few people complain to the police about the occasional annoying call from an acquaintance; in many such situations, prosecutors may de-cide not to prosecute; and it's often hard to prove what the caller actually said. In some respects, these checks might limit the law's reach to only the most serious situations.
	But the e-mail environment changes some of these condi-tions. While annoying phone calls are usually deliberate pranks, thought-through insults, or conscious attempts to menace, an-noying e-mail can easily happen on the spur of the moment. A person sees a message he dis-likes on an electronic conference, and in a few seconds he can send an angry retort‹one intended to and likely to annoy‹directly to the author's mail-box. And because e-mail, unlike phone calls, leaves a written record, its content is easy to prove.
	The person who sent me the ³Your poems suck!² e-mail prob-ably wouldn't have called the publisher of a print magazine to say the same thing. The ease with which one can reply to an e-mail makes such replies spontaneous and sometimes rude. This sort of conduct seems less like a deliberately harassing phone call, and more like the annoying words said in pub-lic‹one can imagine someone saying the same thing at a poetry reading in a coffee-house‹which are generally not punishable un-less they're likely to cause a fight. In the great ma-jority of cases, recipi-ents will still not complain and prosecutors won't pros-ecute, but in my view these shouldn't be the only barriers be-tween a basi-cally decent computer user and a misdemeanor convic-tion.

F. The Continued Unwanted Contact Model

	Instead of outlawing a particular catego-ry of speech‹the annoy-ing or even the intentionally annoying‹a better solution might be to leave the decision in the listener's hands.  If you don't like what I'm e-mailing to you (and to you alone), you should be able to de-mand that I stop. The demand would put me on notice that my mes-sages have gone beyond the tolera-ble; the law might even require that the no-tice specifically alert me that further con-tact is illegal. Such a law would thus avoid criminalizing the occasional intemperate out-burst, while still giving annoyed recip-ients the power to demand some peace.
	The Court has already, in Rowan v United States Post Office Department,  upheld such a law for physical mail. The law pro-vided that, if any householder concludes that a sender has been send-ing him sexually sugges-tive advertisements, he can notify the Post-master General that all further mailings from the sender must stop. The Postmaster General would then order the sender to remove the re-cipient from its mailing list; if the sender kept sending material, it would be committing a crime.
	Though the law focused on sexually sugges-tive material, the Court didn't ground its (unanimous) conclusion on any supposed ³lower value² of such material. In fact, it was clear that the householder could label any material, including political ads and dry goods cata-logs, as being sexually suggestive: The householder's judg-ment was unreviewable, and the very unreviewability of this judgment was, in the Court's view, central to the law's va-lidity because it kept the decision about what's offensive out of the government's hands.  Though the law kept the sender from ³speaking² to the recipient, the Court con-cluded that ³no one has a right to press even `good' ideas on an unwill-ing recipi-ent.² 
	This logic seems eminently applicable to e-mail; I see no reason for treating electronic communications differently from paper ones. True, you can easily delete e-mail, but you can easily throw out paper mail. You can usu-ally even set up your e-mail program to auto-matical-ly delete messages that come from a par-ticular address, but you can likewise throw out unread letters that come from a particular place. The auto-delete capability might make a Rowan-type law less neces-sary because the mes-sages would get deleted without the recipient even knowing they arrived; still, the sender could get around this by using remailers or other means that hide his address.
	The reasoning in Rowan rested in large part on the privacy of the home; the unwanted con-tinued mail was seen as particu-larly offensive because it intruded on this privacy.  One might therefore ar-gue that any Rowan-inspired law for e-mail should only apply to e-mail that's received at home. But I don't think the concern about unwilling recipients of mail or of e-mail should be any different when they pick up the message at school or at work.
	One of the great features of the new tech-nologies is that one's physical location no longer matters. A person can pick up messages from the office one day and from home the next. The emotional and dignitary burden to listeners of having to see mes-sages to which they've already lodged their objections is the same whether they're in the home or in their office. The burden to speakers of having to stop talking to the listeners is likewise the same regardless of where the offended listener is located. So long as the speakers retain the ability to communicate to unoffended listen-ers, the offended listener should be entitled to demand that communication to him stop, whether he's at home or not.
	To make sure that speakers do retain the ability to commu-nicate to others, the law should be clearly limited only to those situa-tions where the sender can personally choose whether the message is to go to the recipient. For instance, if the message is e-mailed through a distribution list whose membership is outside the sender's control, then the mes-sages to the recipient can't be suppressed without restrict-ing the messages to other list mem-bers.
	The law should also make sure the sender gets adequate notice; a simple ³Oh you idiot, stop bothering me² should proba-bly not be seen as a legally enforceable bar to all future commu-nications. But if someone clearly says they don't want any more e-mail from the sender‹and e-mail programs can easily have the proper language programmed into them so that a sender can send the right form (which would also be saved somewhere for evidentiary pur-poses) at the touch of a button‹there should be no constitutional difficulty with the law enforcing such a demand.
	All this merely shows that the law is con-stitutional, not necessari-ly that it's wise. It's not clear that we need to bring the might of the criminal law down on people just for sending repeat-ed unwanted messages, whether they are ads or personal insults or just pranks. And of course, certain kinds of un-wanted messag-es, such as threats or extortion attempts, would be barred any-way by other laws.
	But there are contexts where repeated un-wanted messages can indeed cause more than just mild annoyance. A Rowan-in-spired law would apply only when the recipient has spe-cifically asked the sender to stop. When some-one keeps contacting you despite your specific requests to the contrary‹when he knows you're so uninterested in hearing that you've taken the trouble to tell him to stop talking‹this might reasonably cause you some alarm. This can be especially so for repeated romantic overtures; the recent spate of stalking legis-lation reflects the fact that per-sistent un-wanted romantic interest, expressed in a con-text where it's clearly not reciprocated, can be quite discon-certing even if no specific threat is present.

III. SEXUALLY EXPLICIT MATERIAL AND MINORS

	Besides wanting to control their own speech diet, people may also want to control that of their children, especially with respect to sexually explicit materials. Some are skepti-cal of the need to do this, and compared to the threats to which children are ex-posed in the physical world, the danger of exposure to explicit online material indeed seems slight. Still, many people are con-cerned about it; the legal system has generally decided that they have a right to translate their concerns into law; and outside the online world, laws that restrict minors from accessing sexually ex-plicit material have generally been upheld. For purposes of this discussion, I'll assume that preventing children from seeing such ma-terial is indeed an important goal.

A. The Potential Restrictions

	The most prominent restriction on sexually explicit material on-line is, of course, in the Communications Decency Act of 1996. The Act makes it a crime for people to ³use[] any interactive computer service to display in a manner avail-able to a person under 18 years of age, any [material] that, in context, depicts or de-scribes, in terms pa-tently offensive as mea-sured by contempo-rary com-munity standards, sexual or excretory activities or or-gans.²  Many electrons have been spilled regarding the Act, and the Court is scheduled to pass on its constitutionality this Term in Reno v. ACLU.  I don't intend to specif-ically focus on it, though some of the things I say below may ap-ply to it.
	Rather, I want to focus on a different kind of statute. Many states have laws that bar ³public display² of certain kinds of sexually explicit matter, and many such statutes have been up-held against First Amendment chal-lenge.  For instance, Geor-gia Code § 16-12-103 pro-vides, among other things, that:

(e) It shall be unlawful for any person know-ingly to . . . display in pub-lic . . . at any . . . public place fre-quent-ed by mi-nors or where minors are or may be 	invited as part of the general public:
(1) any [visual representation] . . . which depicts sexu-	ally explicit nudity, sexual con-duct, or sadomasoch-	istic abuse and which is harmful to minors; or
(2) any [printed or audio material] which con-tains . . . 	explicit and de-tailed verbal de-scriptions or narra-tive accounts of sexual excitement, sexual con-duct,or sadomasochistic abuse and which, taken as whole, is harmful to minors. 


³Harmful to minors² is defined as:

that quality of description or represen-ta-tion, in whatev-er form, of nudity, sexual con-duct, sexual excitement, or sadomasochistic abuse, when it:

(A) Taken as a whole, predominantly appeals to the 	prurient, shameful, or morbid interest of minors;
(B) Is patently offensive to prevailing stan-dards in the 	adult community as a whole with respect to what is 	suitable mate-rial for mi-nors; and
(C) Is, when taken as a whole, lacking in se-rious liter-	ary, artistic, politi-cal, or scien-tific value for mi-nors. 


Under this definition, even material that's not obscene as to adults is barred from public places.
	If‹as seems quite possible‹electronic plac-es that are acces-sible to the public (such as conferences or Web pages) are found to be ³public places,² then many items that are posted on the Net are al-ready in violation of Georgia law, and of similar laws in other states.  And the law isn't just limited to obscenity or
even ³pornography² (whatever that may be). It could equally apply to ³le-giti-mate² art in an online gallery, or to a person's favorite Mapplethorpe photo on his Web page, or to online sex-talk groups, or conceivably even to groups that talk clinical-ly about sex.
	The problem is that, online, most plac-es‹electronic confer-ences, Web sites, and so on‹are ³frequent-ed² by at least some minors. And while offline one could put the explicit material in a separate room and check people's IDs be-fore one let them in, there's no similar mechanism online. Internet newsgroups are accessible to everyone. So, generally speaking, are discussion lists. While Web pages can theoretically ask for a credit-card number before they let a person into partic-ular places, that won't work if someone wants to display material for free. The Georgia statute and others like it might thus do some-thing quite similar to what the Communications Decency Act is criti-cized for do-ing‹they might bar a great deal of sexually themed mate-rial from most freely available places on the Net.

B. The Least Restrictive Alternative Re-quire-ment

	In my view, the state public display laws‹and the similar Communications Act provi-sions‹are unconstitutional when ap-plied online, because there are means of protecting children in cyberspace without unduly limiting adults.
	In Sable Communications v FCC,  the Su-preme Court made clear that the government may not, in trying to protect children, bar sexually-explicit speech generally when it could im-ple-ment a less restrictive alternative that restricts only children. If such an alterna-tive exists, and if it serves the compelling inter-est as well as would a total ban, then the ban is unconstitution-al.  Butler v Mich-igan,  which struck down a law that tried to ³shield juve-nile innocence² by ³reduc[ing] the adult popula-tion . . . to read-ing only what is fit for children,² sug-gests the same. 
	Formally, the rule that the government may prohibit distri-bution to minors of materials that are harmful to them doesn't include such a proviso; when distributed to minors, materi-al that's harmful to minors is considered es-sentially obscene and lacking in First Amend-ment value.  But if a law that bars dis-tri-bution to minors also interferes with dis-tri-bution to adults, the government should have to show‹as in Sable‹that the law is the means that's least restrictive of adult ac-cess.  As to adults, of course, nonobscene material is constitution-ally pro-tected.

C. Ratings
Fortunately, technology may provide part of the solution here. Unlike in the offline world, a child's online eyes‹the soft-ware that retrieves and displays the material‹can be set up to screen out unwanted material. The diffi-culty comes in recogniz-ing it: To a computer, a Mapplethorpe and Mickey Mouse are both just 1s and 0s. There has to be (as in the offline world) some human agent that identifies what's suitable for minors and what's not.

1. The clean list/dirty list models.

One possible solution is for someone to provide a list of online locations‹World Wide Web sites or Internet electronic conferenc-es‹that have been checked and certified ³clean,² to-gether with a Net access program that allows access only to those locations. The pro-gram can, when it's first set up, ask the buyer (presumably the parent) to configure a password; then, whenever it's run, it will ask for the password, and if the right pass-word isn't entered, it can run in clean-only mode. Alternatively, if someone comes up with a list of places that are ³dirty,² the soft-ware can allow access to all places except the dirty ones.

There are already several commercially available products (often called filters) that, among other things, maintain lists of dirty sites and prohibit access to them. The best-known one is called SurfWatch; it costs about $50,  and for $5.95 per month  a cus-tomer will get the list of dirty sites con-stantly updated. SurfWatch in fact employs people to look through the Net, always on the lookout for new bad locations. If the govern-ment wanted to, it could buy out SurfWatch or one of its competi-tors‹for a fraction of the cost of legally enforcing any sort of speech restriction‹and then distribute the software for free to all users.

This need for updates, of course, shows a weakness of the dirty list approach. The Net is a constantly changing environ-ment; new Web pages and discussion groups are constantly being added, and existing resources are con-stantly being changed. It may take the filter distributors a while to detect the changes.

The clean list model does promise to shield children almost perfectly from harmful-to-mi-nors material, because children would be able to access only those pages that the filter distribu-tors have screened. Leakage of dirty material could happen only when a clean page is modified after the filter people check it.

But precisely because a child can see a page only if it's been certified clean, any clean list program will give children access to only a fraction of the clean material on the Web. Screeners al-most certainly couldn't check more than a small fraction of exist-ing Web resources, and any new resources‹including new pages at existing sites‹might go unchecked for quite a long time.  Many parents, even those who want to shield their children from harmful matter, might be un-derstandably reluc-tant to restrict their children's access that greatly. 

Courts might, despite this, still conclude that a clean list is a less restrictive but equally effective alternative to a ban: Afte